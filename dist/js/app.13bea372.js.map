{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?adbe","webpack:///src/App.vue","webpack:///./src/App.vue?4c4f","webpack:///./src/App.vue","webpack:///./src/components/Home.vue?09dc","webpack:///./src/module/tokenizer/rules/javascript.js","webpack:///./src/module/tokenizer/rules/css.js","webpack:///./src/module/tokenizer/rules/html.js","webpack:///./src/common/Util.js","webpack:///./src/module/tokenizer/core/index.js","webpack:///./src/module/lint/language/javascript.js","webpack:///./src/module/lint/language/css.js","webpack:///./src/module/lint/language/html.js","webpack:///./src/module/lint/core/index.js","webpack:///./src/module/fold/index.js","webpack:///./src/module/search/index.js","webpack:///./src/module/select/index.js","webpack:///./src/module/cursor/index.js","webpack:///./src/module/history/index.js","webpack:///./src/components/StatusBar.vue?5a78","webpack:///./src/components/Panel.vue?3b6e","webpack:///src/components/Panel.vue","webpack:///./src/components/Panel.vue?bc4b","webpack:///./src/components/Panel.vue","webpack:///src/components/StatusBar.vue","webpack:///./src/components/StatusBar.vue?3f37","webpack:///./src/components/StatusBar.vue","webpack:///./src/components/Tip.vue?9e11","webpack:///src/components/Tip.vue","webpack:///./src/components/Tip.vue?e042","webpack:///./src/components/Tip.vue","webpack:///src/components/Home.vue","webpack:///./src/components/Home.vue?6ab4","webpack:///./src/components/Home.vue","webpack:///./src/router.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","component","ref","staticClass","style","_statusHeight","on","$event","preventDefault","onContextmenu","arguments","onClickEditor","onWheel","top","_numTop","staticStyle","_v","_s","maxLine","_l","line","num","class","_activeLine","height","_lineHeight","errorMap","onIconMouseLeave","onIconMouseOver","fold","onToggleFold","_e","_leftShadow","onScrollerMdown","_top","minWidth","_contentMinWidth","onSelectend","active","selected","domProps","html","range","left","width","tab","_tabLineLeft","item","visibility","_cursorVisible","stopPropagation","onHscroll","_hScrollWidth","onVscroll","scrollerHeight","_textAreaPos","onBlur","onCompositionend","onCompositionstart","onCopy","onCut","onFocus","onInput","onKeyDown","onPaste","nowCursorPos","column","statusHeight","language","tabSize","directives","rawName","expression","menuList","menuStyle","onClickMenu","tipContent","tipStyle","variable","strValid","e","side","tplStrChild","tplStrReg","start","end","token","plainToken","foldName","valid","childRule","rules","level","regexp","regex","option","text","index","RegExp","foldType","comment","braces","styleRules","attrRules","tagFoldName","tagFoldType","scriptStart","tagToken","scriptEnd","styleStart","styleEnd","exec","jsRules","cssRules","Util","clipboardData","Promise","resolve","getData","navigator","clipboard","readText","setData","writeText","String","replace","Number","val","tmp","arr","sort","arg1","arg2","wrap","str1","str2","id1","getUUID","id2","$tempDom","$","append","dom","charWidth","scrollWidth","charHight","clientHeight","fontSize","getComputedStyle","currentStyle","fullAngleCharWidth","remove","str","charW","fullCharW","substr","substring","match","fullAngleReg","tabNum","getStrExactWidth","count","id","_splitStr","clientWidth","clearTimeout","timer","setTimeout","Math","floor","htmlTrans","join","space","cont","targetObj","originObj","excludeKeys","_assign","Map","assigned","indexOf","nodeName","nodeType","has","Array","set","len","random","toString","funStr","blob","Blob","url","URL","createObjectURL","worker","Worker","target","context","properties","map","defineProperties","peek","empty","keyCode","DELETE","BACKSPACE","command","INSERT","constData","PAIR_START","PAIR_START_END","PAIR_END","FOLD_OPEN","FOLD_CLOSE","DEFAULT","editor","currentLine","languageMap","initProperties","initLanguage","tokenizeLines","initRules","htmlRules","obj","ruleIdMap","regexMap","ruleId","deepAssign","setRuleId","rule","startBy","endBy","_item","states","statesKey","sources","sourceMap","regexs","resultStates","getEndRegex","reverse","getStartRegex","source","nowLine","onInsertContentBefore","tokenizeVisibleLins","startLine","endLine","processedLines","processedTime","Date","now","lineObj","htmls","tokens","tokenizeLine","folds","type","split","renderLine","lineId","lastIndex","preEnd","newStates","getRegex","resultObj","splitLongToken","groups","undefined","getTokenType","getFold","getToken","startCol","pop","expIndex","getChildExpIndex","getFoldName","getFoldType","_checkFold","childExpIndex","captures","hasChildExp","filter","preRuleId","preRule","getCombRegex","_isArray","keywords","assignOperator","binaryOperator","unitOperator","brackets","regs","number","identifier","string1","string2","string3","other","regflagsMap","maxErrors","TokenType","label","_isTokenType","ErrorType","Error","param","error","Lexer","init","Parser","lexer","cacheList","backs","parseList","preToken","errors","NUMBER","BOOLEAN","STRING","IDENTIFIER","KEYWORD","OPERATOR","BRACKET","PUNCTUATOR","REGEXP","OTHER","UNEXPECTED","EXPECTED","MISS","UNMATCH","expectedIdentifier","expectedSemicolon","expected","unexpected","unmatch","lines","input","assignOperatorMap","unitOperatorMap","binaryOperatorMap","keywordsMap","bracketsMap","reset","texts","skip","skipLine","hasNext","isVariable","isValue","isScalar","isDotAble","isPostOp","isPreOp","isAssignOperator","isUnitOperator","isBinaryOperator","isKeyWord","isBracket","isTokenType","craeteToken","scanSpace","scanComment","ch1","ch2","startToken","scanString","that","_end","_parseTmpStr","reg","parser","parseExprStmt","peekMatch","scanNunmber","scanIdentifier","scanBracket","ch","scanOperator","ch3","ch4","scanOther","next","_scanOp","_token","assign","recovery","cache","hasCache","cacheIndex","pass","pre2Token","puted","nextMatch","lookahead","putBack","unshift","skipSemicolon","Infinity","parse","startTime","parseStmt","parseTimer","skipCheckSemicolon","parseDeclareStmt","parseObjectStmt","parseBlockStmt","parseImportStmt","parseExportStmt","parseIfStmt","parseSwitchStmt","parseWithStmt","parseWhileStmt","parseDoStmt","parseTryStmt","parseForStmt","parseClassStmt","parseControlStmt","parseReturnStmt","parseThrowStmt","parseFunctionStmt","ends","parseExpr","parseFunArgsStmt","_identifier","parseAssignStmt","_nextExpr","_stmt","needName","checkIn","parseRegex","toLowerCase","leftHand","parseLeftHand","parseDot","assignAble","parseProperty","isSignOp","parseCallArgs","parseParen","parseArray","parseNew","parseArrorwFunction","lookLength","lookToken","skipNextExpr","a","b","console","log","tag","propertyName","numValue","propertyValue","punctuator","SELECTOR","PROPERTY","VALUE","NUM_VALUE","isProp","scanPunctuator","parseSelector","parseBlock","parseMedia","parseKeyFrames","parseCharset","parseImport","onlyValue","_nextMatchProperty","_nextMatchValue","hasValue","lbraces","htmlLint","js","css","enter","comments","parseComentRange","pos","setLineColumn","parseJs","concat","parseCss","jsParser","_parse","cssParser","parseFun","checkInComment","_compare","Function","jsLint","cssLint","parseId","terminate","setErrorMap","createWorker","onmessage","mod","postMessage","editorFunObj","findFoldIndex","unFolds","unFold","selectedRange","right","mid","resultFold","getRangeFold","foldMap","delete","foldIconCheck","stack","lineCount","realLine","relLine","checkCache","preExec","resultCaches","firstRnagePos","rangePos","strs","regStr","wholeWord","ignoreCase","comparePos","list","cacheData","direct","multiCursorPos","cursorPos","checkCursorSelected","cursor","moveCursor","_cursorPos","addSelectedRange","filterSelectedRanges","renderSelectedBg","same","selectedRanges","delCurposMap","preRnage","nextRange","del","size","word","dWord","setNowCursorPos","updateAfter","_updateAfter","setCursorRealPos","filterMultiCursorPos","aftetrList","posMap","getStrWidth","getColumnByWidth","updateCursorPos","sReg","history","doCommand","commandType","clearCursorPos","preCursorPos","deleteContent","insertContent","lastCommand","sortComand","pushHistoryTime","_combCheck","_combCommand","_index","showTabsize","_tabSize","tabSizeList","bottom","onTabsizeChange","showLanguage","_language","languageList","onLnaguageChange","group","checked","checkable","disabled","onClick","shortcut","content","Vue","use","Router","router","routes","path","Home","meta","title","redirect","config","productionTip","render","h","App","$mount"],"mappings":"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","file":"js/app.13bea372.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('keep-alive',[_c('router-view')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div id=\"app\">\n\t\t<keep-alive>\n\t\t\t<router-view></router-view>\n\t\t</keep-alive>\n\t</div>\n</template>\n\n<script>\n\nexport default {\n    name: 'App',\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=151c70cd&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"editor\",staticClass:\"my-editor-wrap\",style:({'padding-bottom': _vm._statusHeight}),on:{\"contextmenu\":function($event){$event.preventDefault();return _vm.onContextmenu.apply(null, arguments)},\"mousedown\":_vm.onClickEditor,\"selectstart\":function($event){$event.preventDefault();},\"wheel\":function($event){$event.preventDefault();return _vm.onWheel.apply(null, arguments)}}},[_c('div',{staticClass:\"my-editor-nums\",style:({top: _vm._numTop})},[_c('div',{staticClass:\"my-editor-num\",staticStyle:{\"visibility\":\"hidden\"}},[_vm._v(_vm._s(_vm.maxLine))]),_vm._l((_vm.renderHtmls),function(line){return _c('div',{key:line.num,staticClass:\"my-editor-num\",class:{'my-editor-num-active': _vm._activeLine(line.num)},style:({height:_vm._lineHeight, 'line-height':_vm._lineHeight})},[_c('span',{staticClass:\"my-editor-icon my-editor-center\",class:[_vm.errorMap[line.num]?'my-editor-icon-error':''],on:{\"mouseleave\":_vm.onIconMouseLeave,\"mouseover\":function($event){return _vm.onIconMouseOver(line.num, $event)}}}),_c('span',[_vm._v(_vm._s(line.num))]),(line.fold)?_c('span',{staticClass:\"my-editor-fold my-editor-center\",class:[line.fold=='open'?'my-editor-fold-open':'my-editor-fold-close'],on:{\"click\":function($event){return _vm.onToggleFold(line.num)}}}):_vm._e()])})],2),_c('div',{staticClass:\"my-editor-content-wrap\",style:({'box-shadow': _vm._leftShadow})},[_c('div',{ref:\"scroller\",staticClass:\"my-editor-content-scroller\",on:{\"mousedown\":_vm.onScrollerMdown}},[_c('div',{ref:\"content\",staticClass:\"my-editor-content\",style:({top: _vm._top, minWidth: _vm._contentMinWidth}),on:{\"selectend\":function($event){$event.preventDefault();return _vm.onSelectend.apply(null, arguments)}}},[_vm._l((_vm.renderHtmls),function(line){return _c('div',{key:line.num,staticClass:\"my-editor-line\",class:{active: _vm._activeLine(line.num)},style:({height:_vm._lineHeight, 'line-height':_vm._lineHeight}),attrs:{\"data-line\":line.num,\"id\":'line_'+line.num}},[_c('div',{staticClass:\"my-editor-code\",class:[line.selected ? 'my-editor-select-bg my-editor-select-active' : '', line.fold == 'close' ? 'fold-close' : ''],attrs:{\"data-line\":line.num},domProps:{\"innerHTML\":_vm._s(line.html)}}),_vm._l((line.selectStarts),function(range){return _c('div',{staticClass:\"my-editor-line-bg my-editor-select-bg\",class:{'my-editor-select-active': range.active},style:({left: range.left + 'px', width: range.width + 'px'})})}),_vm._l((line.selectEnds),function(range){return _c('div',{staticClass:\"my-editor-line-bg my-editor-select-bg my-editor-select-active\",style:({left: range.left + 'px', width: range.width + 'px'})})}),_vm._l((line.tabNum),function(tab){return _c('span',{staticClass:\"my-editor-tab-line\",style:({left: _vm._tabLineLeft(tab)})})})],2)}),_vm._l((_vm.multiCursorPos),function(item){return _c('div',{staticClass:\"my-editor-cursor\",style:({height: _vm._lineHeight, top: item.top, left: item.left, visibility: _vm._cursorVisible})})})],2)]),_c('div',{ref:\"hScroller\",staticClass:\"my-editor-h-scroller-wrap\",on:{\"mousedown\":function($event){$event.stopPropagation();},\"mouseup\":function($event){$event.stopPropagation();},\"scroll\":_vm.onHscroll}},[_c('div',{staticClass:\"my-editor-h-scroller\",style:({width: _vm._hScrollWidth})})]),_c('div',{ref:\"vScroller\",staticClass:\"my-editor-v-scroller-wrap\",on:{\"mousedown\":function($event){$event.stopPropagation();},\"mouseup\":function($event){$event.stopPropagation();},\"scroll\":_vm.onVscroll}},[_c('div',{staticClass:\"my-editor-v-scroller\",style:({height: _vm.scrollerHeight})})]),_c('textarea',{ref:\"textarea\",staticClass:\"my-editor-textarea\",style:({top: _vm._textAreaPos.top, left: _vm._textAreaPos.left}),on:{\"blur\":_vm.onBlur,\"compositionend\":_vm.onCompositionend,\"compositionstart\":_vm.onCompositionstart,\"copy\":function($event){$event.preventDefault();return _vm.onCopy.apply(null, arguments)},\"cut\":function($event){$event.preventDefault();return _vm.onCut.apply(null, arguments)},\"focus\":_vm.onFocus,\"input\":_vm.onInput,\"keydown\":_vm.onKeyDown,\"paste\":function($event){$event.preventDefault();return _vm.onPaste.apply(null, arguments)}}})]),_c('status-bar',{ref:\"statusBar\",attrs:{\"column\":_vm.nowCursorPos.column+1,\"height\":_vm.statusHeight,\"language\":_vm.language,\"line\":_vm.nowCursorPos.line,\"tabSize\":_vm.tabSize},on:{\"update:language\":function($event){_vm.language=$event},\"update:tabSize\":function($event){_vm.tabSize=$event},\"update:tab-size\":function($event){_vm.tabSize=$event}}}),_c('panel',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.menuVisble),expression:\"menuVisble\"}],ref:\"menu\",attrs:{\"checkable\":false,\"menuList\":_vm.menuList,\"styles\":_vm.menuStyle},on:{\"change\":_vm.onClickMenu}}),_c('tip',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.tipContent),expression:\"tipContent\"}],attrs:{\"content\":_vm.tipContent,\"styles\":_vm.tipStyle}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","const variable = `[\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*?`\r\nconst strValid = function (e) {\r\n    let value = e.value;\r\n    if (e.side === 'end' && value[0] === '\\\\' && value.length % 2 === 0) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nconst tplStrChild = {};\r\n//字符串``\r\nconst tplStrReg = {\r\n    start: /`/,\r\n    end: /\\\\*?`/,\r\n    token: 'js-string',\r\n    plainToken: 'js-string',\r\n    foldName: 'js-string',\r\n    valid: strValid,\r\n    childRule: {\r\n        rules: [{\r\n            start: /\\$\\{/,\r\n            end: /\\}/,\r\n            foldName: 'js-string-expr',\r\n            level: 1,\r\n            childRule: tplStrChild\r\n        }]\r\n    }\r\n};\r\n// 正则字面量\r\nconst regexp = {\r\n    start: /(?<=^|[\\(\\{\\[\\;\\,\\:\\?\\!\\+\\-\\*\\%\\=\\>\\<\\&\\|]\\s*?)\\//,\r\n    end: /(?<=(?:\\\\[\\s\\S]|[^\\\\])+?)\\/(?:i|m|g|im|mi|ig|gi|mg|gm|img|igm|mig|mgi|gim|gmi)?|$/i,\r\n    childRule: {\r\n        rules: [{\r\n            regex: /\\\\b/,\r\n            token: 'js-regex-ctrl'\r\n        }, {\r\n            regex: /\\\\[\\s\\S]/,\r\n            token: 'js-regex-escape'\r\n        }, {\r\n            regex: /\\?\\=|\\?\\<\\=|\\?\\!|\\?\\<\\!/,\r\n            token: 'js-regex'\r\n        }, {\r\n            regex: /\\*|\\^|\\$|\\?/,\r\n            token: 'js-regex-ctrl'\r\n        }, {\r\n            start: /\\[/,\r\n            end: /(?<!\\\\)\\]/,\r\n            token: 'js-regex-bracket',\r\n            childRule: {\r\n                rules: [{\r\n                    regex: /\\^/,\r\n                    token: 'js-regex-ctrl',\r\n                    valid: function (option) {\r\n                        let text = option.text;\r\n                        let index = option.index;\r\n                        if (text[index - 1] === '[' && text[index - 2] !== '\\\\') {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                }]\r\n            }\r\n        }]\r\n    },\r\n    token: 'js-regex'\r\n}\r\nconst rules = [\r\n    tplStrReg,\r\n    //字符串''\r\n    {\r\n        start: /'/,\r\n        end: /\\\\*?'|[^\\\\]$|^$/,\r\n        token: 'js-string',\r\n        foldName: 'js-single-string',\r\n        valid: strValid\r\n    },\r\n    //字符串\"\"\"\r\n    {\r\n        start: /\"/,\r\n        end: /\\\\*?\"|[^\\\\]$|^$/,\r\n        token: 'js-string',\r\n        foldName: 'js-double-string',\r\n        valid: strValid\r\n    },\r\n    //多行注释\r\n    {\r\n        start: /\\/\\*/,\r\n        end: /\\*\\//,\r\n        token: 'js-comment',\r\n        foldName: 'js-comment'\r\n    }, {\r\n        regex: /\\/\\/[\\s\\S]*$/,\r\n        token: 'js-comment'\r\n    },\r\n    regexp,\r\n    {\r\n        regex: /\\bvar\\b|\\blet\\b|\\bconst\\b/,\r\n        token: 'js-type'\r\n    },\r\n    {\r\n        regex: /\\bcontinue\\b|\\bbreak\\b|\\bswitch\\b|\\bcase\\b|\\bdo\\b|\\bwhile\\b|\\belse\\b|\\bfor\\b|\\bif\\b|\\bnew\\b|\\breturn\\b|\\bfrom\\b|\\btypeof|\\beach\\b|\\bin\\b|\\bimport\\b|\\bexport\\b|\\bdefault\\b|\\bwith\\b|\\bthrow\\b|\\btry\\b|\\bcatch\\b|\\bfinally\\b/,\r\n        token: 'js-key'\r\n    }, {\r\n        regex: /\\bclass\\b/, //class {}\r\n        token: 'js-class'\r\n    }, {\r\n        regex: /\\b[A-Z][\\\\$_a-zA-Z0-9]*?(?=\\.)/, //Token.\r\n        token: 'js-function-class'\r\n    }, {\r\n        regex: /\\bfunction\\b/,\r\n        token: 'js-function'\r\n    }, {\r\n        regex: new RegExp(`(${variable})\\\\s*?(?=\\\\([^\\\\(\\\\)]*?\\\\)\\\\s*?\\\\{)`), //ie. test(){}\r\n        token: 'js-function-name'\r\n    }, {\r\n        regex: new RegExp(`(?<=\\\\bfunction\\\\s+?)${variable}`), //ie. function test\r\n        token: 'js-function-name'\r\n    }, {\r\n        regex: new RegExp(`(?<=\\\\bnew\\\\s+?)${variable}(?=\\\\s*?\\\\()`), //ie. new Test()\r\n        token: 'js-new-class'\r\n    }, {\r\n        regex: /(\\{)|(\\[)|(\\()/,\r\n        token: ['js-lbraces', 'js-lbracket', 'js-lparen'],\r\n        foldType: -1,\r\n        foldName: ['js-braces', 'js-bracket', 'js-paren']\r\n    }, {\r\n        regex: /(\\})|(\\])|(\\))/,\r\n        token: ['js-rbraces', 'js-rbracket', 'js-rparen'],\r\n        foldType: 1,\r\n        foldName: ['js-braces', 'js-bracket', 'js-paren']\r\n    }, {\r\n        regex: /(?<=\\.)(?:prototype\\b|toString\\b|valueOf\\b|toLocaleString\\b|hasOwnProperty\\b|isPrototypeOf\\b|propertyIsEnumerable\\b)/,\r\n        token: 'js-local'\r\n    }, {\r\n        regex: /\\bwindow\\b|\\bdocument\\b|\\bmodule\\b|\\bexports\\b/,\r\n        token: 'js-local'\r\n    }, {\r\n        regex: /\\bthis\\b|\\bself\\b/,\r\n        token: 'js-this'\r\n    }, {\r\n        regex: /\\+|\\-|\\*|\\/|\\=|\\!|>|<|\\&|\\||\\?/,\r\n        token: 'js-oprator'\r\n    }, {\r\n        regex: new RegExp(`\\\\b\\\\d+\\\\b|\\\\b0[xX][a-zA-Z0-9]*?\\\\b|\\\\bundefined\\\\b|\\\\bnull\\\\b|\\\\btrue\\\\b|\\\\bfalse\\\\b|\\\\bNaN\\\\b`),\r\n        token: 'js-number'\r\n    }, {\r\n        regex: new RegExp(`(${variable})(?=\\\\()`), //ie. test(),.test()\r\n        token: 'js-function-exec'\r\n    }, {\r\n        regex: new RegExp(`(?<=\\\\s*?class\\\\s*?)${variable}(?=\\\\s*?\\\\{)`), //ie. calss Test{}\r\n        token: 'js-class-name'\r\n    }\r\n];\r\ntplStrChild.rules = rules;\r\n\r\nexport default {\r\n    rules: rules\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2021-12-24 16:08:20\r\n * @Description: \r\n */\r\nconst comment = {\r\n    start: /\\/\\*/,\r\n    end: /\\*\\//,\r\n    token: 'css-comment',\r\n    foldName: 'css-comment'\r\n}\r\nconst braces = {\r\n    start: /\\{/,\r\n    end: /\\}/,\r\n    token: ['css-lbraces', 'css-rbraces'],\r\n    foldName: 'css-braces',\r\n    childRule: {\r\n        rules: [\r\n            comment,\r\n            null,\r\n            {\r\n                regex: /;/,\r\n                token: 'css-split'\r\n            }, {\r\n                regex: /:/,\r\n                token: 'css-value-start'\r\n            }, {\r\n                regex: /[a-zA-Z][^;\\:\\s\\}]*?(?=\\s*?\\:)/,\r\n                token: 'css-property'\r\n            }, {\r\n                regex: /(?<=\\:\\s*?)[^;\\:\\}]+?(?=;|}|$)/,\r\n                token: 'css-value'\r\n            }, {\r\n                regex: /(?:\\d+(?:\\.\\d*)?|\\.\\d+)%/,\r\n                token: 'css-percent'\r\n            }\r\n        ]\r\n    }\r\n}\r\nbraces.childRule.rules[1] = braces;\r\n\r\nexport default {\r\n    rules: [\r\n        comment,\r\n        braces,\r\n        {\r\n            regex: /[#\\.]?[^\\s\\,\\:\\{]+/,\r\n            token: function (value) {\r\n                if (value[0] == '.') {\r\n                    return 'css-selector-class';\r\n                } else if (value[0] == '#') {\r\n                    return 'css-selector-id';\r\n                } else {\r\n                    return 'css-selector-tag';\r\n                }\r\n            }\r\n        }, {\r\n            regex: /(?<=\\:)[^\\s\\,\\:]+/,\r\n            token: 'css-pseudo'\r\n        }\r\n    ]\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2021-12-10 09:31:38\r\n * @Description: \r\n */\r\nimport jsRules from './javascript.js';\r\nimport cssRules from './css.js';\r\n\r\nconst styleRules = [{\r\n    regex: /(?<=\\:(?:\\s*?\\w+?\\s*?){0,})\\d+/,\r\n    token: 'html-style-number'\r\n}, {\r\n    regex: /(?<=\\:\\s*?\\d+)px\\b/,\r\n    token: 'html-style-px'\r\n}, {\r\n    regex: /(?<=(?:\\;|'|\")\\s*?)[^\\<\\>\\:\\;'\"]+/,\r\n    token: 'html-style-name'\r\n}, {\r\n    regex: /(?<=\\:\\s*?)[^\\<\\>\\:\\;'\"]+/,\r\n    token: 'html-style-value'\r\n}];\r\n\r\nconst attrRules = [{\r\n    start: /(?<=style\\s*?\\=\\s*?)'/,\r\n    end: /'/,\r\n    token: 'xml-attr-value',\r\n    level: 1,\r\n    childRule: {\r\n        rules: styleRules\r\n    }\r\n}, {\r\n    start: /(?<=style\\s*?\\=\\s*?)\"/,\r\n    end: /\"/,\r\n    token: 'xml-attr-value',\r\n    level: 1,\r\n    childRule: {\r\n        rules: styleRules\r\n    }\r\n}, {\r\n    start: /(?<=\\=\\s*?)\"/,\r\n    end: /\"/,\r\n    level: 1,\r\n    token: 'xml-attr-value'\r\n}, {\r\n    start: /(?<=\\=\\s*?)'/,\r\n    end: /'/,\r\n    level: 1,\r\n    token: 'xml-attr-value'\r\n}, {\r\n    regex: /(?<=\\<\\/?)\\w+\\b/,\r\n    token: 'xml-tag-name',\r\n    foldName: tagFoldName,\r\n    foldType: tagFoldType\r\n}, {\r\n    regex: /(?<=\\=)\\s*?[^\\<\\>\\s\\'\\\"]+\\b/,\r\n    token: 'xml-attr-value'\r\n}, {\r\n    regex: /\\b[^'\"=\\s\\>\\<]+\\b/,\r\n    token: 'xml-attr-name'\r\n}];\r\n\r\nconst scriptStart = {\r\n    start: /\\<(?=script\\b)/,\r\n    end: /\\>/,\r\n    token: tagToken,\r\n    childRule: {\r\n        rules: attrRules\r\n    }\r\n}\r\n\r\nconst scriptEnd = {\r\n    start: /\\<\\/(?=script\\>)/,\r\n    end: /\\>/,\r\n    token: tagToken,\r\n    childRule: {\r\n        rules: [{\r\n            regex: /(?<=\\<\\/?)\\w+\\b/,\r\n            token: 'xml-tag-name',\r\n            foldName: tagFoldName,\r\n            foldType: tagFoldType\r\n        }]\r\n    }\r\n}\r\n\r\nconst styleStart = {\r\n    start: /\\<(?=style\\b)/,\r\n    end: /\\>/,\r\n    token: tagToken,\r\n    childRule: {\r\n        rules: attrRules\r\n    }\r\n}\r\n\r\nconst styleEnd = {\r\n    start: /\\<\\/(?=style\\s*?\\>)/,\r\n    end: /\\>/,\r\n    token: tagToken,\r\n    childRule: {\r\n        rules: [{\r\n            regex: /(?<=\\<\\/?)\\w+\\b/,\r\n            token: 'xml-tag-name',\r\n            foldName: tagFoldName,\r\n            foldType: tagFoldType\r\n        }]\r\n    }\r\n}\r\n\r\nfunction tagToken(e) {\r\n    if (e.side == 'start') {\r\n        if (e.value[1] == '/') {\r\n            return 'xml-end-tag-open';\r\n        } else {\r\n            return 'xml-tag-open';\r\n        }\r\n    } else if (e.side === 'end') {\r\n        return 'xml-tag-close';\r\n    }\r\n}\r\n\r\nfunction tagFoldName(e) {\r\n    if (/hr|br|meta|img|link|input/i.exec(e.value)) { //单标签，不折叠\r\n        return '';\r\n    }\r\n    return e.value;\r\n}\r\n\r\nfunction tagFoldType(e) {\r\n    if (e.text[e.index - 1] == '/') {\r\n        return 1;\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport default {\r\n    rules: [{\r\n        start: scriptStart,\r\n        end: scriptEnd,\r\n        childRule: jsRules\r\n    }, {\r\n        start: styleStart,\r\n        end: styleEnd,\r\n        childRule: cssRules\r\n    }, {\r\n        start: /\\<\\/?(?=\\w+\\b)/,\r\n        end: /\\/?\\>/,\r\n        token: tagToken,\r\n        childRule: {\r\n            rules: attrRules\r\n        }\r\n    }, {\r\n        start: /\\<\\!\\-\\-/,\r\n        end: /\\-\\-\\>/,\r\n        token: 'xml-comment',\r\n        foldName: 'xml-comment'\r\n    }]\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2020-10-31 13:48:50\r\n * @Description: 工具类\r\n */\r\nimport $ from 'jquery';\r\n\r\nclass Util {\r\n    static readClipboard() {\r\n        if (window.clipboardData) {\r\n            return new Promise((resolve) => {\r\n                resolve(clipboardData.getData('Text'));\r\n            });\r\n        } else if (navigator.clipboard) {\r\n            return navigator.clipboard.readText();\r\n        }\r\n    }\r\n    static writeClipboard(text) {\r\n        if (window.clipboardData) {\r\n            clipboardData.setData('Text', text);\r\n        } else if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(text);\r\n        }\r\n    }\r\n    //获取数字\r\n    static getNum(value) {\r\n        value = String(value);\r\n        value = value.replace(/[^0123456789\\.]/g, '');\r\n        var regex = /^\\d+(\\.\\d*)?$/;\r\n        var r = regex.exec(value);\r\n        var num = r && r[0] || '';\r\n        if (num) {\r\n            num = Number(r[0]);\r\n        }\r\n        return num;\r\n    }\r\n    //生成指定个数的空白符\r\n    static space(tabSize) {\r\n        var val = '';\r\n        for (var tmp = 0; tmp < tabSize; tmp++) {\r\n            val += ' '\r\n        };\r\n        return val;\r\n    }\r\n    //数组数字排序\r\n    static sortNum(arr) {\r\n        arr.sort(function (arg1, arg2) {\r\n            return Number(arg1) - Number(arg2);\r\n        })\r\n    }\r\n    //获取字符宽度\r\n    static getCharWidth(wrap) {\r\n        var str1 = '------------------------------------------------------------------------------------';\r\n        var str2 = '一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一一';\r\n        var id1 = 'char-width-' + Util.getUUID();\r\n        var id2 = 'char-width-' + Util.getUUID();\r\n        var $tempDom = $(`<div class=\"my-editor-line\">\r\n        <div class=\"my-editor-code\"><span id=\"${id1}\">${str1}</span><span id=\"${id2}\">${str2}</span></div>\r\n        </div>`);\r\n        $(wrap).append($tempDom)\r\n        var dom = $('#' + id1)[0];\r\n        var charWidth = dom.scrollWidth / str1.length;\r\n        var charHight = dom.clientHeight;\r\n        var fontSize = window.getComputedStyle ? window.getComputedStyle(dom, null).fontSize : dom.currentStyle.fontSize;\r\n        var fullAngleCharWidth = $('#' + id2)[0].scrollWidth / str2.length;\r\n        $tempDom.remove();\r\n        return {\r\n            charWidth: charWidth,\r\n            fullAngleCharWidth: fullAngleCharWidth,\r\n            charHight: charHight,\r\n            fontSize: fontSize\r\n        }\r\n    }\r\n    /**\r\n     * 获取文本在浏览器中的真实宽度\r\n     * @param  {string} str       文本\r\n     * @param  {number} charW     半角符号/文字宽度\r\n     * @param  {number} fullCharW 全角符号/文字宽度\r\n     * @param  {number} tabSize   tab符所占宽度\r\n     * @param  {number} start     文本开始索引\r\n     * @param  {number} end       文本结束索引\r\n     * @return {number}           文本真实宽度\r\n     */\r\n    static getStrWidth(str, charW, fullCharW, tabSize, start, end) {\r\n        tabSize = tabSize || 4;\r\n        if (typeof start != 'undefined') {\r\n            str = str.substr(start);\r\n        }\r\n        if (typeof end != 'undefined') {\r\n            str = str.substring(0, end - start);\r\n        }\r\n        var match = str.match(this.fullAngleReg);\r\n        var width = str.length * charW;\r\n        var tabNum = str.match(/\\t/g);\r\n        tabNum = tabNum && tabNum.length || 0;\r\n        match = match && match.length || 0;\r\n        if (match) {\r\n            match = match - tabNum;\r\n            width = match * fullCharW + (str.length - match) * charW;\r\n            width += tabNum * charW * (tabSize - 1);\r\n        }\r\n        return width;\r\n    }\r\n    /**\r\n     * 获取文本在浏览器中的真实宽度\r\n     * @param  {string} str       文本\r\n     * @param  {DOM} wrap     容器\r\n     */\r\n    static getStrExactWidth(str, tabSize, wrap) {\r\n        Util.getStrExactWidth.count = Util.getStrExactWidth.count || 0;\r\n        Util.getStrExactWidth.count++;\r\n        if (!str) {\r\n            return 0;\r\n        }\r\n        var id = 'str-width-' + Util.getUUID();\r\n        var $tempDom = $(`<div class=\"my-editor-line my-editor-temp-text\" style=\"visibility:hidden\">\r\n        <div class=\"my-editor-code\" id=\"${id}\">${_splitStr(str)}</div>\r\n        </div>`);\r\n        $(wrap).append($tempDom)\r\n        var dom = $('#' + id)[0];\r\n        var charWidth = dom.clientWidth;\r\n        if (Util.getStrExactWidth.count > 5) { //避免频繁删除dom导致浏览器卡顿\r\n            $('.my-editor-temp-text').remove();\r\n        } else {\r\n            clearTimeout(Util.getStrExactWidth.timer);\r\n            Util.getStrExactWidth.timer = setTimeout(() => {\r\n                $('.my-editor-temp-text').remove();\r\n            }, 500);\r\n        }\r\n        return charWidth;\r\n\r\n        function _splitStr(str) {\r\n            let count = Math.floor(str.length / 100);\r\n            let result = [];\r\n            for (let i = 0; i < count; i++) {\r\n                let column = i * 100;\r\n                result.push(Util.htmlTrans(str.slice(column, column + 100)));\r\n            }\r\n            count = count * 100;\r\n            if (count < str.length) {\r\n                result.push(Util.htmlTrans(str.slice(count)));\r\n            }\r\n            return `<span>${result.join('</span><span>').replace(/\\t/g, Util.space(tabSize || 4))}</span>`;\r\n        }\r\n    }\r\n    //<,>转义\r\n    static htmlTrans(cont) {\r\n        cont = cont.replace(/\\&\\#/g, '&amp;#');\r\n        return cont.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    }\r\n    // 深度克隆\r\n    static deepAssign(targetObj, originObj, excludeKeys) {\r\n        return _assign(targetObj, originObj, excludeKeys, new Map());\r\n\r\n        function _assign(targetObj, originObj, excludeKeys, assigned) {\r\n            excludeKeys = excludeKeys || [];\r\n            for (var key in originObj) {\r\n                var value = originObj[key];\r\n                if (excludeKeys.indexOf(key) > -1) {\r\n                    continue;\r\n                }\r\n                if (typeof value === 'object' && !(value instanceof RegExp) && value !== null &&\r\n                    (!value.nodeName || !value.nodeType)) {\r\n                    if (assigned.has(value)) {\r\n                        targetObj[key] = assigned.get(value);\r\n                    } else {\r\n                        let tmp = null;\r\n                        if (value instanceof Array) {\r\n                            tmp = targetObj[key] || [];\r\n                            assigned.set(value, tmp);\r\n                            targetObj[key] = _assign(tmp, value, excludeKeys, new Map(assigned));\r\n                        } else {\r\n                            tmp = targetObj[key] || {};\r\n                            assigned.set(value, tmp);\r\n                            targetObj[key] = _assign(tmp, value, excludeKeys, new Map(assigned));\r\n                        }\r\n                    }\r\n                } else {\r\n                    targetObj[key] = value;\r\n                }\r\n            }\r\n            return targetObj;\r\n        }\r\n    }\r\n    static getUUID(len) {\r\n        len = len || 16;\r\n        var str = '';\r\n        for (var i = 0; i < len; i++) {\r\n            str += (Math.random() * 16 | 0).toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * 比较坐标的前后\r\n     * @param {Object} start \r\n     * @param {Object} end \r\n     */\r\n    static comparePos(start, end) {\r\n        if (start.line > end.line || start.line == end.line && start.column > end.column) {\r\n            return 1;\r\n        } else if (start.line == end.line && start.column == end.column) {\r\n            return 0\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    static createWorker(funStr) {\r\n        var blob = new Blob([funStr]);\r\n        var url = window.URL.createObjectURL(blob);\r\n        var worker = new Worker(url);\r\n        return worker;\r\n    }\r\n    static defineProperties(target, context, properties) {\r\n        let result = {};\r\n        properties.map((property) => {\r\n            result[property] = {\r\n                get: function () {\r\n                    if (typeof context[property] == 'function') {\r\n                        return context[property].bind(context);\r\n                    } else {\r\n                        return context[property];\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        Object.defineProperties(target, result);\r\n    }\r\n}\r\nArray.prototype.peek = function (index) {\r\n    if (this.length) {\r\n        return this[this.length - (index || 1)];\r\n    }\r\n}\r\nArray.prototype.empty = function () {\r\n    this.length = 0;\r\n    return this;\r\n}\r\nString.prototype.peek = function (index) {\r\n    if (this.length) {\r\n        return this[this.length - (index || 1)];\r\n    }\r\n}\r\n//全角符号和中文字符\r\nUtil.fullAngleReg = /[\\x00-\\x1f\\x80-\\xa0\\xad\\u1680\\u180E\\u2000-\\u200f\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF\\uFFF9-\\uFFFC]|[\\u1100-\\u115F\\u11A3-\\u11A7\\u11FA-\\u11FF\\u2329-\\u232A\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3000-\\u303E\\u3041-\\u3096\\u3099-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3190-\\u31BA\\u31C0-\\u31E3\\u31F0-\\u321E\\u3220-\\u3247\\u3250-\\u32FE\\u3300-\\u4DBF\\u4E00-\\uA48C\\uA490-\\uA4C6\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFAFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF60\\uFFE0-\\uFFE6]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\nUtil.keyCode = {\r\n    DELETE: 46,\r\n    BACKSPACE: 8\r\n}\r\nUtil.command = {\r\n    DELETE: 'delete',\r\n    INSERT: 'insert'\r\n}\r\nUtil.constData = {\r\n    PAIR_START: -1,\r\n    PAIR_START_END: 0,\r\n    PAIR_END: 1,\r\n    FOLD_OPEN: 1,\r\n    FOLD_CLOSE: -1,\r\n    DEFAULT: 'default'\r\n}\r\nexport default Util;","/*\r\n * @Author: lisong\r\n * @Date: 2021-12-15 11:39:41\r\n * @Description: \r\n */\r\nimport jsRules from '@/module/tokenizer/rules/javascript.js';\r\nimport htmlRules from '@/module/tokenizer/rules/html.js';\r\nimport cssRules from '@/module/tokenizer/rules/css.js';\r\nimport Util from '@/common/Util';\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.currentLine = 1;\r\n        this.languageMap = [];\r\n        this.initProperties(editor, context);\r\n        this.initLanguage(editor.language);\r\n    }\r\n    initLanguage(language) {\r\n        this.language = language;\r\n        clearTimeout(this.tokenizeLines.timer);\r\n        switch (language) {\r\n            case 'JavaScript':\r\n                this.initRules(jsRules);\r\n                break;\r\n            case 'HTML':\r\n                this.initRules(htmlRules);\r\n                break;\r\n            case 'CSS':\r\n                this.initRules(cssRules);\r\n                break;\r\n            default:\r\n                this.language = 'plain';\r\n        }\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, editor, ['startLine', 'maxVisibleLines', 'maxLine', 'renderLine']);\r\n        Util.defineProperties(this, context, ['htmls']);\r\n    }\r\n    initRules(rules) {\r\n        if (this.languageMap[this.language]) {\r\n            let obj = this.languageMap[this.language];\r\n            this.rules = obj.rules;\r\n            this.ruleIdMap = obj.ruleIdMap;\r\n            this.regexMap = obj.regexMap;\r\n            return;\r\n        }\r\n        this.ruleId = 1;\r\n        this.ruleIdMap = {};\r\n        this.regexMap = {};\r\n        this.rules = Util.deepAssign({}, rules);\r\n        this.rules.rules.map((item) => {\r\n            this.setRuleId(item);\r\n        });\r\n        this.languageMap[this.language] = {\r\n            rules: this.rules,\r\n            ruleIdMap: this.ruleIdMap,\r\n            regexMap: this.regexMap\r\n        };\r\n    }\r\n    setRuleId(rule) {\r\n        // 每个规则生成一个唯一标识\r\n        rule.ruleId = this.ruleId++;\r\n        rule.level = rule.level || 0;\r\n        rule.token = rule.token || '';\r\n        this.ruleIdMap[rule.ruleId] = rule;\r\n        if (typeof rule.start === 'object' && !(rule.start instanceof RegExp)) {\r\n            this.setRuleId(rule.start);\r\n            rule.start.startBy = rule.ruleId;\r\n        }\r\n        if (typeof rule.end === 'object' && !(rule.end instanceof RegExp)) {\r\n            this.setRuleId(rule.end);\r\n            rule.end.endBy = rule.ruleId;\r\n        }\r\n        if (rule.childRule && rule.childRule.rules) {\r\n            rule.childRule.rules.map((_item) => {\r\n                !_item.ruleId && this.setRuleId(_item);\r\n            });\r\n            rule.rules = rule.childRule.rules;\r\n        }\r\n    }\r\n    // 组合正则表达式\r\n    getCombRegex(states) {\r\n        states = states || [];\r\n        let statesKey = states + '' || '0';\r\n        let sources = [];\r\n        let sourceMap = {};\r\n        let regexs = [];\r\n        let index = 0;\r\n        let rule = null;\r\n        if (this.regexMap[statesKey]) {\r\n            return this.regexMap[statesKey];\r\n        }\r\n        if (states.length > 1) {\r\n            let resultStates = [];\r\n            while (index < states.length - 1) {\r\n                rule = this.ruleIdMap[states[index + 1]];\r\n                if (rule.startBy === states[index] || rule.endBy === states[index]) { //处于同一层级\r\n                    index++;\r\n                    continue;\r\n                }\r\n                resultStates.push(states[index]);\r\n                index++;\r\n            }\r\n            resultStates.push(states[index]);\r\n            states = resultStates;\r\n        }\r\n        index = states.length - 1;\r\n        rule = states.length && this.ruleIdMap[states.peek()] || this.rules;\r\n        while (index >= 0 && this.ruleIdMap[states[index]].level >= rule.level) {\r\n            regexs.push(this.getEndRegex(this.ruleIdMap[states[index]]));\r\n            index--;\r\n        }\r\n        regexs.reverse();\r\n        rule.rules && rule.rules.map((item) => {\r\n            regexs.push(this.getStartRegex(item));\r\n        });\r\n        regexs.map((item) => {\r\n            let side = item.side === -1 ? 'start' : 'end';\r\n            if (!sourceMap[item.ruleId] || sourceMap[item.ruleId] !== side) {\r\n                sources.push(`?<${side}_${item.ruleId}>${item.regex.source}`);\r\n                sourceMap[item.ruleId] = side;\r\n            }\r\n        });\r\n        this.regexMap[statesKey] = new RegExp(`(${sources.join(')|(')})`, 'g');\r\n        return this.regexMap[statesKey];\r\n    }\r\n    getStartRegex(rule) {\r\n        if (rule.regex instanceof RegExp) {\r\n            return {\r\n                ruleId: rule.ruleId,\r\n                regex: rule.regex,\r\n                side: -1\r\n            }\r\n        } else if (rule.start instanceof RegExp) {\r\n            return {\r\n                ruleId: rule.ruleId,\r\n                regex: rule.start,\r\n                side: -1\r\n            };\r\n        } else if (rule.start.startBy) {\r\n            return this.getStartRegex(rule.start);\r\n        }\r\n    }\r\n    getEndRegex(rule, side) {\r\n        if (rule.regex instanceof RegExp) {\r\n            return {\r\n                ruleId: rule.ruleId,\r\n                regex: rule.regex,\r\n                side: side || 1\r\n            }\r\n        } else if (rule.end instanceof RegExp) {\r\n            return {\r\n                ruleId: rule.ruleId,\r\n                regex: rule.end,\r\n                side: side || 1\r\n            };\r\n        } else if (rule.end.endBy) {\r\n            return this.getStartRegex(rule.end, -1);\r\n        }\r\n    }\r\n    onInsertContentBefore(nowLine) {\r\n        this.onInsertContentBefore.nowLine = nowLine;\r\n    }\r\n    onInsertContentAfter(nowLine) {\r\n        nowLine = this.onInsertContentBefore.nowLine;\r\n        if (this.language == 'plain') {\r\n            return;\r\n        }\r\n        if (nowLine <= this.currentLine) {\r\n            this.tokenizeLines(nowLine);\r\n        } else {\r\n            this.tokenizeVisibleLins();\r\n        }\r\n    }\r\n    onDeleteContentBefore(nowLine) {}\r\n    onDeleteContentAfter(nowLine) {\r\n        if (this.language == 'plain') {\r\n            return;\r\n        }\r\n        if (nowLine <= this.currentLine) {\r\n            this.tokenizeLines(nowLine);\r\n        } else {\r\n            this.tokenizeVisibleLins();\r\n        }\r\n    }\r\n    onScroll() {\r\n        if (this.language == 'plain') {\r\n            return;\r\n        }\r\n        this.tokenizeVisibleLins();\r\n    }\r\n    tokenizeVisibleLins() {\r\n        let currentLine = this.currentLine;\r\n        this.tokenizeLines(this.startLine);\r\n        this.currentLine = currentLine;\r\n    }\r\n    tokenizeLines(startLine, endLine) {\r\n        let processedLines = 0;\r\n        let processedTime = Date.now();\r\n        endLine = endLine || this.maxLine;\r\n        while (startLine <= endLine) {\r\n            let lineObj = this.htmls[startLine - 1];\r\n            if (!lineObj.tokens) { //文本超过一万时跳过高亮\r\n                let data = this.tokenizeLine(startLine);\r\n                lineObj.tokens = data.tokens;\r\n                lineObj.folds = data.folds;\r\n                lineObj.html = data.tokens.map((item) => {\r\n                    let rule = this.ruleIdMap[item.ruleId];\r\n                    if (rule && typeof rule.value === 'function') {\r\n                        return rule.value(item.value);\r\n                    } else {\r\n                        return `<span class=\"${item.type.split('.').join(' ')}\" data-column=\"${item.column}\">${Util.htmlTrans(item.value)}</span>`;\r\n                    }\r\n                }).join('');\r\n                this.renderLine(lineObj.lineId);\r\n                if (lineObj.states + '' != data.states + '') {\r\n                    lineObj.states = data.states;\r\n                    lineObj = this.htmls[startLine];\r\n                    if (lineObj) {\r\n                        lineObj.tokens = null;\r\n                    }\r\n                }\r\n                processedLines++;\r\n                // 避免卡顿\r\n                if (processedLines % 10 == 0 && Date.now() - processedTime >= 20) {\r\n                    startLine++;\r\n                    break;\r\n                }\r\n            }\r\n            startLine++;\r\n        }\r\n        this.currentLine = startLine;\r\n        if (startLine <= endLine) {\r\n            this.tokenizeLines.timer = setTimeout(() => {\r\n                this.tokenizeLines(startLine, endLine);\r\n            }, 20);\r\n        }\r\n    }\r\n    tokenizeLine(line) {\r\n        let match = null;\r\n        let rule = null;\r\n        let lastIndex = 0;\r\n        let preEnd = 0;\r\n        let newStates = [];\r\n        let states = (line > 1 && this.htmls[line - 2].states || []).slice(0);\r\n        let lineObj = this.htmls[line - 1];\r\n        let regex = this.getRegex(states);\r\n        let resultObj = {\r\n            tokens: [],\r\n            folds: []\r\n        }\r\n        if (lineObj.text.length > 10000) {\r\n            return {\r\n                tokens: this.splitLongToken([{\r\n                    type: 'plain',\r\n                    column: 0,\r\n                    value: lineObj.text\r\n                }]),\r\n                folds: [],\r\n                states: states\r\n            }\r\n        }\r\n        while (match = regex.exec(lineObj.text)) {\r\n            let token = null;\r\n            let fold = null;\r\n            let valid = true;\r\n            let side = '';\r\n            for (let ruleId in match.groups) {\r\n                if (match.groups[ruleId] == undefined) {\r\n                    continue;\r\n                }\r\n                side = ruleId.split('_')[0];\r\n                ruleId = ruleId.split('_')[1] - 0;\r\n                rule = this.ruleIdMap[ruleId];\r\n                // side = this.getSide(rule, states, side);\r\n                if (preEnd < match.index) { //普通文本\r\n                    let value = lineObj.text.slice(preEnd, match.index);\r\n                    resultObj.tokens.push({\r\n                        value: value,\r\n                        column: preEnd,\r\n                        type: this.getTokenType({\r\n                            rule: this.ruleIdMap[states.peek()],\r\n                            index: preEnd,\r\n                            value: value,\r\n                            text: lineObj.text\r\n                        })\r\n                    });\r\n                    preEnd = match.index;\r\n                }\r\n                if (typeof rule.valid === 'function') {\r\n                    valid = rule.valid({\r\n                        index: match.index,\r\n                        text: lineObj.text,\r\n                        value: match[0],\r\n                        side: side\r\n                    });\r\n                    if (!valid) {\r\n                        break;\r\n                    }\r\n                }\r\n                fold = this.getFold(rule, match, states, resultObj, lineObj.text);\r\n                token = this.getToken(rule, match, states, newStates, resultObj, lineObj.text, side);\r\n                resultObj.tokens.push(token);\r\n                fold && resultObj.folds.push(fold);\r\n                preEnd = match.index + match[0].length;\r\n                break;\r\n            }\r\n            if (!match[0]) { //考虑/^$/的情况\r\n                break;\r\n            }\r\n            if (!valid) { //跳过当前无效结果\r\n                continue;\r\n            }\r\n            lastIndex = regex.lastIndex;\r\n            regex.lastIndex = 0;\r\n            regex = this.getRegex(states, rule.ruleId);\r\n            regex.lastIndex = lastIndex;\r\n        }\r\n        if (!resultObj.tokens.length && states.length) { // 整行被多行token包裹\r\n            resultObj.tokens.push({\r\n                value: lineObj.text,\r\n                column: 0,\r\n                type: this.getTokenType({\r\n                    rule: this.ruleIdMap[states.peek()],\r\n                    value: lineObj.text,\r\n                    text: lineObj.text\r\n                })\r\n            });\r\n        } else if (preEnd < lineObj.text.length) { //文本末尾\r\n            var value = lineObj.text.slice(preEnd);\r\n            resultObj.tokens.push({\r\n                value: value,\r\n                column: preEnd,\r\n                type: this.getTokenType({\r\n                    rule: this.ruleIdMap[states.peek()],\r\n                    index: preEnd,\r\n                    value: value,\r\n                    text: lineObj.text\r\n                })\r\n            });\r\n        }\r\n        regex.lastIndex = 0;\r\n        return {\r\n            tokens: this.splitLongToken(resultObj.tokens),\r\n            folds: resultObj.folds,\r\n            states: states\r\n        };\r\n    }\r\n    splitLongToken(tokens) {\r\n        let result = [];\r\n        tokens.map((token) => {\r\n            if (token.value.length > 100) { //将文本数量大于100的token分隔\r\n                let startCol = token.column;\r\n                let count = Math.floor(token.value.length / 100);\r\n                for (let i = 0; i < count; i++) {\r\n                    let column = i * 100;\r\n                    result.push({\r\n                        column: column + startCol,\r\n                        value: token.value.slice(column, column + 100),\r\n                        type: token.type\r\n                    });\r\n                }\r\n                count = count * 100;\r\n                if (count < token.value.length) {\r\n                    result.push({\r\n                        column: count + startCol,\r\n                        value: token.value.slice(count),\r\n                        type: token.type\r\n                    });\r\n                }\r\n            } else {\r\n                result.push(token);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    // getSide(rule, states) {\r\n    //     let index = states.length - 1;\r\n    //     if (states.indexOf(rule.ruleId) == -1) {\r\n    //         return 'start';\r\n    //     }\r\n    //     while (index >= 0 && states[index] != rule.ruleId) {\r\n    //         if (this.ruleIdMap[states[index]].level > rule.level) {\r\n    //             return 'start';\r\n    //         }\r\n    //         index--\r\n    //     }\r\n    //     return 'end';\r\n    // }\r\n    /**\r\n     * 获取折叠标记对象\r\n     * @param {Object} rule 规则对象\r\n     * @param {Object} match 正则结果对象\r\n     * @param {Array} states 状态栈\r\n     * @param {Array} newStates 当前行的新增状态栈\r\n     * @param {Object} resultObj 结果对象\r\n     * @param {String} text 当前行文本\r\n     * @param {String} side 开始/结束标记\r\n     */\r\n    getToken(rule, match, states, newStates, resultObj, text, side) {\r\n        let result = match[0];\r\n        let token = {\r\n            ruleId: rule.ruleId,\r\n            value: result,\r\n            column: match.index\r\n        };\r\n        if (rule.start && rule.end) { //多行token-end\r\n            if (side === 'end') { //多行token尾\r\n                while (states.peek() != rule.ruleId) {\r\n                    states.pop();\r\n                }\r\n                states.pop();\r\n                if (!rule.rules) { //无子节点\r\n                    if (newStates.indexOf(rule.ruleId) > -1) { //在同一行匹配\r\n                        let value = '';\r\n                        token = resultObj.tokens.pop();\r\n                        value = token.value;\r\n                        if (token.ruleId !== rule.ruleId) {\r\n                            token = resultObj.tokens.pop();\r\n                            value = token.value + value;\r\n                        }\r\n                        token.value = value + result;\r\n                    } else { //跨行匹配\r\n                        resultObj.tokens.pop()\r\n                        token.value = text.slice(0, match.index + result.length);\r\n                        token.column = 0;\r\n                    }\r\n                }\r\n            } else { //多行token-start\r\n                states.push(rule.ruleId);\r\n                newStates.push(rule.ruleId);\r\n            }\r\n        }\r\n        token.type = this.getTokenType({\r\n            rule: rule,\r\n            index: match.index,\r\n            value: token.value,\r\n            text: text,\r\n            match: match,\r\n            side: side\r\n        });\r\n        return token;\r\n    }\r\n    /**\r\n     * 获取token类型\r\n     * @param {Object} option {\r\n     *  rule: 规则对象,\r\n     *  index: value在text中的开始索引,\r\n     *  text: 当前行的文本,\r\n     *  value: token的文本范围,\r\n     *  side: 开始/结束标记,\r\n     *  match: 正则执行后的结果对象\r\n     * } \r\n     */\r\n    getTokenType(option) {\r\n        let rule = option.rule;\r\n        let index = option.index || 0;\r\n        let value = option.value || option.text;\r\n        let text = option.text;\r\n        let match = option.match;\r\n        let side = option.side || (rule && rule.start && rule.end ? 'start' : '');\r\n        let type = '';\r\n        if (!rule) {\r\n            return 'plain';\r\n        }\r\n        if (typeof rule.token == 'function') {\r\n            type = rule.token({\r\n                value: value,\r\n                index: index,\r\n                text: text,\r\n                side: side\r\n            });\r\n        } else if (rule.token instanceof Array) {\r\n            if (rule.start && rule.end) {\r\n                if (side == 'start') {\r\n                    type = rule.token[0];\r\n                } else {\r\n                    type = rule.token[1];\r\n                }\r\n            } else {\r\n                let expIndex = match && this.getChildExpIndex(match) || -1;\r\n                if (expIndex > -1) {\r\n                    type = rule.token[expIndex];\r\n                } else {\r\n                    type = rule.token.join('.');\r\n                }\r\n            }\r\n        } else {\r\n            type = rule.token;\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * 获取折叠标记对象\r\n     * @param {Object} rule 规则对象\r\n     * @param {Object} match 正则结果对象\r\n     * @param {Array} states 状态栈\r\n     * @param {Object} resultObj 结果对象\r\n     * @param {String} text 当前行文本\r\n     */\r\n    getFold(rule, match, states, resultObj, text) {\r\n        let result = match[0];\r\n        let side = '';\r\n        let fold = null;\r\n        if (rule.start && rule.end) { //多行token被匹配\r\n            side = 'start';\r\n            if (states.indexOf(rule.ruleId) > -1) {\r\n                side = 'end';\r\n            }\r\n            if (rule.foldName) { //多行匹配可折叠\r\n                fold = {\r\n                    start: match.index,\r\n                    end: match.index + result.length,\r\n                    value: result\r\n                };\r\n            }\r\n        } else if (rule.foldName && rule.foldType) { //折叠标记\r\n            fold = {\r\n                start: match.index,\r\n                end: match.index + result.length,\r\n                value: result\r\n            };\r\n        }\r\n        if (fold) {\r\n            let foldName = this.getFoldName(rule, match, text, side);\r\n            if (!foldName) { //没有折叠名称无效\r\n                return null;\r\n            }\r\n            fold.name = foldName;\r\n            fold.type = this.getFoldType(rule, match, text, side);\r\n            if (fold.type == 1) {\r\n                fold = _checkFold(resultObj, fold);\r\n            }\r\n        }\r\n        return fold;\r\n\r\n        function _checkFold(resultObj, fold) {\r\n            let folds = resultObj.folds;\r\n            if (folds) {\r\n                for (let i = folds.length - 1; i >= 0; i--) {\r\n                    // 同行折叠无效\r\n                    if (folds[i].name == fold.name && folds[i].type == -1) {\r\n                        resultObj.folds = folds.slice(0, i);\r\n                        fold = null;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return fold;\r\n        }\r\n    }\r\n    /**\r\n     * 获取折叠名称[唯一标识]\r\n     * @param {Object} rule 规则对象\r\n     * @param {Object} match 正则执行后的结果对象\r\n     * @param {String} text 当前行的文本\r\n     * @param {String} side 开始/结束标记\r\n     */\r\n    getFoldName(rule, match, text, side) {\r\n        let foldName = '';\r\n        if (rule.foldName instanceof Array) {\r\n            if (rule.start && rule.end) {\r\n                foldName = side == 'start' ? rule.foldName[0] : rule.foldName[1];\r\n            } else {\r\n                let expIndex = this.getChildExpIndex(match);\r\n                expIndex = expIndex == -1 ? 0 : expIndex;\r\n                foldName = rule.foldName[expIndex];\r\n            }\r\n        } else if (typeof rule.foldName === 'function') {\r\n            foldName = rule.foldName({\r\n                value: match[0],\r\n                text: text,\r\n                index: match.index,\r\n                side: side\r\n            });\r\n        } else {\r\n            foldName = rule.foldName;\r\n        }\r\n        return foldName;\r\n    }\r\n    /**\r\n     * 获取折叠类型[-1:首,1:尾]\r\n     * @param {Object} rule 规则对象\r\n     * @param {Object} match 正则执行后的结果对象\r\n     * @param {String} text 当前行的文本\r\n     * @param {String} side 开始/结束标记\r\n     */\r\n    getFoldType(rule, match, text, side) {\r\n        let foldType = '';\r\n        if (rule.foldType instanceof Array) {\r\n            if (rule.start && rule.end) {\r\n                foldType = side == 'start' ? rule.foldType[0] : rule.foldType[1];\r\n            } else {\r\n                let expIndex = this.getChildExpIndex(match);\r\n                expIndex = expIndex == -1 ? 0 : expIndex;\r\n                foldType = rule.foldType[expIndex];\r\n            }\r\n        } else if (typeof rule.foldType === 'function') {\r\n            foldType = rule.foldType({\r\n                value: match[0],\r\n                text: text,\r\n                index: match.index,\r\n                side: side\r\n            });\r\n        } else if (rule.start && rule.end) {\r\n            foldType = side == 'start' ? -1 : 1;\r\n        } else {\r\n            foldType = rule.foldType;\r\n        }\r\n        return foldType;\r\n    }\r\n    /**\r\n     * 获取子表达式索引位置\r\n     * @param {Array} match 正则exec结果\r\n     */\r\n    getChildExpIndex(match) {\r\n        if (match.childExpIndex !== undefined) {\r\n            return match.childExpIndex;\r\n        }\r\n        let captures = match.slice(1);\r\n        let hasChildExp = captures.filter((item) => {\r\n            return item\r\n        }).length > 1;\r\n        if (hasChildExp) { //正则里有子表达式\r\n            for (let i = 0; i < captures.length; i++) {\r\n                if (captures[i] != undefined) {\r\n                    captures = captures.slice(i + 1);\r\n                    break;\r\n                }\r\n            }\r\n            for (let i = 0; i < captures.length; i++) {\r\n                if (captures[i] != undefined) {\r\n                    match.childExpIndex = i;\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        match.childExpIndex = -1;\r\n        return -1;\r\n    }\r\n    getRegex(states, preRuleId) {\r\n        let preRule = this.ruleIdMap[preRuleId];\r\n        while (preRule && states.indexOf(preRule.ruleId) == -1 && preRule.endBy) {\r\n            while (states.peek() != preRule.endBy) {\r\n                states.pop();\r\n            }\r\n            states.pop();\r\n            preRule = this.ruleIdMap[preRule.endBy];\r\n        }\r\n        if (preRule && states.indexOf(preRule.ruleId) == -1 && preRule.startBy) {\r\n            states.push(preRule.startBy);\r\n        }\r\n        return this.getCombRegex(states);\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-01-07 10:07:14\r\n * @Description: \r\n */\r\nexport default function () {\r\n    Array.prototype.peek = function (index) {\r\n        if (this.length) {\r\n            return this[this.length - (index || 1)];\r\n        }\r\n    }\r\n    Array.prototype._isArray = true;\r\n    String.prototype.peek = function (index) {\r\n        if (this.length) {\r\n            return this[this.length - (index || 1)];\r\n        }\r\n    }\r\n    var keywords = [\r\n        \"if\", \"in\", \"do\", \"var\", \"for\", \"new\",\r\n        \"try\", \"let\", \"this\", \"else\", \"case\",\r\n        \"void\", \"with\", \"enum\", \"while\", \"break\",\r\n        \"catch\", \"throw\", \"const\", \"yield\", \"class\",\r\n        \"super\", \"return\", \"typeof\", \"delete\",\r\n        \"switch\", \"export\", \"import\", \"default\",\r\n        \"finally\", \"extends\", \"function\", \"continue\",\r\n        \"debugger\", \"instanceof\", \"async\", \"await\"\r\n    ];\r\n    var assignOperator = ['=', '>>>=', '>>=', '<<=', '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^='];\r\n    var binaryOperator = [\r\n        '+', '-', '*', '/', '%', '&', '|', '^', '&&', '||', '===', '==', '!=', '!==',\r\n        '>', '>=', '<', '<=', '>>', '>>>', '<<', 'instanceof', 'in'\r\n    ];\r\n    var unitOperator = ['+', '-', '~', '!', 'typeof', 'delete', 'void'];\r\n    var brackets = ['{', '}', '[', ']', '(', ')'];\r\n    var regs = {\r\n        space: /^\\s+/,\r\n        number: /^(?:\\d+(?:\\.\\d*)?|\\.\\d+?|0x[a-z0-9]+?)(?:e[\\+\\-]?\\d+(?:\\.\\d*)?)?\\b/i,\r\n        identifier: /^[a-zA-Z_$][a-zA-Z0-9_$]*/,\r\n        comment: /\\*\\//,\r\n        string1: /\\\\*'/,\r\n        string2: /\\\\*\"/,\r\n        string3: /(\\\\*`)|(\\$\\{)/,\r\n        regex: /^\\/(?:\\\\[\\s\\S]|[^\\\\])+?\\//,\r\n        other: /^[^\\s+\\-\\*\\/%&\\|\\^\\=\\!\\>\\<\\~\\{\\}\\(\\)]+/\r\n    }\r\n    var regflagsMap = {\r\n        'i': true,\r\n        'm': true,\r\n        'g': true,\r\n        'gi': true,\r\n        'gm': true,\r\n        'im': true,\r\n        'gim': true,\r\n    }\r\n    var maxErrors = 100;\r\n\r\n    function TokenType(type, label) {\r\n        this.type = type;\r\n        this.label = label;\r\n        this._isTokenType = true;\r\n    }\r\n\r\n    TokenType.prototype.toString = function () {\r\n        return this.label;\r\n    }\r\n\r\n    TokenType.NUMBER = new TokenType(1, 'number');\r\n    TokenType.BOOLEAN = new TokenType(2, 'boolean');\r\n    TokenType.STRING = new TokenType(3, 'string');\r\n    TokenType.IDENTIFIER = new TokenType(4, 'identifier');\r\n    TokenType.KEYWORD = new TokenType(5, 'keyword');\r\n    TokenType.OPERATOR = new TokenType(6, 'operator');\r\n    TokenType.BRACKET = new TokenType(7, 'bracket');\r\n    TokenType.PUNCTUATOR = new TokenType(8, 'punctuator');\r\n    TokenType.REGEXP = new TokenType(9, 'regexp');\r\n    TokenType.OTHER = new TokenType(10, 'other');\r\n\r\n    function ErrorType(type) {\r\n        this.type = type;\r\n    }\r\n\r\n    ErrorType.UNEXPECTED = new ErrorType(1);\r\n    ErrorType.EXPECTED = new ErrorType(2);\r\n    ErrorType.MISS = new ErrorType(3);\r\n    ErrorType.UNMATCH = new ErrorType(4);\r\n\r\n    function Error(token, type, param) {\r\n        token = token || {};\r\n        this.type = type;\r\n        this.param = param;\r\n        this.line = token.line;\r\n        this.column = token.column;\r\n        this.value = token.value;\r\n        this.error = this.toString();\r\n    }\r\n\r\n    Error.prototype.toString = function () {\r\n        var error = '';\r\n        var param = this.param instanceof Array ? this.param : [this.param];\r\n        param = `${param.length === 1 ? 'a ' : ''}'${param.join(`'、'`)}'`;\r\n        switch (this.type) {\r\n            case ErrorType.UNEXPECTED:\r\n                error = `unexpected '${this.value}'`;\r\n                break;\r\n            case ErrorType.EXPECTED:\r\n                error = `expected ${param}`;\r\n                if (this.value) {\r\n                    error += ` and instead saw '${this.value}'`;\r\n                }\r\n                break;\r\n            case ErrorType.MISS:\r\n                error = `missing ${param}`;\r\n                if (this.value) {\r\n                    error += ` before '${this.value}'`\r\n                }\r\n                break;\r\n            case ErrorType.UNMATCH:\r\n                error = `unmatched '${this.value}'`\r\n                break;\r\n        }\r\n        return error;\r\n    }\r\n\r\n    Error.push = function (error) {\r\n        Error.errors.push(error);\r\n    }\r\n\r\n    Error.expectedIdentifier = function (token) {\r\n        Error.push(new Error(token, ErrorType.EXPECTED, TokenType.IDENTIFIER));\r\n    }\r\n\r\n    Error.expectedSemicolon = function (token) {\r\n        Error.push(new Error(token, ErrorType.MISS, ';'));\r\n    }\r\n\r\n    Error.expected = function (token, value) {\r\n        Error.push(new Error(token, ErrorType.EXPECTED, value));\r\n    }\r\n\r\n    Error.unexpected = function (token) {\r\n        Error.push(new Error(token, ErrorType.UNEXPECTED));\r\n    }\r\n\r\n    Error.unmatch = function (token) {\r\n        Error.push(new Error(token, ErrorType.UNMATCH));\r\n    }\r\n\r\n    // 词法分析器\r\n    function Lexer() {\r\n        this.init();\r\n    }\r\n\r\n    Lexer.prototype.init = function () {\r\n        Error.errors = [];\r\n        this.lines = [''];\r\n        this.line = 1;\r\n        this.column = 0;\r\n        this.input = '';\r\n        this.assignOperatorMap = {};\r\n        this.unitOperatorMap = {};\r\n        this.binaryOperatorMap = {};\r\n        this.keywordsMap = new Map();\r\n        this.bracketsMap = new Map();\r\n        assignOperator.map((item) => {\r\n            this.assignOperatorMap[item] = true;\r\n        });\r\n        unitOperator.map((item) => {\r\n            this.unitOperatorMap[item] = true;\r\n        });\r\n        binaryOperator.map((item) => {\r\n            this.binaryOperatorMap[item] = true;\r\n        });\r\n        keywords.map((item) => {\r\n            this.keywordsMap.set(item, true);\r\n        });\r\n        brackets.map((item) => {\r\n            this.bracketsMap.set(item, true);\r\n        });\r\n    }\r\n\r\n    Lexer.prototype.reset = function (option) {\r\n        this.lines = option.texts;\r\n        this.line = option.line || 1;\r\n        this.column = option.column || 0\r\n        this.input = this.lines[this.line - 1].slice(this.column);\r\n    }\r\n\r\n    Lexer.prototype.skip = function (length) {\r\n        this.input = length ? this.input.slice(length) : this.input;\r\n        this.column += length;\r\n    }\r\n\r\n    Lexer.prototype.skipLine = function (length) {\r\n        this.line += length;\r\n        this.column = 0;\r\n        this.input = this.lines[this.line - 1] || '';\r\n    }\r\n\r\n    Lexer.prototype.hasNext = function () {\r\n        if (Error.errors.length > maxErrors) {\r\n            return false;\r\n        }\r\n        return this.line < this.lines.length ||\r\n            this.line == this.lines.length && this.lines.peek().length > this.column\r\n    }\r\n\r\n    Lexer.prototype.isVariable = function (token) {\r\n        return token.type == TokenType.IDENTIFIER || token.value == 'this';\r\n    }\r\n\r\n    Lexer.prototype.isValue = function (token) {\r\n        return this.isScalar(token) || this.isVariable(token);\r\n    }\r\n\r\n    Lexer.prototype.isScalar = function (token) {\r\n        return (\r\n            token.type == TokenType.NUMBER ||\r\n            token.type == TokenType.STRING ||\r\n            token.type == TokenType.BOOLEAN ||\r\n            token.type == TokenType.REGEXP\r\n        );\r\n    }\r\n\r\n    Lexer.prototype.isDotAble = function (token) {\r\n        return token.type === TokenType.IDENTIFIER || token.type === TokenType.KEYWORD;\r\n    }\r\n\r\n    Lexer.prototype.isPostOp = function (token) {\r\n        return token.value === '++' || token.value === '--';\r\n    }\r\n\r\n    Lexer.prototype.isPreOp = function (token) {\r\n        return token.value === '++' || token.value === '--';\r\n    }\r\n\r\n    Lexer.prototype.isAssignOperator = function (token) {\r\n        return this.assignOperatorMap[token.value];\r\n    }\r\n\r\n    Lexer.prototype.isUnitOperator = function (token) {\r\n        return this.unitOperatorMap[token.value];\r\n    }\r\n\r\n    Lexer.prototype.isBinaryOperator = function (token) {\r\n        return this.binaryOperatorMap[token.value];\r\n    }\r\n\r\n    Lexer.prototype.isKeyWord = function (value) {\r\n        return this.keywordsMap.has(value);\r\n    }\r\n\r\n    Lexer.prototype.isBracket = function (value) {\r\n        return this.bracketsMap.has(value);\r\n    }\r\n\r\n    Lexer.prototype.isTokenType = function (type) {\r\n        return type._isTokenType;\r\n    }\r\n\r\n    Lexer.prototype.craeteToken = function (value, type) {\r\n        let line = this.line;\r\n        let column = this.column;\r\n        if (line > this.lines.length) {\r\n            line = this.lines.length;\r\n            column = this.lines.peek().length;\r\n        }\r\n        return {\r\n            type: type,\r\n            line: line,\r\n            column: column,\r\n            value: value\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanSpace = function () {\r\n        var exec = null;\r\n        while (!this.input.length && this.line < this.lines.length) { //去掉空行\r\n            this.skipLine(1);\r\n        }\r\n        exec = regs.space.exec(this.input);\r\n        if (exec) {\r\n            this.skip(exec.index + exec[0].length);\r\n            exec.index >= this.input.length - 1 && this.scanSpace();\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanComment = function () {\r\n        var exec = null;\r\n        var ch1 = null;\r\n        var ch2 = null;\r\n        var startToken = null;\r\n        this.scanSpace(); //去掉空格\r\n        ch1 = this.input[0];\r\n        ch2 = this.input[1];\r\n        if (ch1 === '/' && ch2 == '/') {\r\n            this.skipLine(1);\r\n            this.scanComment();\r\n        } else if (ch1 === '/' && ch2 === '*') {\r\n            startToken = this.craeteToken('/*');\r\n            this.skip(2);\r\n            while (this.hasNext() && !(exec = regs.comment.exec(this.input))) {\r\n                this.skipLine(1);\r\n            }\r\n            if (exec) {\r\n                this.skip(exec.index + exec[0].length);\r\n            } else {\r\n                Error.unmatch(startToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanString = function () {\r\n        var that = this;\r\n        var exec = null;\r\n        var token = null;\r\n        var startToken = null;\r\n        if (this.input[0] === '\\'') {\r\n            startToken = this.craeteToken('\\'', TokenType.STRING);\r\n            this.skip(1);\r\n            exec = _end(regs.string1);\r\n            token = this.craeteToken('\\'', TokenType.STRING);\r\n            if (!exec) {\r\n                Error.unmatch(startToken);\r\n                this.skipLine(1);\r\n            }\r\n            return token;\r\n        } else if (this.input[0] === '\"') {\r\n            startToken = this.craeteToken('\"', TokenType.STRING);\r\n            this.skip(1);\r\n            exec = _end(regs.string2);\r\n            token = this.craeteToken('\"', TokenType.STRING);\r\n            if (!exec) {\r\n                Error.unmatch(startToken);\r\n                this.skipLine(1);\r\n            }\r\n            return token;\r\n        } else if (this.input[0] === '`') {\r\n            startToken = this.craeteToken('`', TokenType.STRING);\r\n            this.skip(1);\r\n            while (this.hasNext()) {\r\n                exec = regs.string3.exec(this.input)\r\n                if (exec && exec[2]) { //模板字符串内的表达式：${test}\r\n                    _parseTmpStr(exec);\r\n                } else if (!exec || exec[0].length % 2 === 0) { //含有基数个\\：\\\\\\`\r\n                    this.skipLine(1);\r\n                } else {\r\n                    this.skip(exec.index + exec[0].length);\r\n                    break;\r\n                }\r\n            }\r\n            token = this.craeteToken('`', TokenType.STRING);\r\n            if (!(exec && exec[0].length % 2 === 1)) { //未匹配到结束符\r\n                Error.unmatch(startToken);\r\n            }\r\n        }\r\n        return token;\r\n\r\n        function _end(reg) {\r\n            if (exec = reg.exec(that.input)) {\r\n                that.skip(exec.index + exec[0].length);\r\n                if (exec[0].length % 2 === 0) { //含有奇数个\\:\\\\\\'\r\n                    return _end(reg);\r\n                }\r\n                return true;\r\n            } else if (that.input.peek() === '\\\\') {\r\n                that.skipLine(1);\r\n                return _end(reg);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function _parseTmpStr(exec) {\r\n            let preToken = that.parser.preToken;\r\n            let backs = that.parser.backs.slice(0);\r\n            let parseList = that.parser.parseList.slice(0);\r\n            that.skip(exec.index + exec[2].length);\r\n            //清空状态--begin\r\n            that.parser.preToken = null;\r\n            that.parser.backs = [];\r\n            that.parser.parseList = [];\r\n            //清空状态--end\r\n            that.parser.parseExprStmt();\r\n            that.parser.peekMatch('}');\r\n            //恢复状态--begin\r\n            that.parser.preToken = preToken;\r\n            that.parser.backs = backs;\r\n            that.parser.parseList = parseList;\r\n            //恢复状态--end\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanNunmber = function () {\r\n        var exec = null;\r\n        var token = null;\r\n        if (exec = regs.number.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.NUMBER);\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    Lexer.prototype.scanIdentifier = function () {\r\n        var exec = null;\r\n        var token = null;\r\n        if (exec = regs.identifier.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], this.isKeyWord(exec[0]) ? TokenType.KEYWORD : TokenType.IDENTIFIER);\r\n            if (token.value === 'true' || token.value === 'false') {\r\n                token.type = TokenType.BOOLEAN;\r\n            }\r\n            if (token.value === 'null') {\r\n                token.type = TokenType.NUMBER;\r\n            }\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    Lexer.prototype.scanBracket = function () {\r\n        var token = null;\r\n        var ch = this.input[0];\r\n        if (this.isBracket(ch)) {\r\n            token = this.craeteToken(ch, TokenType.BRACKET);\r\n            this.skip(1);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    // 操作符号\r\n    Lexer.prototype.scanOperator = function () {\r\n        var ch1 = this.input[0];\r\n        var ch2 = this.input[1];\r\n        var ch3 = this.input[2];\r\n        var ch4 = this.input[3];\r\n        var token = null;\r\n        if (ch1 == '.' && ch2 === '.' && ch3 === '.') {\r\n            token = this.craeteToken('...', TokenType.OPERATOR);\r\n        } else if (ch1 === \">\" && ch2 === \">\" && ch3 === \">\" && ch4 === \"=\") {\r\n            token = this.craeteToken('>>>=', TokenType.OPERATOR);\r\n        } else if (ch1 === \"=\" && ch2 === \"=\" && ch3 === \"=\") {\r\n            token = this.craeteToken('===', TokenType.OPERATOR);\r\n        } else if (ch1 === \"!\" && ch2 === \"=\" && ch3 === \"=\") {\r\n            token = this.craeteToken('!==', TokenType.OPERATOR);\r\n        } else if (ch1 === \">\" && ch2 === \">\" && ch3 === \">\") {\r\n            token = this.craeteToken('>>>', TokenType.OPERATOR);\r\n        } else if (ch1 === \"<\" && ch2 === \"<\" && ch3 === \"=\") {\r\n            token = this.craeteToken('<<=', TokenType.OPERATOR);\r\n        } else if (ch1 === \">\" && ch2 === \">\" && ch3 === \"=\") {\r\n            token = this.craeteToken('>>=', TokenType.OPERATOR);\r\n        } else if (ch1 === \"=\" && ch2 === \">\") {\r\n            token = this.craeteToken('=>', TokenType.OPERATOR);\r\n        } else if (ch1 === ch2 && (\"+-<>&|*\".indexOf(ch1) >= 0)) {\r\n            if (ch1 === \"*\" && ch3 === \"=\") {\r\n                token = this.craeteToken(ch1 + ch2 + ch3, TokenType.OPERATOR);\r\n            } else {\r\n                token = this.craeteToken(ch1 + ch2, TokenType.OPERATOR);\r\n            }\r\n        } else if (\"<>=!+-*%&|^/\".indexOf(ch1) >= 0) {\r\n            if (ch2 === \"=\") {\r\n                token = this.craeteToken(ch1 + ch2, TokenType.OPERATOR);\r\n            } else {\r\n                token = this.craeteToken(ch1, TokenType.OPERATOR);\r\n            }\r\n        } else if ('?:.;,~'.indexOf(ch1) > -1) {\r\n            token = this.craeteToken(ch1, TokenType.OPERATOR);\r\n        }\r\n        token && this.skip(token.value.length);\r\n        return token;\r\n    }\r\n\r\n    Lexer.prototype.scanOther = function () {\r\n        var exec = null;\r\n        var token = null;\r\n        if (exec = regs.other.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.OTHER);\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token\r\n    }\r\n\r\n    Lexer.prototype.next = function () {\r\n        let token = null;\r\n        let that = this;\r\n        this.scanComment();\r\n        if (this.hasNext()) {\r\n            token =\r\n                this.scanIdentifier() ||\r\n                this.scanBracket() ||\r\n                this.scanNunmber() ||\r\n                this.scanString() ||\r\n                _scanOp()\r\n            if (!token) { //存在非法变量\r\n                token = this.scanOther();\r\n                token && Error.unexpected(token);\r\n                return this.next();\r\n            }\r\n        }\r\n        this.preToken = token;\r\n        return token;\r\n\r\n        function _scanOp() {\r\n            let token = null;\r\n            if (\r\n                that.input[0] === '/' &&\r\n                (\r\n                    !that.preToken ||\r\n                    that.preToken.type === TokenType.OPERATOR ||\r\n                    that.preToken.value === '{' ||\r\n                    that.preToken.value === '[' ||\r\n                    that.preToken.value === '(' ||\r\n                    that.preToken.value === 'return'\r\n                )\r\n            ) {\r\n                let exec = regs.regex.exec(that.input);\r\n                if (exec) {\r\n                    token = that.craeteToken(exec[0], TokenType.REGEXP);\r\n                    that.skip(exec.index + exec[0].length);\r\n                } else {\r\n                    token = that.craeteToken(that.input, TokenType.REGEXP);\r\n                    that.skipLine(1);\r\n                    if (token.value.peek() !== '/') {\r\n                        let _token = Object.assign({}, token);\r\n                        _token.value = '/';\r\n                        Error.unmatch(_token);\r\n                    }\r\n                }\r\n            } else {\r\n                token = that.scanOperator();\r\n            }\r\n            return token;\r\n        }\r\n    }\r\n\r\n    // 语法分析器\r\n    function Parser(lexer) {\r\n        this.lexer = lexer;\r\n        this.cacheList = [];\r\n        this.backs = [];\r\n        this.parseList = [];\r\n        this.preToken = null;\r\n        Error.errors = [];\r\n    }\r\n\r\n    Parser.prototype.reset = function (text) {\r\n        this.backs = [];\r\n        this.parseList = [];\r\n        this.preToken = null;\r\n        this.recovery(text);\r\n        Error.errors = [];\r\n    }\r\n\r\n    // 添加缓存\r\n    Parser.prototype.cache = function () {\r\n        if (this.cacheList.length && this.cacheList.peek().line == this.lexer.line) {\r\n            this.cacheList.pop();\r\n        }\r\n        this.preToken && this.cacheList.push({\r\n            line: this.preToken.line,\r\n            column: this.preToken.column,\r\n            parseList: this.parseList.slice(0)\r\n        });\r\n    }\r\n\r\n    // 从缓存中恢复\r\n    Parser.prototype.recovery = function (text) {\r\n        var index = 0;\r\n        var texts = text.split('\\n') || [''];\r\n        var hasCache = false;\r\n        while (index < texts.length && index < this.lexer.lines.length && texts[index] === this.lexer.lines[index]) {\r\n            index++;\r\n        }\r\n        if (index > 0) {\r\n            var cacheIndex = -1;\r\n            for (var i = 0; i < this.cacheList.length; i++) {\r\n                if (this.cacheList[i].line <= index) {\r\n                    cacheIndex = i;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (cacheIndex > -1) {\r\n                var cache = this.cacheList[cacheIndex];\r\n                this.parseList = cache.parseList;\r\n                this.cacheList = this.cacheList.slice(0, cacheIndex + 1);\r\n                this.lexer.reset({\r\n                    texts: texts,\r\n                    line: cache.line,\r\n                    column: cache.column\r\n                });\r\n                this.next();\r\n                hasCache = true;\r\n            }\r\n        }\r\n        if (!hasCache) {\r\n            this.cacheList = [];\r\n            this.lexer.reset({\r\n                texts: texts\r\n            });\r\n        }\r\n    }\r\n\r\n    Parser.prototype.match = function (token, value) {\r\n        var pass = false;\r\n        for (var i = 0; i < value.length; i++) {\r\n            if (this.lexer.isTokenType(value[i])) {\r\n                if (value[i] === token.type) {\r\n                    pass = true;\r\n                    break;\r\n                }\r\n            } else if (value[i] === token.value) {\r\n                pass = true;\r\n                break;\r\n            }\r\n        };\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.next = function (length) {\r\n        var token = null;\r\n        length = length || 1;\r\n        while (length > 0) {\r\n            if (this.backs.length) {\r\n                token = this.backs.shift();\r\n            } else {\r\n                token = this.lexer.next();\r\n            }\r\n            this.pre2Token = this.preToken;\r\n            this.preToken = token || this.preToken;\r\n            length--;\r\n        }\r\n        this.puted = false;\r\n        return token;\r\n    }\r\n\r\n    Parser.prototype.nextMatch = function (value) {\r\n        var token = this.next() || {};\r\n        var pass = false;\r\n        value = value._isArray ? value : [value];\r\n        pass = token.value && this.match(token, value);\r\n        if (!pass) {\r\n            if (token.value && this.match(this.peek(), value)) {\r\n                Error.unexpected(token);\r\n            } else {\r\n                Error.expected(token, value);\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.peek = function (length) {\r\n        var token = null;\r\n        length = length || 1;\r\n        if (this.backs.length) {\r\n            token = this.backs[length - 1];\r\n        }\r\n        if (!token) {\r\n            length -= this.backs.length;\r\n            while (length > 0) {\r\n                length--;\r\n                token = this.lexer.next();\r\n                token && this.backs.push(token);\r\n            }\r\n        }\r\n        return token || {};\r\n    }\r\n\r\n    Parser.prototype.peekMatch = function (value) {\r\n        var token = this.peek() || {};\r\n        var pass = false;\r\n        value = value._isArray ? value : [value];\r\n        pass = token.value && this.match(token, value);\r\n        if (pass) {\r\n            this.next();\r\n        } else {\r\n            if (token.value && this.match(this.peek(), value)) {\r\n                Error.unexpected(token);\r\n            } else {\r\n                Error.expected(token, value);\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.hasNext = function () {\r\n        var lookahead = this.peek();\r\n        return lookahead.value\r\n    }\r\n\r\n    Parser.prototype.putBack = function () {\r\n        if (this.preToken && !this.puted) {\r\n            this.backs.unshift(this.preToken);\r\n            this.preToken = this.pre2Token;\r\n            this.puted = true;\r\n        }\r\n    }\r\n\r\n    Parser.prototype.skipSemicolon = function (length) {\r\n        length = length || Infinity\r\n        while (this.peek().value === ';' && length > 0) {\r\n            this.next();\r\n            length--;\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parse = function () {\r\n        var count = 0;\r\n        var startTime = Date.now();\r\n        while (this.hasNext()) {\r\n            this.parseStmt();\r\n            !Error.errors.length && this.cache();\r\n            if (++count % 10 === 0 && Date.now() - startTime > 200) {\r\n                this.parseTimer = setTimeout(() => {\r\n                    this.parseStmt();\r\n                }, 10);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 代码块\r\n    Parser.prototype.parseStmt = function (skipCheckSemicolon) {\r\n        var lookahead = this.peek();\r\n        if (skipCheckSemicolon) {\r\n            if (lookahead.value === ';') {\r\n                return;\r\n            }\r\n        } else if (this.preToken && this.preToken.line == lookahead.line &&\r\n            this.preToken.value != '{' && this.preToken.value != '}' &&\r\n            lookahead.value != ';') { //两条语句在同一行，且没有分隔符\r\n            Error.expectedSemicolon(lookahead);\r\n        }\r\n        this.skipSemicolon();\r\n        lookahead = this.peek();\r\n        if (lookahead.type === TokenType.IDENTIFIER && this.peek(2).value === ':') { //跳转标记\r\n            this.next(2);\r\n            lookahead = this.peek();\r\n        }\r\n        switch (lookahead.value) {\r\n            case 'var':\r\n            case 'let':\r\n            case 'const':\r\n                this.parseDeclareStmt();\r\n                break;\r\n            case '{':\r\n                if (this.peek(3).value === ':') {\r\n                    this.parseObjectStmt();\r\n                } else {\r\n                    this.parseBlockStmt();\r\n                }\r\n                break;\r\n            case 'import':\r\n                this.parseImportStmt();\r\n                break;\r\n            case 'export':\r\n                this.parseExportStmt();\r\n                break;\r\n            case 'if':\r\n                this.parseIfStmt();\r\n                break;\r\n            case 'switch':\r\n                this.parseSwitchStmt();\r\n                break;\r\n            case 'with':\r\n                this.parseWithStmt();\r\n                break;\r\n            case 'while':\r\n                this.parseWhileStmt();\r\n                break;\r\n            case 'do':\r\n                this.parseDoStmt();\r\n                break;\r\n            case 'try':\r\n                this.parseTryStmt();\r\n                break;\r\n            case 'for':\r\n                this.parseForStmt();\r\n                break;\r\n            case 'class':\r\n                this.parseClassStmt();\r\n                break;\r\n            case 'continue':\r\n            case 'break':\r\n                this.parseControlStmt();\r\n                break;\r\n            case 'return':\r\n                this.parseReturnStmt();\r\n                break;\r\n            case 'throw':\r\n                this.parseThrowStmt();\r\n                break;\r\n            case 'function':\r\n                this.parseFunctionStmt(true);\r\n                break;\r\n            default:\r\n                this.parseExprStmt();\r\n                break;\r\n        }\r\n    }\r\n\r\n    // 代码块\r\n    Parser.prototype.parseBlockStmt = function (ends) {\r\n        let start = this.peek();\r\n        this.peekMatch('{');\r\n        while (this.hasNext()) {\r\n            this.skipSemicolon();\r\n            let lookahead = this.peek();\r\n            if (lookahead.value === '}' || ends && ends.indexOf(lookahead.value) > -1) {\r\n                break;\r\n            }\r\n            this.parseStmt(true);\r\n        }\r\n        if (!this.peekMatch('}') && start.value === '{') {\r\n            Error.unmatch(start);\r\n        }\r\n    }\r\n\r\n    // 对象字面量\r\n    Parser.prototype.parseObjectStmt = function () {\r\n        var start = this.peek();\r\n        var lookahead = null;\r\n        this.peekMatch('{');\r\n        while (this.hasNext() && this.peek().value != '}') {\r\n            if (this.peek().value === '...') { //对象展开运算符\r\n                this.next();\r\n                if (this.peek().value === '{') { //{...{a:1}}\r\n                    this.parseObjectStmt();\r\n                } else { //{...a}\r\n                    this.nextMatch(TokenType.IDENTIFIER);\r\n                }\r\n            } else {\r\n                if (this.peek().value === '[') { //{[1]:1}\r\n                    this.next();\r\n                    this.parseExpr();\r\n                    this.peekMatch(']');\r\n                } else if (this.peek().type === TokenType.OPERATOR) { //非法属性名\r\n                    Error.unexpected(this.next());\r\n                } else if (!this.hasNext()) {\r\n                    break;\r\n                } else {\r\n                    this.next();\r\n                }\r\n                lookahead = this.peek();\r\n                if (lookahead.value === ':' || this.preToken.value === ']') { //{a:1,[1]:1}\r\n                    this.peekMatch(':');\r\n                    this.parseExpr();\r\n                } else { //{a,b}\r\n                    if (this.preToken.type !== TokenType.IDENTIFIER) {\r\n                        Error.expected(lookahead, ':');\r\n                    }\r\n                    if (lookahead.value === '(') { //{a(){},b}\r\n                        this.parseFunArgsStmt();\r\n                        this.parseBlockStmt();\r\n                    } else if (this.peek(2).value === '(') { //{get a(){}, static b(){}}\r\n                        if (this.preToken.value !== 'get' && this.preToken.value !== 'static') {\r\n                            Error.expected(this.preToken, ['get', 'static']);\r\n                        }\r\n                        this.nextMatch(TokenType.IDENTIFIER);\r\n                        this.parseFunArgsStmt();\r\n                        this.parseBlockStmt();\r\n                    }\r\n                }\r\n            }\r\n            if (this.peek().value != '}') {\r\n                if (!this.peekMatch(',')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!this.peekMatch('}') && start.value === '{') {\r\n            Error.unmatch(start);\r\n        }\r\n    }\r\n\r\n    // 声明语句\r\n    Parser.prototype.parseDeclareStmt = function () {\r\n        let that = this;\r\n        this.nextMatch(['var', 'let', 'const']);\r\n        _identifier()\r\n        if (this.peek().value === '=') {\r\n            _assign();\r\n        }\r\n        while (this.hasNext() && this.peek().value === ',') {\r\n            this.next();\r\n            _identifier();\r\n            if (this.peek().value === '=') {\r\n                _assign();\r\n            }\r\n        }\r\n\r\n        function _assign() {\r\n            that.next();\r\n            that.parseExpr();\r\n        }\r\n\r\n        function _identifier() {\r\n            let lookahead = that.peek();\r\n            if (lookahead.value === '{' || lookahead.value === '[') { //es6:const {a,b} = {a:1,b:2}、const [a,b] = [1,2]\r\n                let startToken = that.next();\r\n                let value = lookahead.value === '{' ? '}' : ']';\r\n                that.nextMatch(TokenType.IDENTIFIER);\r\n                while (that.hasNext() && that.peek().value !== value) {\r\n                    that.peekMatch(',')\r\n                    if (!that.peekMatch(TokenType.IDENTIFIER)) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (!that.peekMatch(value)) {\r\n                    Error.unmatch(startToken);\r\n                }\r\n            } else {\r\n                that.nextMatch(TokenType.IDENTIFIER);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 赋值语句\r\n    Parser.prototype.parseAssignStmt = function (value) {\r\n        value = value || '=';\r\n        this.nextMatch(value);\r\n        while (this.hasNext()) {\r\n            if (this.peek(2).value === '=') { //a=1,b=2\r\n                !this.lexer.isVariable(this.next()) && Error.expected(TokenType.IDENTIFIER);\r\n                this.parseAssignStmt('=');\r\n                break;\r\n            } else {\r\n                this.parseExpr();\r\n            }\r\n            if (this.peek().value !== ',') {\r\n                break;\r\n            }\r\n            this.next();\r\n        }\r\n    }\r\n\r\n    // import语句\r\n    Parser.prototype.parseImportStmt = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('import');\r\n        lookahead = this.peek();\r\n        if (lookahead.type === TokenType.STRING) { //import 'test.css'\r\n            this.next();\r\n        } else {\r\n            if (lookahead.value === '{') { //import {a,b,c} from 'test'\r\n                this.next();\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n                while (this.hasNext() && this.peek().value != '}') {\r\n                    this.peekMatch(',')\r\n                    if (!this.peekMatch(TokenType.IDENTIFIER)) {\r\n                        break;\r\n                    }\r\n                    if (this.peek().value === 'as') { //import {a as b} from 'test'\r\n                        this.next();\r\n                        this.nextMatch(TokenType.IDENTIFIER);\r\n                    }\r\n                }\r\n                if (!this.peekMatch('}')) {\r\n                    Error.unmatch(lookahead);\r\n                }\r\n            } else if (lookahead.value === '*') { //import * as a from 'test'\r\n                this.next();\r\n                this.nextMatch('as');\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n            } else { //import a from 'test'\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n            }\r\n            this.nextMatch('from');\r\n            this.nextMatch(TokenType.STRING);\r\n        }\r\n    }\r\n\r\n    // export语句\r\n    Parser.prototype.parseExportStmt = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('export');\r\n        lookahead = this.peek();\r\n        if (lookahead.value === 'function') { //export function test\r\n            this.next();\r\n            this.parseFunctionStmt();\r\n        } else if (lookahead.value === 'default') { //export default test\r\n            this.next();\r\n            lookahead = this.peek();\r\n            if (lookahead.value == 'function') { //export default function\r\n                this.parseFunctionStmt();\r\n            } else if (lookahead.value === 'class') { //export default class {}\r\n                this.parseClassStmt();\r\n            } else {\r\n                this.parseExprStmt();\r\n            }\r\n        } else if (lookahead.value === '{') { //export {a,b,c} from 'test'\r\n            this.next();\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n            while (this.hasNext() && this.peek().value != '}') {\r\n                this.peekMatch(',')\r\n                if (!this.peekMatch(TokenType.IDENTIFIER)) {\r\n                    break;\r\n                }\r\n                if (this.peek().value === 'as') { //export {a as b} from 'test'\r\n                    this.next();\r\n                    this.nextMatch(TokenType.IDENTIFIER);\r\n                }\r\n            }\r\n            if (!this.peekMatch('}')) {\r\n                Error.unmatch(lookahead);\r\n            }\r\n            if (this.peek().value === 'from') {\r\n                this.next();\r\n                this.nextMatch(TokenType.STRING);\r\n            }\r\n        } else if (lookahead.value === '*') { //export * as a from 'test'\r\n            this.next();\r\n            if (this.peek().value === 'as') {\r\n                this.nextMatch('as');\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n            }\r\n            this.nextMatch('from');\r\n            this.nextMatch(TokenType.STRING);\r\n        } else { //export let a=1,b,c\r\n            this.parseDeclareStmt();\r\n        }\r\n    }\r\n\r\n    // if语句\r\n    Parser.prototype.parseIfStmt = function () {\r\n        let that = this;\r\n        let lookahead = null;\r\n        this.nextMatch('if');\r\n        this.parseList.push('if');\r\n        _nextExpr();\r\n        if (_stmt() && this.peek().value === ';') {\r\n            lookahead = this.peek(2);\r\n        } else {\r\n            lookahead = this.peek();\r\n        }\r\n        if (lookahead.value === 'else') {\r\n            this.next().value === ';' && this.next();\r\n            if (this.peek().value === 'if') {\r\n                this.parseIfStmt();\r\n            } else {\r\n                _stmt();\r\n            }\r\n        }\r\n        this.parseList.pop();\r\n\r\n        function _nextExpr() {\r\n            that.peekMatch('(');\r\n            that.parseExprStmt();\r\n            that.peekMatch(')');\r\n        }\r\n\r\n        function _stmt() {\r\n            if (that.peek().value === '{') {\r\n                that.parseBlockStmt(['else']);\r\n            } else {\r\n                that.parseStmt(true);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // switch语句\r\n    Parser.prototype.parseSwitchStmt = function () {\r\n        let start = null;\r\n        let lookahead = null;\r\n        this.parseList.push('switch');\r\n        this.nextMatch('switch');\r\n        this.peekMatch('(');\r\n        this.parseExprStmt();\r\n        this.peekMatch(')');\r\n        start = this.peek();\r\n        this.peekMatch('{');\r\n        while (this.hasNext() && this.peek().value != '}') {\r\n            if (this.peek().value === 'default') {\r\n                this.nextMatch('default');\r\n            } else {\r\n                this.nextMatch('case');\r\n                this.parseExprStmt();\r\n            }\r\n            this.peekMatch(':');\r\n            while (this.hasNext()) {\r\n                this.skipSemicolon();\r\n                lookahead = this.peek();\r\n                if (lookahead.value === '}' ||\r\n                    lookahead.value === 'break' ||\r\n                    lookahead.value === 'case' ||\r\n                    lookahead.value === 'default') {\r\n                    break;\r\n                }\r\n                this.parseStmt(true);\r\n            }\r\n            if (this.peek().value === 'break') {\r\n                let map = {\r\n                    '}': true,\r\n                    'case': true,\r\n                    'default': true,\r\n                }\r\n                this.next();\r\n                this.skipSemicolon();\r\n                lookahead = this.peek();\r\n                if (!map[lookahead.value]) { //break后面只能跟随case\r\n                    Error.expected(lookahead, ['case', 'default']);\r\n                    while (this.hasNext() && !map[this.peek().value]) {\r\n                        this.next();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!this.peekMatch('}') && start.value === '{') {\r\n            Error.unmatch(start);\r\n        }\r\n        this.parseList.pop();\r\n    }\r\n\r\n    // with语句\r\n    Parser.prototype.parseWithStmt = function () {\r\n        this.nextMatch('with');\r\n        this.peekMatch('(');\r\n        this.parseExprStmt();\r\n        this.peekMatch(')');\r\n        this.parseBlockStmt();\r\n    }\r\n\r\n    // while语句\r\n    Parser.prototype.parseWhileStmt = function () {\r\n        this.parseList.push('while');\r\n        this.nextMatch('while');\r\n        this.peekMatch('(');\r\n        this.parseExprStmt();\r\n        this.peekMatch(')');\r\n        if (this.peek().value === '{') {\r\n            this.parseBlockStmt();\r\n        } else {\r\n            this.parseStmt(true);\r\n        }\r\n        this.parseList.pop();\r\n    }\r\n\r\n    // do while语句\r\n    Parser.prototype.parseDoStmt = function () {\r\n        this.parseList.push('do');\r\n        this.nextMatch('do');\r\n        if (this.peek().value === '{') {\r\n            this.parseBlockStmt();\r\n        } else {\r\n            this.parseStmt(true);\r\n            this.skipSemicolon(1);\r\n        }\r\n        this.nextMatch('while');\r\n        this.peekMatch('(');\r\n        this.parseExprStmt();\r\n        this.peekMatch(')');\r\n        this.parseList.pop();\r\n    }\r\n\r\n    // try catch语句\r\n    Parser.prototype.parseTryStmt = function () {\r\n        let lookahead = null;\r\n        this.nextMatch('try');\r\n        this.parseBlockStmt();\r\n        lookahead = this.peek();\r\n        if (lookahead.value !== 'catch' && lookahead.value !== 'finally') {\r\n            Error.expected(lookahead, ['catch', 'finally']);\r\n        } else {\r\n            if (lookahead.value === 'catch') {\r\n                this.nextMatch('catch');\r\n                this.peekMatch('(');\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n                this.peekMatch(')');\r\n                this.parseBlockStmt();\r\n            }\r\n            if (this.peek().value === 'finally') {\r\n                this.next();\r\n                this.parseBlockStmt();\r\n            }\r\n        }\r\n    }\r\n\r\n    // for语句\r\n    Parser.prototype.parseForStmt = function () {\r\n        this.parseList.push('for');\r\n        this.nextMatch('for');\r\n        this.peekMatch('(');\r\n        if (this.peek(2).value === 'in' ||\r\n            this.peek(2).value === 'of' ||\r\n            this.peek(3).value === 'in' ||\r\n            this.peek(3).value === 'of') { //for in、es6 for of 语句\r\n            if (this.peek(3).value === 'in' || this.peek(3).value === 'of') {\r\n                this.nextMatch(['var', 'let', 'const']);\r\n            }\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n            this.nextMatch(['in', 'of']);\r\n            this.parseExprStmt();\r\n        } else {\r\n            if (['var', 'let', 'const'].indexOf(this.peek().value) > -1) {\r\n                this.parseDeclareStmt();\r\n            } else if (this.peek().value != ';') {\r\n                this.parseExprStmt();\r\n            }\r\n            this.nextMatch(';');\r\n            this.peek().value != ';' && this.parseExprStmt();\r\n            this.nextMatch(';');\r\n            this.peek().value != ')' && this.parseExprStmt();\r\n        }\r\n        this.peekMatch(')');\r\n        if (this.peek().value === '{') {\r\n            this.parseBlockStmt();\r\n        } else {\r\n            this.parseStmt(true);\r\n        }\r\n        this.parseList.pop();\r\n    }\r\n\r\n    // 函数声明\r\n    Parser.prototype.parseFunctionStmt = function (needName) {\r\n        this.nextMatch('function');\r\n        if (this.peek().type === TokenType.IDENTIFIER || needName) {\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n        }\r\n        this.parseFunArgsStmt();\r\n        this.parseBlockStmt();\r\n    }\r\n\r\n    // 类声明\r\n    Parser.prototype.parseClassStmt = function () {\r\n        var start = null;\r\n        var needName = !this.preToken || ['(', '=', 'default'].indexOf(this.preToken.value) == -1;\r\n        this.nextMatch('class');\r\n        if (this.peek().type === TokenType.IDENTIFIER || needName) {\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n        }\r\n        if (this.peek().value === 'extends') {\r\n            this.next();\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n        }\r\n        start = this.peek();\r\n        this.peekMatch('{');\r\n        while (this.hasNext() && this.peek().value != '}') {\r\n            if (this.peek(2).value === '=') { //属性\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n                this.parseAssignStmt('=');\r\n            } else { //方法\r\n                if (this.peek().value === 'static' || this.peek().value === 'get') {\r\n                    this.next();\r\n                }\r\n                this.nextMatch(TokenType.IDENTIFIER);\r\n                this.parseFunArgsStmt();\r\n                this.parseBlockStmt();\r\n            }\r\n        }\r\n        if (!this.peekMatch('}') && start.value === '{') {\r\n            Error.unmatch(start);\r\n        }\r\n    }\r\n\r\n    // 函数参数\r\n    Parser.prototype.parseFunArgsStmt = function () {\r\n        let that = this;\r\n        this.peekMatch('(');\r\n        if (this.peek().value != ')') {\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n        }\r\n        if (this.peek().value === '=') { //es6预设值\r\n            _assign();\r\n        }\r\n        while (this.hasNext() && this.peek().value === ',') {\r\n            this.next();\r\n            this.nextMatch(TokenType.IDENTIFIER);\r\n            if (this.peek().value === '=') {\r\n                _assign();\r\n            }\r\n        }\r\n        this.peekMatch(')');\r\n\r\n        function _assign() {\r\n            that.next();\r\n            that.parseExpr();\r\n        }\r\n    }\r\n\r\n    // break,continue\r\n    Parser.prototype.parseControlStmt = function () {\r\n        var token = this.next();\r\n        if (!this.checkIn(['for', 'while', 'do', 'if'])) {\r\n            Error.unexpected(token);\r\n        } else if (this.peek().type === TokenType.IDENTIFIER) { //continue flag\r\n            this.next();\r\n        }\r\n    }\r\n\r\n    // return语句\r\n    Parser.prototype.parseReturnStmt = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('return');\r\n        lookahead = this.peek();\r\n        if (lookahead.value !== ';' && lookahead.value !== '}' && lookahead.line === this.preToken.line) {\r\n            this.parseExprStmt();\r\n        }\r\n    }\r\n\r\n    // throw语句\r\n    Parser.prototype.parseThrowStmt = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('throw');\r\n        lookahead = this.peek();\r\n        if (lookahead.line !== this.preToken.line) {\r\n            Error.expected(lookahead, 'expression');\r\n        } else {\r\n            this.parseExprStmt();\r\n        }\r\n    }\r\n\r\n    Parser.prototype.checkIn = function (value) {\r\n        value = value instanceof Array ? value : [value];\r\n        for (var i = this.parseList.length; i >= 0; i--) {\r\n            if (value.indexOf(this.parseList[i]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 正则表达式\r\n    Parser.prototype.parseRegex = function () {\r\n        this.next();\r\n        if (this.peek().type === TokenType.IDENTIFIER) {\r\n            let value = this.peek().value.toLowerCase();\r\n            if (regflagsMap[value.split('').sort().join('')]) {\r\n                this.next();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 表达式分析\r\n    Parser.prototype.parseExprStmt = function () {\r\n        while (this.hasNext()) {\r\n            this.parseExpr();\r\n            if (this.peek().value == ',') { //下一个表达式\r\n                this.next();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 单条表达式分析\r\n    Parser.prototype.parseExpr = function () {\r\n        var originToken = this.peek();\r\n        var lookahead = null;\r\n        if (!this.hasNext()) {\r\n            Error.expected(null, 'expression');\r\n            return;\r\n        }\r\n        while (true) {\r\n            var leftHand = this.parseLeftHand();\r\n            if (leftHand.end) { //前面非标识符\r\n                break;\r\n            }\r\n            lookahead = this.peek();\r\n            if (lookahead.value === '.' && this.preToken.type !== TokenType.NUMBER) { //点运算符\r\n                this.parseDot();\r\n                lookahead = this.peek();\r\n                leftHand.assignAble = true;\r\n            }\r\n            if (lookahead.value === '[' && this.preToken.type !== TokenType.NUMBER) { //属性运算符\r\n                this.parseProperty();\r\n                lookahead = this.peek();\r\n                leftHand.assignAble = true;\r\n            }\r\n            if (this.lexer.isPostOp(lookahead)) { //后置运算符\r\n                !leftHand.assignAble && Error.expectedIdentifier(lookahead);\r\n                leftHand.assignAble = false;\r\n                this.next();\r\n                lookahead = this.peek();\r\n            }\r\n            if (lookahead.value === '?') { //三元运算符\r\n                this.nextMatch('?');\r\n                this.parseExpr();\r\n                this.peekMatch(':');\r\n                continue;\r\n            }\r\n            if (this.lexer.isAssignOperator(lookahead) && leftHand.assignAble) { //赋值运算符\r\n                this.parseAssignStmt(this.peek().value);\r\n                break;\r\n            }\r\n            if (!this.lexer.isBinaryOperator(lookahead)) { //下一个不是二元运算符，表达式结束\r\n                break;\r\n            }\r\n            this.next();\r\n            if (!this.hasNext()) { //表达式未结束\r\n                Error.unexpected(this.preToken);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseLeftHand = function () {\r\n        let preToken = this.preToken;\r\n        let token = this.next();\r\n        let lookahead = null;\r\n        let assignAble = false; //是否可赋值\r\n        let end = false; //是否结束当前表达式\r\n        let isPreOp = false;\r\n        let isSignOp = false;\r\n        if (this.lexer.isUnitOperator(token)) { //一元运算符:+1,-1\r\n            if (token.value === '!' || token.value === 'delete' || token.value === 'void') {\r\n                let value = token.value;\r\n                while (token && token.value === value) { //!!!...\r\n                    preToken = token;\r\n                    token = this.next();\r\n                }\r\n            } else {\r\n                preToken = token;\r\n                token = this.next();\r\n            }\r\n            isSignOp = true;\r\n        }\r\n        if (token && this.lexer.isPreOp(token)) { //前置运算符:++a,--a\r\n            preToken = token;\r\n            token = this.next();\r\n            token && !this.lexer.isVariable(token) && Error.expectedIdentifier(token);\r\n            isPreOp = true;\r\n        }\r\n        lookahead = this.peek();\r\n        if (!token) {\r\n            Error.expectedIdentifier();\r\n            end = true;\r\n        } else if (token.value === 'function') { //函数声明\r\n            this.putBack();\r\n            this.parseFunctionStmt();\r\n            if (this.peek().value === '(') { //function(){}()\r\n                this.parseCallArgs();\r\n            }\r\n        } else if (token.value === '(') {\r\n            this.putBack();\r\n            this.parseParen();\r\n            assignAble = true;\r\n        } else if (token.value === '[') { //数组\r\n            this.putBack();\r\n            this.parseArray();\r\n        } else if (token.value === 'new') { //new对象\r\n            this.putBack();\r\n            this.parseNew();\r\n        } else if (token.value == '{') { //对象字面量\r\n            this.putBack();\r\n            this.parseObjectStmt();\r\n        } else if (token.type === TokenType.REGEXP) { //正则表达式\r\n            this.putBack();\r\n            this.parseRegex();\r\n        } else if (lookahead.value === '(' && !isPreOp) { //函数调用test()\r\n            this.parseCallArgs();\r\n        } else if (lookahead.value === '=>' &&\r\n            !isPreOp && !isSignOp && this.lexer.isVariable(token)) { //es6箭头函数test=>{}\r\n            this.parseArrorwFunction(preToken && preToken.value === ':');\r\n            end = true;\r\n        } else if (!isPreOp && !isSignOp && this.lexer.isVariable(token)) { //是否可赋值\r\n            assignAble = true;\r\n        } else if (!this.lexer.isValue(token)) { //非运算对象\r\n            Error.expectedIdentifier(token);\r\n            end = true;\r\n        }\r\n        return {\r\n            assignAble: assignAble,\r\n            end: end\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseParen = function () {\r\n        let lookLength = 1;\r\n        let startToken = this.peek();\r\n        let preToken = this.preToken;\r\n        this.nextMatch('(');\r\n        let lookToken = this.peek();\r\n        while (lookToken.value && lookToken.value != ')') {\r\n            lookLength++;\r\n            lookToken = this.peek(lookLength);\r\n        }\r\n        if (lookToken.value === ')' && this.peek(lookLength + 1).value === '=>') { //es6箭头函数\r\n            this.putBack();\r\n            this.parseFunArgsStmt();\r\n            this.parseArrorwFunction(preToken && preToken.value === ':');\r\n        } else {\r\n            this.parseExprStmt();\r\n            !this.peekMatch(')') && Error.unmatch(startToken);\r\n            if (this.peek().value === '(') { //(a)()\r\n                this.parseCallArgs();\r\n            }\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseArray = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('[');\r\n        while (this.hasNext() && this.peek().value !== ']') {\r\n            if (this.peek().value === '...') { // [...a]\r\n                this.next();\r\n            }\r\n            this.parseExpr();\r\n            lookahead = this.peek();\r\n            if (lookahead.value === ',') {\r\n                this.next();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.nextMatch(']');\r\n    }\r\n\r\n    Parser.prototype.parseNew = function () {\r\n        this.nextMatch('new');\r\n        if (this.peek().value === '(') {\r\n            this.parseParen();\r\n        } else {\r\n            this.nextMatch([TokenType.IDENTIFIER, TokenType.KEYWORD]);\r\n        }\r\n        if (this.peek().value === '(') {\r\n            this.parseCallArgs();\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseArrorwFunction = function (skipNextExpr) {\r\n        this.nextMatch('=>');\r\n        if (this.peek().value === '{') {\r\n            this.parseBlockStmt();\r\n        } else if (skipNextExpr) { //{a:t=>t()}\r\n            this.parseExpr();\r\n        } else {\r\n            this.parseExprStmt();\r\n        }\r\n    }\r\n\r\n    // 函数调用\r\n    Parser.prototype.parseCallArgs = function () {\r\n        this.peekMatch('(');\r\n        if (this.peek().value !== ')') {\r\n            while (this.hasNext()) {\r\n                if (this.peek().value === '...') {\r\n                    this.next();\r\n                    if (this.peek().value === '{') {\r\n                        this.parseObjectStmt();\r\n                    } else {\r\n                        this.nextMatch(TokenType.IDENTIFIER);\r\n                    }\r\n                } else {\r\n                    this.parseExpr();\r\n                }\r\n                if (this.peek().value === ')') {\r\n                    break;\r\n                }\r\n                this.peekMatch(',');\r\n            }\r\n        }\r\n        this.peekMatch(')');\r\n        if (this.peek().value === '(') {\r\n            this.parseCallArgs();\r\n        }\r\n    }\r\n\r\n    // 点运算符\r\n    Parser.prototype.parseDot = function () {\r\n        var lookahead = null;\r\n        if (this.preToken.type !== TokenType.NUMBER && this.preToken.type !== TokenType.BOOLEAN) {\r\n            this.nextMatch('.');\r\n            lookahead = this.peek();\r\n            if (this.lexer.isDotAble(lookahead)) {\r\n                this.next();\r\n                lookahead = this.peek();\r\n                if (lookahead.value === '(') { //函数调用test()\r\n                    this.parseCallArgs();\r\n                }\r\n                lookahead = this.peek();\r\n                if (lookahead.value === '[') {\r\n                    this.parseProperty();\r\n                } else if (lookahead.value === '.') {\r\n                    this.parseDot();\r\n                }\r\n            } else {\r\n                Error.expected(lookahead, TokenType.IDENTIFIER);\r\n            }\r\n        } else {\r\n            Error.unexpected(this.next());\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseProperty = function () {\r\n        var lookahead = null;\r\n        this.nextMatch('[');\r\n        this.parseExprStmt();\r\n        this.nextMatch(']');\r\n        lookahead = this.peek();\r\n        if (lookahead.value === '(') { //函数调用test()\r\n            this.parseCallArgs();\r\n        }\r\n        lookahead = this.peek();\r\n        if (lookahead.value === '[') {\r\n            this.parseProperty();\r\n        } else if (lookahead.value === '.') {\r\n            this.parseDot();\r\n        }\r\n    }\r\n\r\n    var lexer = new Lexer();\r\n    var parser = new Parser(lexer);\r\n    lexer.parser = parser;\r\n\r\n    return {\r\n        parse: function (text) {\r\n            let result = null;\r\n            clearTimeout(parser.parseTimer);\r\n            parser.reset(text);\r\n            parser.parse();\r\n            result = Error.errors.map((item) => {\r\n                var line = item.line;\r\n                var column = item.column;\r\n                if (!item.line || item.line > lexer.lines.length) {\r\n                    line = lexer.lines.length;\r\n                    column = lexer.lines.peek().length;\r\n                }\r\n                return {\r\n                    line: line,\r\n                    column: column,\r\n                    error: item.error\r\n                }\r\n            }).sort((a, b) => {\r\n                if (a.line === b.line) {\r\n                    return a.column - b.column;\r\n                }\r\n                return a.line - b.line;\r\n            });\r\n            console.log(result);\r\n            return result;\r\n        }\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-02-08 10:31:22\r\n * @Description: \r\n */\r\nexport default function () {\r\n    Array.prototype.peek = function (index) {\r\n        if (this.length) {\r\n            return this[this.length - (index || 1)];\r\n        }\r\n    }\r\n    Array.prototype._isArray = true;\r\n    String.prototype.peek = function (index) {\r\n        if (this.length) {\r\n            return this[this.length - (index || 1)];\r\n        }\r\n    }\r\n    const brackets = ['{', '}', '[', ']', '(', ')'];\r\n    const regs = {\r\n        space: /^\\s+/,\r\n        tag: /^@?[a-zA-Z_\\-][a-zA-Z0-9_\\-]*/,\r\n        propertyName: /^[\\*]?[a-zA-Z_$][a-zA-Z0-9_\\-$]*/,\r\n        numValue: /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[sS%]|px|PX)?/,\r\n        propertyValue: /^[+\\-]?[a-zA-Z0-9_\\-$%]+|^#[a-zA-Z0-9]+/,\r\n        punctuator: /^[\\+\\-\\*\\~\\,\\:\\;\\.\\#\\=\\!]/,\r\n        comment: /\\*\\//,\r\n        string1: /\\\\*'/,\r\n        string2: /\\\\*\"/,\r\n        other: /^[\\s\\S]/\r\n    }\r\n    const maxErrors = 100;\r\n\r\n    function TokenType(type, label) {\r\n        this.type = type;\r\n        this.label = label;\r\n        this._isTokenType = true;\r\n    }\r\n\r\n    TokenType.prototype.toString = function () {\r\n        return this.label;\r\n    }\r\n\r\n    TokenType.STRING = new TokenType(2, 'string');\r\n    TokenType.SELECTOR = new TokenType(3, 'selector');\r\n    TokenType.PROPERTY = new TokenType(4, 'property');\r\n    TokenType.VALUE = new TokenType(5, 'value');\r\n    TokenType.NUM_VALUE = new TokenType(6, 'numValue');\r\n    TokenType.BRACKET = new TokenType(7, 'bracket');\r\n    TokenType.PUNCTUATOR = new TokenType(8, 'punctuator');\r\n    TokenType.OTHER = new TokenType(10, 'other');\r\n\r\n    function ErrorType(type) {\r\n        this.type = type;\r\n    }\r\n\r\n    ErrorType.UNEXPECTED = new ErrorType(1);\r\n    ErrorType.EXPECTED = new ErrorType(2);\r\n    ErrorType.MISS = new ErrorType(3);\r\n    ErrorType.UNMATCH = new ErrorType(4);\r\n\r\n    function Error(token, type, param) {\r\n        token = token || {};\r\n        this.type = type;\r\n        this.param = param;\r\n        this.line = token.line;\r\n        this.column = token.column;\r\n        this.value = token.value;\r\n        this.error = this.toString();\r\n    }\r\n\r\n    Error.prototype.toString = function () {\r\n        let error = '';\r\n        let param = this.param instanceof Array ? this.param : [this.param];\r\n        param = `${param.length === 1 ? 'a ' : ''}'${param.join(`'、'`)}'`;\r\n        switch (this.type) {\r\n            case ErrorType.UNEXPECTED:\r\n                error = `unexpected '${this.value}'`;\r\n                break;\r\n            case ErrorType.EXPECTED:\r\n                error = `expected ${param}`;\r\n                if (this.value) {\r\n                    error += ` and instead saw '${this.value}'`;\r\n                }\r\n                break;\r\n            case ErrorType.MISS:\r\n                error = `missing ${param}`;\r\n                if (this.value) {\r\n                    error += ` before '${this.value}'`\r\n                }\r\n                break;\r\n            case ErrorType.UNMATCH:\r\n                error = `unmatched '${this.value}'`\r\n                break;\r\n        }\r\n        return error;\r\n    }\r\n\r\n    Error.push = function (error) {\r\n        Error.errors.push(error);\r\n    }\r\n\r\n    Error.expected = function (token, value) {\r\n        Error.push(new Error(token, ErrorType.EXPECTED, value));\r\n    }\r\n\r\n    Error.unexpected = function (token) {\r\n        Error.push(new Error(token, ErrorType.UNEXPECTED));\r\n    }\r\n\r\n    Error.unmatch = function (token) {\r\n        Error.push(new Error(token, ErrorType.UNMATCH));\r\n    }\r\n\r\n    // 词法分析器\r\n    function Lexer() {\r\n        this.init();\r\n    }\r\n\r\n    Lexer.prototype.init = function () {\r\n        Error.errors = [];\r\n        this.lines = [''];\r\n        this.line = 1;\r\n        this.column = 0;\r\n        this.input = '';\r\n        this.bracketsMap = new Map();\r\n        brackets.map((item) => {\r\n            this.bracketsMap.set(item, true);\r\n        });\r\n    }\r\n\r\n    Lexer.prototype.reset = function (option) {\r\n        this.lines = option.texts;\r\n        this.line = option.line || 1;\r\n        this.column = option.column || 0\r\n        this.input = this.lines[this.line - 1].slice(this.column);\r\n    }\r\n\r\n    Lexer.prototype.skip = function (length) {\r\n        this.input = length ? this.input.slice(length) : this.input;\r\n        this.column += length;\r\n    }\r\n\r\n    Lexer.prototype.skipLine = function (length) {\r\n        this.line += length;\r\n        this.column = 0;\r\n        this.input = this.lines[this.line - 1] || '';\r\n    }\r\n\r\n    Lexer.prototype.hasNext = function () {\r\n        if (Error.errors.length > maxErrors) {\r\n            return false;\r\n        }\r\n        return this.line < this.lines.length ||\r\n            this.line == this.lines.length && this.lines.peek().length > this.column\r\n    }\r\n\r\n    Lexer.prototype.isBracket = function (value) {\r\n        return this.bracketsMap.has(value);\r\n    }\r\n\r\n    Lexer.prototype.isTokenType = function (type) {\r\n        return type._isTokenType;\r\n    }\r\n\r\n    Lexer.prototype.isProp = function (token) {\r\n        return token.type === TokenType.SELECTOR ||\r\n            token.type === TokenType.PROPERTY\r\n    }\r\n\r\n    Lexer.prototype.isValue = function (token) {\r\n        return token.type === TokenType.VALUE ||\r\n            token.type === TokenType.NUM_VALUE ||\r\n            token.type === TokenType.SELECTOR ||\r\n            token.type === TokenType.PROPERTY ||\r\n            token.type === TokenType.STRING\r\n    }\r\n\r\n    Lexer.prototype.craeteToken = function (value, type) {\r\n        let line = this.line;\r\n        let column = this.column;\r\n        if (line > this.lines.length) {\r\n            line = this.lines.length;\r\n            column = this.lines.peek().length;\r\n        }\r\n        return {\r\n            type: type,\r\n            line: line,\r\n            column: column,\r\n            value: value\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanSpace = function () {\r\n        let exec = null;\r\n        while (!this.input.length && this.line < this.lines.length) { //去掉空行\r\n            this.skipLine(1);\r\n        }\r\n        exec = regs.space.exec(this.input);\r\n        if (exec) {\r\n            this.skip(exec.index + exec[0].length);\r\n            exec.index >= this.input.length - 1 && this.scanSpace();\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanComment = function () {\r\n        let exec = null;\r\n        let ch1 = null;\r\n        let ch2 = null;\r\n        let startToken = null;\r\n        this.scanSpace(); //去掉空格\r\n        ch1 = this.input[0];\r\n        ch2 = this.input[1];\r\n        if (ch1 === '/' && ch2 === '*') {\r\n            startToken = this.craeteToken('/*');\r\n            this.skip(2);\r\n            while (this.hasNext() && !(exec = regs.comment.exec(this.input))) {\r\n                this.skipLine(1);\r\n            }\r\n            if (exec) {\r\n                this.skip(exec.index + exec[0].length);\r\n            } else {\r\n                Error.unmatch(startToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanString = function () {\r\n        let that = this;\r\n        let exec = null;\r\n        let token = null;\r\n        let startToken = null;\r\n        if (this.input[0] === '\\'') {\r\n            startToken = this.craeteToken('\\'', TokenType.STRING);\r\n            this.skip(1);\r\n            exec = _end(regs.string1);\r\n            token = this.craeteToken('\\'', TokenType.STRING);\r\n            if (!exec) {\r\n                Error.unmatch(startToken);\r\n                this.skipLine(1);\r\n            }\r\n            return token;\r\n        } else if (this.input[0] === '\"') {\r\n            startToken = this.craeteToken('\"', TokenType.STRING);\r\n            this.skip(1);\r\n            exec = _end(regs.string2);\r\n            token = this.craeteToken('\"', TokenType.STRING);\r\n            if (!exec) {\r\n                Error.unmatch(startToken);\r\n                this.skipLine(1);\r\n            }\r\n            return token;\r\n        }\r\n        return token;\r\n\r\n        function _end(reg) {\r\n            if (!that.hasNext()) {\r\n                return false;\r\n            }\r\n            if (exec = reg.exec(that.input)) {\r\n                that.skip(exec.index + exec[0].length);\r\n                if (exec[0].length % 2 === 0) { //含有奇数个\\:\\\\\\'\r\n                    return _end(reg);\r\n                }\r\n                return true;\r\n            } else {\r\n                that.skipLine(1);\r\n                return _end(reg);\r\n            }\r\n        }\r\n    }\r\n\r\n    Lexer.prototype.scanIdentifier = function () {\r\n        let exec = null;\r\n        let token = null;\r\n        if (exec = regs.tag.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.SELECTOR);\r\n            this.skip(exec.index + exec[0].length);\r\n        } else if (exec = regs.propertyName.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.PROPERTY);\r\n            this.skip(exec.index + exec[0].length);\r\n        } else if (exec = regs.numValue.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.NUM_VALUE);\r\n            this.skip(exec.index + exec[0].length);\r\n        } else if (exec = regs.propertyValue.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.VALUE);\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    Lexer.prototype.scanBracket = function () {\r\n        let token = null;\r\n        let ch = this.input[0];\r\n        if (this.isBracket(ch)) {\r\n            token = this.craeteToken(ch, TokenType.BRACKET);\r\n            this.skip(1);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    // 操作符号\r\n    Lexer.prototype.scanPunctuator = function () {\r\n        let token = null;\r\n        if (exec = regs.punctuator.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.PUNCTUATOR);\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token;\r\n    }\r\n\r\n    Lexer.prototype.scanOther = function () {\r\n        let exec = null;\r\n        let token = null;\r\n        if (exec = regs.other.exec(this.input)) {\r\n            token = this.craeteToken(exec[0], TokenType.OTHER);\r\n            this.skip(exec.index + exec[0].length);\r\n        }\r\n        return token\r\n    }\r\n\r\n    Lexer.prototype.next = function () {\r\n        let token = null;\r\n        this.scanComment();\r\n        if (this.hasNext()) {\r\n            token =\r\n                this.scanIdentifier() ||\r\n                this.scanBracket() ||\r\n                this.scanString() ||\r\n                this.scanPunctuator()\r\n            if (!token) { //存在非法字符\r\n                token = this.scanOther();\r\n                token && Error.unexpected(token);\r\n                return this.next();\r\n            }\r\n        }\r\n        this.preToken = token;\r\n        return token;\r\n    }\r\n\r\n    // 语法分析器\r\n    function Parser(lexer) {\r\n        this.lexer = lexer;\r\n        this.cacheList = [];\r\n        this.backs = [];\r\n        this.parseList = [];\r\n        this.preToken = null;\r\n        Error.errors = [];\r\n    }\r\n\r\n    Parser.prototype.reset = function (text) {\r\n        this.backs = [];\r\n        this.parseList = [];\r\n        this.preToken = null;\r\n        this.recovery(text);\r\n        Error.errors = [];\r\n    }\r\n\r\n    // 添加缓存\r\n    Parser.prototype.cache = function () {\r\n        if (this.cacheList.length && this.cacheList.peek().line == this.lexer.line) {\r\n            this.cacheList.pop();\r\n        }\r\n        this.preToken && this.cacheList.push({\r\n            line: this.preToken.line,\r\n            column: this.preToken.column,\r\n            parseList: this.parseList.slice(0)\r\n        });\r\n    }\r\n\r\n    // 从缓存中恢复\r\n    Parser.prototype.recovery = function (text) {\r\n        let index = 0;\r\n        let texts = text.split('\\n') || [''];\r\n        let hasCache = false;\r\n        while (index < texts.length && index < this.lexer.lines.length && texts[index] === this.lexer.lines[index]) {\r\n            index++;\r\n        }\r\n        if (index > 0) {\r\n            let cacheIndex = -1;\r\n            for (let i = 0; i < this.cacheList.length; i++) {\r\n                if (this.cacheList[i].line <= index) {\r\n                    cacheIndex = i;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (cacheIndex > -1) {\r\n                let cache = this.cacheList[cacheIndex];\r\n                this.parseList = cache.parseList;\r\n                this.cacheList = this.cacheList.slice(0, cacheIndex + 1);\r\n                this.lexer.reset({\r\n                    texts: texts,\r\n                    line: cache.line,\r\n                    column: cache.column\r\n                });\r\n                this.next();\r\n                hasCache = true;\r\n            }\r\n        }\r\n        if (!hasCache) {\r\n            this.cacheList = [];\r\n            this.lexer.reset({\r\n                texts: texts\r\n            });\r\n        }\r\n    }\r\n\r\n    Parser.prototype.match = function (token, value) {\r\n        let pass = false;\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (this.lexer.isTokenType(value[i])) {\r\n                if (value[i] === token.type) {\r\n                    pass = true;\r\n                    break;\r\n                }\r\n            } else if (value[i] === token.value) {\r\n                pass = true;\r\n                break;\r\n            }\r\n        };\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.next = function (length) {\r\n        let token = null;\r\n        length = length || 1;\r\n        while (length > 0) {\r\n            if (this.backs.length) {\r\n                token = this.backs.shift();\r\n            } else {\r\n                token = this.lexer.next();\r\n            }\r\n            this.pre2Token = this.preToken;\r\n            this.preToken = token || this.preToken;\r\n            length--;\r\n        }\r\n        this.puted = false;\r\n        return token;\r\n    }\r\n\r\n    Parser.prototype.nextMatch = function (value) {\r\n        let token = this.next() || {};\r\n        let pass = false;\r\n        value = value._isArray ? value : [value];\r\n        pass = token.value && this.match(token, value);\r\n        if (!pass) {\r\n            if (token.value && this.match(this.peek(), value)) {\r\n                Error.unexpected(token);\r\n            } else {\r\n                Error.expected(token, value);\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.peek = function (length) {\r\n        let token = null;\r\n        length = length || 1;\r\n        if (this.backs.length) {\r\n            token = this.backs[length - 1];\r\n        }\r\n        if (!token) {\r\n            length -= this.backs.length;\r\n            while (length > 0) {\r\n                length--;\r\n                token = this.lexer.next();\r\n                token && this.backs.push(token);\r\n            }\r\n        }\r\n        return token || {};\r\n    }\r\n\r\n    Parser.prototype.peekMatch = function (value) {\r\n        let token = this.peek() || {};\r\n        let pass = false;\r\n        value = value._isArray ? value : [value];\r\n        pass = token.value && this.match(token, value);\r\n        if (pass) {\r\n            this.next();\r\n        } else {\r\n            if (token.value && this.match(this.peek(), value)) {\r\n                Error.unexpected(token);\r\n            } else {\r\n                Error.expected(token, value);\r\n            }\r\n        }\r\n        return pass;\r\n    }\r\n\r\n    Parser.prototype.hasNext = function () {\r\n        let lookahead = this.peek();\r\n        return lookahead.value\r\n    }\r\n\r\n    Parser.prototype.putBack = function () {\r\n        if (this.preToken && !this.puted) {\r\n            this.backs.unshift(this.preToken);\r\n            this.preToken = this.pre2Token;\r\n            this.puted = true;\r\n        }\r\n    }\r\n\r\n    Parser.prototype.skipSemicolon = function (length) {\r\n        length = length || Infinity\r\n        while (this.peek().value === ';' && length > 0) {\r\n            this.next();\r\n            length--;\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parse = function () {\r\n        let count = 0;\r\n        let startTime = Date.now();\r\n        while (this.hasNext()) {\r\n            this.parseStmt();\r\n            !Error.errors.length && this.cache();\r\n            if (++count % 10 === 0 && Date.now() - startTime > 200) {\r\n                this.parseTimer = setTimeout(() => {\r\n                    this.parseStmt();\r\n                }, 10);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseStmt = function () {\r\n        let token = this.peek();\r\n        if (token.value === '@import') {\r\n            this.parseImport();\r\n            return;\r\n        }\r\n        if (token.value === '@charset') {\r\n            this.parseCharset();\r\n            return;\r\n        }\r\n        if (token.value === '@keyframes' || token.value === '@-webkit-keyframes') {\r\n            this.parseKeyFrames();\r\n            return;\r\n        }\r\n        if (token.value === '@media') {\r\n            this.parseMedia();\r\n            return;\r\n        }\r\n        this.parseSelector();\r\n        if (this.peek().value === '{') {\r\n            this.parseBlock();\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseImport = function () {\r\n        this.nextMatch('@import');\r\n        this.nextMatch(TokenType.STRING);\r\n        if (['all', 'print', 'screen', 'speech'].indexOf(this.peek().value) > -1) {\r\n            this.parseMedia(true);\r\n        }\r\n        this.peekMatch(';');\r\n    }\r\n\r\n    Parser.prototype.parseCharset = function () {\r\n        this.nextMatch('@charset');\r\n        this.nextMatch(TokenType.STRING);\r\n        this.peekMatch(';');\r\n    }\r\n\r\n    Parser.prototype.parseMedia = function (onlyValue) {\r\n        let token = null;\r\n        !onlyValue && this.nextMatch('@media');\r\n        token = this.peek();\r\n        if (token.value === 'not' || token.value === 'only') {\r\n            this.next();\r\n        }\r\n        this.nextMatch(['all', 'print', 'screen', 'speech']);\r\n        while (this.hasNext()) {\r\n            token = this.peek();\r\n            if (token.value === 'and' || token.value === 'or') {\r\n                this.next();\r\n                this.nextMatch('(');\r\n                token = this.next() || {};\r\n                if (!this.lexer.isProp(token)) {\r\n                    Error.expected(token, TokenType.PROPERTY);\r\n                }\r\n                if (this.peek().value != ')') {\r\n                    this.peekMatch(':')\r\n                    token = this.next() || {};\r\n                    if (!this.lexer.isValue(token)) {\r\n                        Error.expected(token, TokenType.VALUE);\r\n                    }\r\n                    this.peekMatch(')');\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (!onlyValue) {\r\n            this.peekMatch('{');\r\n            this.parseStmt();\r\n            this.peekMatch('}');\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseKeyFrames = function () {\r\n        let token = null;\r\n        this.nextMatch(['@keyframes', '@-webkit-keyframes']);\r\n        token = this.next();\r\n        if (token.type !== TokenType.SELECTOR) {\r\n            Error.expected(token, 'name');\r\n        }\r\n        this.peekMatch('{');\r\n        while (this.hasNext()) {\r\n            if (this.peek().value === '}') {\r\n                break;\r\n            }\r\n            this.nextMatch(TokenType.NUM_VALUE);\r\n            this.parseBlock();\r\n        }\r\n        this.peekMatch('}');\r\n    }\r\n\r\n    Parser.prototype.parseSelector = function () {\r\n        let token = this.next() || {};\r\n        if (token.value === '.' || token.value === '#') { //类、ID选择器\r\n            this.nextMatch(TokenType.SELECTOR);\r\n        } else if (token.value === '[') { //属性选择器\r\n            this.nextMatch(TokenType.SELECTOR);\r\n            if (this.peek().value !== ']') {\r\n                this.nextMatch('=');\r\n                token = this.peek();\r\n                if (!this.lexer.isValue(token)) {\r\n                    Error.expected(token, 'value');\r\n                } else {\r\n                    this.next();\r\n                }\r\n                this.peekMatch(']');\r\n            } else {\r\n                this.next();\r\n            }\r\n        } else if (token.value === ':') { //伪类选择器\r\n            if (this.peek().value === ':') {\r\n                this.next();\r\n            }\r\n            this.nextMatch(TokenType.SELECTOR);\r\n            if (this.peek().value === '(') { //:not(p)\r\n                this.next();\r\n                this.parseSelector();\r\n                this.peekMatch(')');\r\n            }\r\n        } else if (token.value !== '*') { //标签选择器\r\n            this.putBack();\r\n            this.nextMatch(TokenType.SELECTOR);\r\n        }\r\n        if (this.hasNext() && this.peek().value !== '{') {\r\n            token = this.peek();\r\n            if (token.value === '+' || token.value === '~') { //兄弟选择器\r\n                this.next();\r\n            } else if (token.value === ',') { //并列选择器\r\n                this.next();\r\n            }\r\n            this.parseSelector();\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parseBlock = function () {\r\n        let that = this;\r\n        this.nextMatch('{');\r\n        while (this.hasNext()) {\r\n            if (this.peek().value === '}') {\r\n                break;\r\n            }\r\n            _nextMatchProperty();\r\n            this.peekMatch(':');\r\n            _nextMatchValue();\r\n            if (this.peek().value !== '}') {\r\n                this.peekMatch(';');\r\n            }\r\n        }\r\n        this.peekMatch('}');\r\n\r\n        function _nextMatchProperty() {\r\n            let token = that.next();\r\n            if (token.type !== TokenType.SELECTOR && token.type !== TokenType.PROPERTY) {\r\n                Error.expected(TokenType.PROPERTY);\r\n            }\r\n        }\r\n\r\n        function _nextMatchValue() {\r\n            let hasValue = false;\r\n            while (that.hasNext()) {\r\n                let token = that.peek();\r\n                if (token.value === ';' || token.value === '}' || token.value === ')') {\r\n                    break;\r\n                }\r\n                token = that.next();\r\n                if (that.lexer.isValue(token)) {\r\n                    hasValue = true;\r\n                } else if (token.value === '(') {\r\n                    let lbraces = 1;\r\n                    while (that.hasNext() && lbraces) {\r\n                        let token = that.next() || {};\r\n                        if (token.value === ')') {\r\n                            lbraces--;\r\n                        } else if (token.value === '(') {\r\n                            lbraces++;\r\n                        }\r\n                    }\r\n                    lbraces && that.peekMatch(')');\r\n                } else if (hasValue && token.value === ',') {\r\n                    _nextMatchValue();\r\n                    break;\r\n                } else if (hasValue && token.value === '!') {\r\n                    that.peekMatch('important');\r\n                    break;\r\n                } else {\r\n                    Error.expected(token, TokenType.VALUE);\r\n                }\r\n            }\r\n            if (!hasValue) {\r\n                Error.expected(null, TokenType.VALUE);\r\n            }\r\n            return hasValue;\r\n        }\r\n    }\r\n\r\n    let lexer = new Lexer();\r\n    let parser = new Parser(lexer);\r\n    lexer.parser = parser;\r\n\r\n    return {\r\n        parse: function (text) {\r\n            let result = null;\r\n            clearTimeout(parser.parseTimer);\r\n            parser.reset(text);\r\n            parser.parse();\r\n            result = Error.errors.map((item) => {\r\n                let line = item.line;\r\n                let column = item.column;\r\n                if (!item.line || item.line > lexer.lines.length) {\r\n                    line = lexer.lines.length;\r\n                    column = lexer.lines.peek().length;\r\n                }\r\n                return {\r\n                    line: line,\r\n                    column: column,\r\n                    error: item.error\r\n                }\r\n            }).sort((a, b) => {\r\n                if (a.line === b.line) {\r\n                    return a.column - b.column;\r\n                }\r\n                return a.line - b.line;\r\n            });\r\n            console.log(result);\r\n            return result;\r\n        }\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-02-09 21:33:03\r\n * @Description: \r\n */\r\nimport jsLint from './javascript';\r\nimport cssLint from './css';\r\n\r\nfunction htmlLint() {\r\n    let regs = {\r\n        js: /(?<!\\<[^\\>]*?['\"][^\\>]*?)(\\<script(?:\\s[^\\>]*?)?\\>)([\\s\\S]*?)\\<\\/script\\>/,\r\n        css: /(?<!\\<[^\\>]*?['\"][^\\>]*?)(\\<style(?:\\s[^\\>]*?)?\\>)([\\s\\S]*?)\\<\\/style\\>/,\r\n        enter: /\\n/g,\r\n        column: /\\n([^\\n]+)$/,\r\n        comment: /\\<\\!--[\\s\\S]*?--\\>/\r\n    }\r\n\r\n    function Parser() {}\r\n\r\n    Parser.prototype.reset = function (text) {\r\n        this.text = text;\r\n        this.comments = [];\r\n    }\r\n\r\n    Parser.prototype.parseComentRange = function () {\r\n        let exec = null;\r\n        let pos = {\r\n            line: 1,\r\n            column: 0,\r\n            index: 0\r\n        }\r\n        let text = this.text;\r\n        let start = null;\r\n        let end = null;\r\n        while (exec = regs.comment.exec(text)) {\r\n            this.setLineColumn(text.slice(0, exec.index), pos);\r\n            pos.index += exec.index;\r\n            start = Object.assign({}, pos);\r\n            this.setLineColumn(exec[0], pos);\r\n            pos.index += exec[0].length;\r\n            end = Object.assign({}, pos);\r\n            text = this.text.slice(pos.index);\r\n            this.comments.push({\r\n                start: start,\r\n                end: end\r\n            });\r\n        }\r\n    }\r\n\r\n    Parser.prototype.setLineColumn = function (text, pos) {\r\n        let lines = text.match(regs.enter);\r\n        lines = lines && lines.length || 0;\r\n        pos.line += lines;\r\n        if (lines) {\r\n            let exec = regs.column.exec(text);\r\n            pos.column = exec && exec[1].length || 0;\r\n        } else {\r\n            pos.column += text.length;\r\n        }\r\n    }\r\n\r\n    Parser.prototype.parse = function () {\r\n        this.parseComentRange();\r\n        return parser.parseJs().concat(parser.parseCss());\r\n    }\r\n\r\n    Parser.prototype.parseJs = function () {\r\n        let parseJs = jsParser().parse;\r\n        return this._parse(regs.js, parseJs);\r\n    }\r\n\r\n    Parser.prototype.parseCss = function () {\r\n        let parseCss = cssParser().parse;\r\n        return this._parse(regs.css, parseCss);\r\n    }\r\n\r\n    Parser.prototype._parse = function (reg, parseFun) {\r\n        let exec = null;\r\n        let pos = {\r\n            line: 1,\r\n            column: 0,\r\n            index: 0\r\n        }\r\n        let text = this.text;\r\n        let result = [];\r\n        while (exec = reg.exec(text)) {\r\n            this.setLineColumn(text.slice(0, exec.index), pos);\r\n            pos.index += exec.index;\r\n            if (!this.checkInComment(pos)) {\r\n                text = this.text.slice(pos.index);\r\n                continue;\r\n            }\r\n            this.setLineColumn(exec[1], pos);\r\n            pos.index += exec[1].length;\r\n            if (exec[2]) {\r\n                let r = parseFun(exec[2]);\r\n                r.map((item) => {\r\n                    if (item.line == 1) {\r\n                        item.column += pos.column;\r\n                    }\r\n                    item.line += pos.line - 1;\r\n                });\r\n                result = result.concat(r);\r\n            }\r\n            this.setLineColumn(exec[0].slice(exec[1].length), pos);\r\n            pos.index += exec[0].slice(exec[1].length).length;\r\n            text = this.text.slice(pos.index);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    Parser.prototype.checkInComment = function (pos) {\r\n        for (let i = 0; i < this.comments.length; i++) {\r\n            let item = this.comments[i];\r\n            if (_compare(item.start, pos) < 0 && _compare(item.end, pos) > 0) {\r\n                pos.line = item.end.line;\r\n                pos.column = item.end.column;\r\n                pos.index = item.end.index;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n\r\n        function _compare(a, b) {\r\n            if (a.line === b.line) {\r\n                return a.column - b.column\r\n            }\r\n            return a.line - b.line;\r\n        }\r\n    }\r\n\r\n    let parser = new Parser();\r\n\r\n    return {\r\n        parse: function (text) {\r\n            let result = null;\r\n            parser.reset(text);\r\n            result = parser.parse();\r\n            result.sort((a, b) => {\r\n                if (a.line === b.line) {\r\n                    return a.column - b.column;\r\n                }\r\n                return a.line - b.line;\r\n            });\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new Function(`function jsParser()${jsLint.toString().replace(/^[^\\)]+?\\)/, '')}\r\nfunction cssParser()${cssLint.toString().replace(/^[^\\)]+?\\)/, '')}\r\nfunction htmlParser()${htmlLint.toString().replace(/^[^\\)]+?\\)/, '')}\r\nreturn htmlParser();\r\n`)","/*\r\n * @Author: lisong\r\n * @Date: 2022-01-05 14:28:42\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\nimport htmlLint from '../language/html';\r\nimport jsLint from '../language/javascript';\r\nimport cssLint from '../language/css';\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.parseId = 1;\r\n        this.initProperties(editor, context);\r\n        this.initLanguage(editor.language);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, context, ['htmls', ]);\r\n        Util.defineProperties(this, editor, ['setErrorMap']);\r\n    }\r\n    initLanguage(language) {\r\n        let that = this;\r\n        if (this.language === language) {\r\n            return;\r\n        }\r\n        this.language = language;\r\n        this.worker && this.worker.terminate();\r\n        this.worker = null;\r\n        this.setErrorMap({});\r\n        switch (language) {\r\n            case 'HTML':\r\n                this.worker = this.createWorker(htmlLint);\r\n                break;\r\n            case 'JavaScript':\r\n                this.worker = this.createWorker(jsLint);\r\n                break;\r\n            case 'CSS':\r\n                this.worker = this.createWorker(cssLint);\r\n                break;\r\n        }\r\n        if (!this.worker) {\r\n            return;\r\n        }\r\n        this.worker.onmessage = function (e) {\r\n            let parseId = e.data.parseId;\r\n            let errors = e.data.errors;\r\n            let index = 0;\r\n            let errorMap = {};\r\n            if (that.parseId != parseId) {\r\n                return;\r\n            }\r\n            while (index < errors.length) {\r\n                let line = errors[index].line;\r\n                let arr = [];\r\n                while (index < errors.length && errors[index].line === line) {\r\n                    arr.push(errors[index].error);\r\n                    index++;\r\n                }\r\n                line = line || that.htmls.length;\r\n                errorMap[line] = arr.join('<br>');\r\n            }\r\n            that.setErrorMap(errorMap);\r\n        }\r\n        this.parse();\r\n    }\r\n    createWorker(mod) {\r\n        var funStr = mod.toString().replace(/^[^\\)]+?\\)/, '');\r\n        var str =\r\n            `function fun()${funStr}\r\n            let parser = fun();\r\n            self.onmessage = function(e) {\r\n                var parseId = e.data.parseId;\r\n                var errors = parser.parse(e.data.text);\r\n                self.postMessage({\r\n                    errors: errors,\r\n                    parseId: parseId\r\n                });\r\n            }`;\r\n        return Util.createWorker(str);\r\n    }\r\n    onInsertContentBefore(nowLine) {}\r\n    onInsertContentAfter(nowLine) {\r\n        if (!this.worker) {\r\n            return;\r\n        }\r\n        clearTimeout(this.parseTimer);\r\n        this.parseTimer = setTimeout(() => {\r\n            this.parse();\r\n        }, 300);\r\n    }\r\n    onDeleteContentBefore(nowLine) {}\r\n    onDeleteContentAfter(nowLine) {\r\n        if (!this.worker) {\r\n            return;\r\n        }\r\n        clearTimeout(this.parseTimer);\r\n        this.parseTimer = setTimeout(() => {\r\n            this.parse();\r\n        }, 300);\r\n    }\r\n    parse() {\r\n        let text = this.htmls.map((item) => {\r\n            return item.text;\r\n        }).join('\\n');\r\n        this.parseId++;\r\n        this.worker.postMessage({\r\n            text: text,\r\n            parseId: this.parseId\r\n        });\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2021-12-31 14:42:01\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.editorFunObj = {};\r\n        this.initProperties(editor, context);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this.editorFunObj, editor, ['unFold']);\r\n        Util.defineProperties(this, editor, ['selectedRange']);\r\n        Util.defineProperties(this, context, ['htmls', 'folds', 'foldMap']);\r\n    }\r\n    onInsertContentBefore(nowLine) {\r\n        if (this.folds.length) {\r\n            let index = this.findFoldIndex(nowLine);\r\n            let unFolds = [];\r\n            while (index < this.folds.length && this.folds[index].start.line < nowLine && this.folds[index].end.line > nowLine) {\r\n                unFolds.push(this.folds[index].start.line);\r\n                index++;\r\n            }\r\n            unFolds.map((line) => {\r\n                this.editorFunObj.unFold(line);\r\n            });\r\n        }\r\n    }\r\n    onInsertContentAfter(nowLine) {}\r\n    onDeleteContentBefore(nowLine) {\r\n        if (this.selectedRange) {\r\n            let start = this.selectedRange.start;\r\n            let end = this.selectedRange.end;\r\n            for (let line = start.line; line < end.line; line++) { //删除折叠区域\r\n                this.editorFunObj.unFold(line);\r\n            }\r\n        }\r\n    }\r\n    onDeleteContentAfter(nowLine) {\r\n        if (this.folds.length) {\r\n            let index = this.findFoldIndex(nowLine);\r\n            let unFolds = [];\r\n            while (index < this.folds.length && this.folds[index].start.line < nowLine && this.folds[index].end.line > nowLine) {\r\n                unFolds.push(this.folds[index].start.line);\r\n                index++;\r\n            }\r\n            unFolds.map((line) => {\r\n                this.editorFunObj.unFold(line);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 寻找第一个包裹nowLine的折叠对象的下标\r\n     * @param {Number} nowLine \r\n     */\r\n    findFoldIndex(nowLine) {\r\n        let left = 0;\r\n        let right = this.folds.length - 1;\r\n        while (left < right) {\r\n            let mid = Math.floor((left + right) / 2);\r\n            let fold = this.folds[mid];\r\n            if (fold.start.line < nowLine) {\r\n                if (fold.end.line <= nowLine) {\r\n                    left = mid + 1;\r\n                } else {\r\n                    right = mid;\r\n                }\r\n            } else if (fold.start.line == nowLine) {\r\n                left = mid + 1;\r\n            } else {\r\n                right = mid - 1;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n    // 折叠行\r\n    foldLine(line) {\r\n        let startLine = line;\r\n        let resultFold = this.getRangeFold(line);\r\n        if (resultFold) {\r\n            for (let line = resultFold.start.line; line < resultFold.end.line; line++) {\r\n                if (this.foldMap.has(line)) {\r\n                    if (this.foldMap.get(line).end.line > resultFold.end.line) {\r\n                        this.unFold(line);\r\n                    }\r\n                }\r\n            }\r\n            this.foldMap.set(startLine, resultFold);\r\n            this.folds.push(resultFold);\r\n            this.folds.sort((a, b) => {\r\n                return a.start.line - b.start.line;\r\n            });\r\n        }\r\n        return resultFold;\r\n    }\r\n    // 展开折叠行\r\n    unFold(line) {\r\n        let left = 0;\r\n        let right = this.folds.length;\r\n        if (!this.foldMap.has(line)) {\r\n            return false;\r\n        }\r\n        while (left <= right) {\r\n            let mid = Math.floor((left + right) / 2);\r\n            if (this.folds[mid].start.line == line) {\r\n                this.folds.splice(mid, 1);\r\n                break;\r\n            } else if (this.folds[mid].start.line > line) {\r\n                right = mid - 1;\r\n            } else {\r\n                left = mid + 1;\r\n            }\r\n        }\r\n        this.foldMap.delete(line);\r\n        return true;\r\n    }\r\n    /**\r\n     * 获取折叠范围\r\n     * @param {Number} line 行号\r\n     * @param {Boolean} foldIconCheck 检测是否显示折叠图标\r\n     */\r\n    getRangeFold(line, foldIconCheck) {\r\n        let stack = [];\r\n        let startLine = line;\r\n        let lineObj = this.htmls[startLine - 1];\r\n        let resultFold = null;\r\n        line++;\r\n        if (lineObj.folds && lineObj.folds.length) {\r\n            for (let i = 0; i < lineObj.folds.length; i++) {\r\n                let fold = lineObj.folds[i];\r\n                if (fold.type == -1) {\r\n                    if (!stack.length || stack.peek().name == fold.name) {\r\n                        stack.push(fold);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        while (stack.length && line <= this.htmls.length && (!foldIconCheck || line - startLine <= 1)) {\r\n            lineObj = this.htmls[line - 1];\r\n            if (lineObj.folds && lineObj.folds.length) {\r\n                for (let i = 0; i < lineObj.folds.length; i++) {\r\n                    let fold = lineObj.folds[i];\r\n                    if (fold.type == -1) {\r\n                        if (stack.peek().name == fold.name) {\r\n                            stack.push(fold);\r\n                        }\r\n                    } else if (stack.peek().name == fold.name) {\r\n                        if (stack.length == 1) {\r\n                            if (foldIconCheck) {\r\n                                return line - startLine > 1;\r\n                            } else {\r\n                                resultFold = {\r\n                                    start: {\r\n                                        line: startLine,\r\n                                        start: stack.peek().start\r\n                                    },\r\n                                    end: {\r\n                                        line: line,\r\n                                        end: fold.end\r\n                                    },\r\n                                    name: fold.name\r\n                                }\r\n                                stack.pop();\r\n                                break;\r\n                            }\r\n                        }\r\n                        stack.pop();\r\n                    }\r\n                }\r\n            }\r\n            line++;\r\n        }\r\n        return foldIconCheck ? line - startLine > 1 : resultFold;\r\n    }\r\n    // 根据相对行号获取真实行号(折叠后行号会改变)\r\n    getRealLine(line) {\r\n        let i = 0;\r\n        let lineCount = 1;\r\n        let realLine = 1;\r\n        while (i < this.folds.length && lineCount < line) {\r\n            let fold = this.folds[i];\r\n            if (lineCount + fold.start.line - realLine < line) {\r\n                lineCount += fold.start.line + 1 - realLine;\r\n                realLine = fold.end.line;\r\n            } else {\r\n                break;\r\n            }\r\n            i++;\r\n            while (i < this.folds.length && this.folds[i].end.line <= fold.end.line) { //多级折叠\r\n                i++;\r\n            }\r\n        }\r\n        realLine += line - lineCount;\r\n        return realLine;\r\n    }\r\n    // 根据真实行号获取相对行号\r\n    getRelativeLine(line) {\r\n        let relLine = line;\r\n        let i = 0;\r\n        while (i < this.folds.length) {\r\n            let fold = this.folds[i];\r\n            if (line >= fold.end.line) {\r\n                relLine -= fold.end.line - fold.start.line - 1;\r\n            } else {\r\n                break;\r\n            }\r\n            i++;\r\n            while (i < this.folds.length && this.folds[i].end.line <= fold.end.line) { //多级折叠\r\n                i++;\r\n            }\r\n        }\r\n        return relLine;\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-02-12 09:52:06\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\nlet regs = {\r\n    enter: /\\n/g,\r\n    column: /\\n([^\\n]+)$/,\r\n}\r\n\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.initProperties(editor, context);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, editor, ['selecter', 'nowCursorPos']);\r\n        Util.defineProperties(this, context, ['htmls']);\r\n    }\r\n    search(str, option) {\r\n        let resultObj = this.checkCache(str);\r\n        if (resultObj) {\r\n            return resultObj;\r\n        }\r\n        let reg = null,\r\n            exec = null,\r\n            preExec = null,\r\n            start = null,\r\n            end = null,\r\n            result = null,\r\n            resultCaches = [],\r\n            firstRnagePos = null,\r\n            rangePos = null,\r\n            that = this,\r\n            line = 1,\r\n            column = 0\r\n        let text = context.htmls.map((item) => {\r\n            return item.text\r\n        }).join('\\n');\r\n        let strs = str.split(/\\n/);\r\n        let regStr = str.replace(/\\\\|\\.|\\*|\\+|\\-|\\?|\\(|\\)|\\[|\\]|{|\\}|\\^|\\$|\\~|\\!/g, '\\\\$&');\r\n        regStr = (option.wholeWord ? '\\\\b' : '') + regStr + (option.wholeWord ? '\\\\b' : '');\r\n        option = option || {};\r\n        reg = new RegExp('[^\\n]*?(' + regStr + ')|[^\\n]*?\\n', option.ignoreCase ? 'img' : 'mg');\r\n        while (exec = reg.exec(text)) {\r\n            if (!exec[1]) {\r\n                line++;\r\n                column = 0;\r\n            } else {\r\n                if (preExec && preExec[1] && preExec.index + preExec[0].length !== exec.index) {\r\n                    line++;\r\n                    column = 0;\r\n                }\r\n                start = {\r\n                    line: line,\r\n                    column: column + exec[0].length - strs[0].length\r\n                }\r\n                end = {\r\n                    line: line + strs.length - 1,\r\n                    column: strs.length > 1 ? strs.peek().length : column + exec[0].length\r\n                }\r\n                column = end.column;\r\n                rangePos = {\r\n                    start: start,\r\n                    end: end\r\n                };\r\n                firstRnagePos = firstRnagePos || rangePos;\r\n                if (!result && Util.comparePos(end, that.nowCursorPos) >= 0) {\r\n                    result = rangePos;\r\n                }\r\n                resultCaches.push(rangePos);\r\n            }\r\n            preExec = exec;\r\n        }\r\n        if (!result && firstRnagePos) {\r\n            result = firstRnagePos\r\n        }\r\n        this.cache(str, resultCaches, result);\r\n        return {\r\n            list: resultCaches,\r\n            result: result\r\n        };\r\n    }\r\n    checkCache(str) {\r\n        if (!this.cacheData || this.cacheData.str !== str) {\r\n            return;\r\n        }\r\n        let resultCaches = this.cacheData.list;\r\n        let result = null;\r\n        for (let i = 0; i < resultCaches.length; i++) {\r\n            let rangePos = resultCaches[i];\r\n            if (Util.comparePos(rangePos.end, this.cacheData.result.end) > 0) {\r\n                result = rangePos;\r\n                break;\r\n            }\r\n        }\r\n        if (!result) {\r\n            result = resultCaches[0];\r\n        }\r\n        this.cacheData.result = result;\r\n        return {\r\n            list: resultCaches,\r\n            result: result\r\n        }\r\n    }\r\n    hasCache() {\r\n        return !!this.cacheData;\r\n    }\r\n    cache(str, list, result) {\r\n        this.cacheData = {\r\n            str: str,\r\n            list: list,\r\n            result: result,\r\n        };\r\n    }\r\n    clearCache() {\r\n        this.cacheData = null;\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-02-13 10:41:16\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\n\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.initProperties(editor, context);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, editor, [\r\n            'selectedRanges',\r\n            'renderSelectedBg',\r\n            'cursor',\r\n            'multiCursorPos'\r\n        ]);\r\n        Util.defineProperties(this, context, ['htmls']);\r\n    }\r\n    select(direct, wholeWord) {\r\n        this.multiCursorPos.map((cursorPos) => {\r\n            let selectedRange = this.checkCursorSelected(cursorPos);\r\n            if (selectedRange) {\r\n                this.cursor.moveCursor(cursorPos, direct, wholeWord);\r\n                if (Util.comparePos(cursorPos, selectedRange.start) < 0 ||\r\n                    Util.comparePos(cursorPos, selectedRange.end) <= 0 && direct === 'right') {\r\n                    selectedRange.start.line = cursorPos.line;\r\n                    selectedRange.start.column = cursorPos.column;\r\n                } else {\r\n                    selectedRange.end.line = cursorPos.line;\r\n                    selectedRange.end.column = cursorPos.column;\r\n                }\r\n            } else {\r\n                let _cursorPos = Object.assign({}, cursorPos);\r\n                cursorPos = this.cursor.moveCursor(cursorPos, direct, wholeWord);\r\n                this.addSelectedRange(_cursorPos, cursorPos);\r\n            }\r\n        });\r\n        this.filterSelectedRanges();\r\n        this.renderSelectedBg();\r\n    }\r\n    // 添加选中区域\r\n    addSelectedRange(start, end) {\r\n        let same = Util.comparePos(start, end);\r\n        if (same > 0) {\r\n            let tmp = start;\r\n            start = end;\r\n            end = tmp;\r\n        } else if (!same) {\r\n            return;\r\n        }\r\n        this.selectedRanges.push({\r\n            start: Object.assign({}, start),\r\n            end: Object.assign({}, end)\r\n        });\r\n    }\r\n    checkActive(cursorPos) {\r\n        let selectedRange = this.checkCursorSelected(cursorPos);\r\n        if (selectedRange) {\r\n            selectedRange.active = true;\r\n        }\r\n    }\r\n    // 检测光标是否在选中区域范围内\r\n    checkCursorSelected(cursorPos) {\r\n        for (let i = 0; i < this.selectedRanges.length; i++) {\r\n            let selectedRange = this.selectedRanges[i];\r\n            if (Util.comparePos(cursorPos, selectedRange.start) >= 0 &&\r\n                Util.comparePos(cursorPos, selectedRange.end) <= 0) {\r\n                return selectedRange;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // 过滤选中区域\r\n    filterSelectedRanges() {\r\n        let direct = this.checkCursorSelected(this.selectedRanges[0].start);\r\n        let delCurposMap = new Map();\r\n        let preRnage = this.selectedRanges[0];\r\n        direct = direct && 'left' || 'right';\r\n        for (let i = 1; i < this.selectedRanges.length; i++) {\r\n            let nextRange = this.selectedRanges[i];\r\n            if (Util.comparePos(preRnage.end, nextRange) >= 0) { //前后选中区域交叉则合并\r\n                preRnage.end = nextRange.end;\r\n                nextRange.del = true;\r\n                if (direct === 'left') {\r\n                    delCurposMap.set(nextRange.start.line + ',' + nextRange.start.column, true);\r\n                } else {\r\n                    delCurposMap.set(nextRange.end.line + ',' + nextRange.end.column, true);\r\n                }\r\n            } else {\r\n                preRnage = nextRange;\r\n            }\r\n        }\r\n        let selectedRanges = this.selectedRanges.slice();\r\n        this.selectedRanges.empty();\r\n        this.selectedRanges.empty().push(...selectedRanges.filter((item) => {\r\n            return !item.del && Util.comparePos(item.start, item.end) < 0;\r\n        }));\r\n        if (delCurposMap.size) {\r\n            let multiCursorPos = this.multiCursorPos.slice();\r\n            this.multiCursorPos.empty().push(...multiCursorPos.filter((item) => {\r\n                if (delCurposMap.has(item.line + ',' + item.column)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }));\r\n        }\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2022-02-14 11:20:31\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\nconst regs = {\r\n    word: /[a-zA-Z0-9_]/,\r\n    dWord: Util.fullAngleReg,\r\n    space: /\\s/\r\n}\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.initProperties(editor, context);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, editor, [\r\n            'selectedRanges',\r\n            'nowCursorPos',\r\n            'multiCursorPos',\r\n            'setCursorRealPos',\r\n            'setNowCursorPos',\r\n            'getColumnByWidth',\r\n            'getStrWidth'\r\n        ]);\r\n        Util.defineProperties(this, context, ['htmls']);\r\n    }\r\n    clearCursorPos() {\r\n        this.multiCursorPos.map((cursorPos) => {\r\n            cursorPos.del = true;\r\n        });\r\n        this.multiCursorPos.empty();\r\n        this.setNowCursorPos(null);\r\n    }\r\n    // 更新光标位置\r\n    updateCursorPos(cursorPos, line, column, updateAfter) {\r\n        if (updateAfter) {\r\n            this.multiCursorPos.map((item) => {\r\n                _updateAfter(item);\r\n            });\r\n            this.selectedRanges.map((item) => {\r\n                _updateAfter(item.start);\r\n                _updateAfter(item.end);\r\n            });\r\n        }\r\n        if (!cursorPos.del) {\r\n            cursorPos.line = line;\r\n            cursorPos.column = column;\r\n            this.setCursorRealPos(cursorPos);\r\n            this.filterMultiCursorPos();\r\n        }\r\n\r\n        function _updateAfter(item) {\r\n            if (item != cursorPos) {\r\n                if (item.line > cursorPos.line) {\r\n                    item.line += line - cursorPos.line;\r\n                } else if (item.line === cursorPos.line && item.column > cursorPos.column) {\r\n                    item.line += line - cursorPos.line;\r\n                    item.column += column - cursorPos.column;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateAfterCursor(cursorPos, line, column, aftetrList) {\r\n        aftetrList.map((item) => {\r\n            _updateAfter(item);\r\n        });\r\n\r\n        function _updateAfter(item) {\r\n            if (item != cursorPos) {\r\n                if (item.line > cursorPos.line) {\r\n                    item.line += line - cursorPos.line;\r\n                } else if (item.line === cursorPos.line && item.column > cursorPos.column) {\r\n                    item.line += line - cursorPos.line;\r\n                    item.column += column - cursorPos.column;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 添加光标\r\n    addCursorPos(cursorPos) {\r\n        if (this.multiCursorPos.filter((item) => {\r\n                if (Util.comparePos(cursorPos, item) == 0) {\r\n                    cursorPos = item;\r\n                    return true;\r\n                }\r\n                return false;\r\n            }).length > 0) {\r\n            return cursorPos;\r\n        }\r\n        cursorPos = Object.assign({}, cursorPos);\r\n        this.multiCursorPos.push(cursorPos);\r\n        this.multiCursorPos.sort((a, b) => {\r\n            if (a.line == b.line) {\r\n                return a.column - b.column;\r\n            }\r\n            return a.line - b.line;\r\n        });\r\n        this.setNowCursorPos(cursorPos);\r\n        this.setCursorRealPos(cursorPos);\r\n        return cursorPos;\r\n    }\r\n    // 设置光标\r\n    setCursorPos(cursorPos) {\r\n        cursorPos = Object.assign({}, cursorPos);\r\n        if (this.multiCursorPos.length == 1) {\r\n            let pos = this.multiCursorPos[0];\r\n            if (pos.line === cursorPos.line && pos.column === cursorPos.column) {\r\n                return;\r\n            }\r\n        }\r\n        this.multiCursorPos.empty();\r\n        this.multiCursorPos.push(cursorPos);\r\n        this.setNowCursorPos(cursorPos);\r\n        this.setCursorRealPos(cursorPos);\r\n    }\r\n    filterMultiCursorPos() {\r\n        let posMap = {};\r\n        let multiCursorPos = this.multiCursorPos.filter((cursorPos) => {\r\n            let key = cursorPos.line + ',' + cursorPos.column;\r\n            if (posMap[key] || cursorPos.del) {\r\n                return false;\r\n            }\r\n            posMap[key] = true;\r\n            if (this.nowCursorPos && this.nowCursorPos.line === cursorPos.line &&\r\n                this.nowCursorPos.column === this.nowCursorPos.column) {\r\n                this.setNowCursorPos(cursorPos);\r\n            }\r\n            return true;\r\n        });\r\n        this.multiCursorPos.empty();\r\n        this.multiCursorPos.push(...multiCursorPos);\r\n    }\r\n    moveCursor(cursorPos, direct, wholeWord) {\r\n        let text = this.htmls[cursorPos.line - 1].text;\r\n        let line = cursorPos.line;\r\n        let column = cursorPos.column;\r\n        if (direct === 'up') {\r\n            if (line > 1) {\r\n                let width = this.getStrWidth(text, 0, column);\r\n                line--;\r\n                text = this.htmls[line - 1].text;\r\n                column = this.getColumnByWidth(text, width);\r\n            }\r\n        } else if (direct === 'down') {\r\n            if (line < this.htmls.length) {\r\n                let width = this.getStrWidth(text, 0, column);\r\n                line++;\r\n                text = this.htmls[line - 1].text;\r\n                column = this.getColumnByWidth(text, width);\r\n            }\r\n        } else if (direct === 'left') {\r\n            while (column === 0 && line > 1) {\r\n                line--;\r\n                text = this.htmls[line - 1].text;\r\n                column = text.length;\r\n            }\r\n            if (column === 0) {\r\n                this.updateCursorPos(cursorPos, line, column);\r\n                return {\r\n                    line: line,\r\n                    column: column\r\n                }\r\n            }\r\n            if (wholeWord) {\r\n                let sReg = null;\r\n                //过滤开始的空格\r\n                while (column && text[column - 1].match(regs.space)) {\r\n                    column--;\r\n                }\r\n                if (column == 0) {\r\n                    this.updateCursorPos(cursorPos, line, column);\r\n                    return {\r\n                        line: line,\r\n                        column: column\r\n                    }\r\n                }\r\n                if (text[column - 1].match(regs.word)) { //半角文字\r\n                    sReg = regs.word;\r\n                } else if (text[column - 1].match(regs.dWord)) { //全角文字或字符\r\n                    sReg = regs.dWord;\r\n                }\r\n                if (sReg) {\r\n                    while (column && text[column - 1].match(sReg)) {\r\n                        column--\r\n                    }\r\n                } else {\r\n                    while (column &&\r\n                        !text[column - 1].match(regs.space) &&\r\n                        !text[column - 1].match(regs.word) &&\r\n                        !text[column - 1].match(regs.dWord)) {\r\n                        column--\r\n                    }\r\n                }\r\n            } else if (cursorPos.line === line) {\r\n                column--;\r\n            }\r\n        } else {\r\n            while (column === text.length && line < this.htmls.length) {\r\n                line++;\r\n                column = 0;\r\n                text = this.htmls[line - 1].text;\r\n            }\r\n            if (column == text.length) {\r\n                this.updateCursorPos(cursorPos, line, column);\r\n                return {\r\n                    line: line,\r\n                    column: column\r\n                }\r\n            }\r\n            if (wholeWord) {\r\n                let sReg = null;\r\n                //过滤开始的空格\r\n                while (column < text.length && text[column].match(regs.space)) {\r\n                    column++;\r\n                }\r\n                if (column == text.length) {\r\n                    this.updateCursorPos(cursorPos, line, column);\r\n                    return {\r\n                        line: line,\r\n                        column: column\r\n                    }\r\n                }\r\n                if (text[column].match(regs.word)) { //半角文字\r\n                    sReg = regs.word;\r\n                } else if (text[column].match(regs.dWord)) { //全角文字或字符\r\n                    sReg = regs.dWord;\r\n                }\r\n                if (sReg) {\r\n                    while (column < text.length && text[column].match(sReg)) {\r\n                        column++\r\n                    }\r\n                } else {\r\n                    while (column < text.length &&\r\n                        !text[column].match(regs.space) &&\r\n                        !text[column].match(regs.word) &&\r\n                        !text[column].match(regs.dWord)) {\r\n                        column++\r\n                    }\r\n                }\r\n            } else if (cursorPos.line === line) {\r\n                column++;\r\n            }\r\n        }\r\n        this.updateCursorPos(cursorPos, line, column);\r\n        return {\r\n            line: line,\r\n            column: column\r\n        }\r\n    }\r\n}","/*\r\n * @Author: lisong\r\n * @Date: 2021-12-31 15:11:27\r\n * @Description: \r\n */\r\nimport Util from '@/common/Util';\r\nexport default class {\r\n    constructor(editor, context) {\r\n        this.initProperties(editor, context);\r\n    }\r\n    initProperties(editor, context) {\r\n        Util.defineProperties(this, editor, [\r\n            'cursor',\r\n            'insertContent',\r\n            'deleteContent',\r\n            'setSelectedRange'\r\n        ]);\r\n        Util.defineProperties(this, context, ['history']);\r\n    }\r\n    // 撤销操作\r\n    undo() {\r\n        if (this.history.index > 0) {\r\n            let command = this.history[this.history.index - 1];\r\n            this.doCommand(command);\r\n            this.history.index--;\r\n        }\r\n    }\r\n    // 重做操作\r\n    redo() {\r\n        if (this.history.index < this.history.length) {\r\n            let command = this.history[this.history.index];\r\n            this.history.index++;\r\n            this.doCommand(command);\r\n        }\r\n    }\r\n    // 操作命令\r\n    doCommand(command) {\r\n        let commandType = command instanceof Array ? command[0].type : command.type;\r\n        this.cursor.clearCursorPos();\r\n        switch (commandType) {\r\n            case Util.command.DELETE:\r\n                if (command instanceof Array) {\r\n                    let list = command.map((command) => {\r\n                        return {\r\n                            start: command.preCursorPos,\r\n                            end: command.cursorPos\r\n                        };\r\n                    });\r\n                    this.deleteContent(Util.keyCode.BACKSPACE, list, true);\r\n                } else {\r\n                    this.deleteContent(Util.keyCode.BACKSPACE, {\r\n                        start: command.preCursorPos,\r\n                        end: command.cursorPos\r\n                    }, true);\r\n                }\r\n                break;\r\n            case Util.command.INSERT:\r\n                if (command instanceof Array) {\r\n                    let text = [];\r\n                    let cursorPos = [];\r\n                    command.slice().reverse().map((command) => {\r\n                        text.push(command.text);\r\n                        cursorPos.push(command.cursorPos);\r\n                    });\r\n                    this.insertContent(text, cursorPos, {\r\n                        keyCode: command[0].keyCode\r\n                    });\r\n                } else {\r\n                    this.insertContent(command.text, Object.assign({}, command.cursorPos), {\r\n                        keyCode: command.keyCode\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    // 添加历史记录\r\n    pushHistory(command) {\r\n        while (this.history.length > this.history.index) {\r\n            this.history.pop();\r\n        }\r\n        let that = this;\r\n        let lastCommand = this.history[this.history.index - 1];\r\n        command = this.sortComand(command);\r\n        if (lastCommand instanceof Array &&\r\n            command instanceof Array &&\r\n            lastCommand.length === command.length &&\r\n            Date.now() - this.pushHistoryTime < 2000) {\r\n            if (_combCheck(lastCommand[0], command[0])) {\r\n                for (let i = 0; i < lastCommand.length; i++) {\r\n                    _combCommand(lastCommand[i], command[i]);\r\n                }\r\n            } else {\r\n                this.history.push(command);\r\n            }\r\n        } else if (_combCheck(lastCommand, command)) {\r\n            _combCommand(lastCommand, command);\r\n        } else {\r\n            this.history.push(command);\r\n        }\r\n        this.history.index = this.history.length;\r\n        this.pushHistoryTime = Date.now();\r\n\r\n        function _combCheck(lastCommand, command) {\r\n            if (lastCommand && lastCommand.type &&\r\n                lastCommand.type == command.type &&\r\n                command.preCursorPos.line == command.cursorPos.line &&\r\n                Util.comparePos(lastCommand.cursorPos, command.preCursorPos) == 0 &&\r\n                Date.now() - that.pushHistoryTime < 2000) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // 检查两次操作是否可以合并\r\n        function _combCommand(lastCommand, command) {\r\n            if (lastCommand.type === Util.command.DELETE) {\r\n                lastCommand.cursorPos.line += command.cursorPos.line - command.preCursorPos.line;\r\n                lastCommand.cursorPos.column += command.cursorPos.column - command.preCursorPos.column;\r\n            } else {\r\n                lastCommand.cursorPos = command.cursorPos;\r\n                if (command.keyCode === Util.keyCode.DELETE) {\r\n                    lastCommand.text = lastCommand.text + command.text;\r\n                } else {\r\n                    lastCommand.text = command.text + lastCommand.text;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 更新历史记录\r\n    updateHistory(index, command) {\r\n        if (command instanceof Array) {\r\n            command.map((item, _index) => {\r\n                item.keyCode = this.history[index - 1][_index].keyCode;\r\n            });\r\n        } else {\r\n            command.keyCode = this.history[index - 1].keyCode;\r\n        }\r\n        this.history[index - 1] = this.sortComand(command);\r\n    }\r\n    sortComand(command) {\r\n        if (command instanceof Array) {\r\n            command.sort((a, b) => {\r\n                a = a.cursorPos;\r\n                b = b.cursorPos;\r\n                if (a.line === b.line) {\r\n                    return a.column - b.column;\r\n                }\r\n                return a.line - b.line;\r\n            });\r\n        }\r\n        return command;\r\n    }\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"my-editor-status-bar\",style:({height:_vm.height+'px'}),on:{\"contextmenu\":function($event){$event.stopPropagation();$event.preventDefault();}}},[_c('div',{staticClass:\"my-editor-status-left\"},[_c('div',{staticClass:\"my-editor-status-item\"},[_c('span',[_vm._v(\"Line \"+_vm._s(_vm.line)+\", Column \"+_vm._s(_vm.column))])])]),_c('div',{staticClass:\"my-editor-status-right\"},[_c('div',{staticClass:\"my-editor-status-item clickable\",on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.showTabsize.apply(null, arguments)}}},[_c('span',[_vm._v(\"Tab Size:\"+_vm._s(_vm._tabSize))]),_c('panel',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.tabsizeVisible),expression:\"tabsizeVisible\"}],attrs:{\"menuList\":_vm.tabSizeList,\"styles\":{right: 0, bottom: _vm.height+'px'}},on:{\"change\":_vm.onTabsizeChange}})],1),_c('div',{staticClass:\"my-editor-status-item clickable\",on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.showLanguage.apply(null, arguments)}}},[_c('span',[_vm._v(_vm._s(_vm._language))]),_c('panel',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.languageVisible),expression:\"languageVisible\"}],attrs:{\"menuList\":_vm.languageList,\"styles\":{right: 0, bottom: _vm.height+'px'}},on:{\"change\":_vm.onLnaguageChange}})],1)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"my-editor-panel\",style:(_vm.styles),on:{\"mousedown\":function($event){$event.stopPropagation();}}},_vm._l((_vm.menuList),function(group){return _c('div',{staticClass:\"my-editor-menu-group\"},_vm._l((group),function(item){return _c('div',{staticClass:\"my-editor-menu-item\",class:{checked: _vm.checkable && item.checked, disabled: item.disabled},on:{\"mousedown\":function($event){return _vm.onClick(item, group)}}},[_c('div',{staticClass:\"my-editor-menu-content\"},[_vm._v(_vm._s(item.name))]),(item.shortcut)?_c('div',{staticClass:\"my-editor-menu-shortcut\"},[_vm._v(_vm._s(item.shortcut))]):_vm._e()])}),0)}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\r\n * @Author: lisong\r\n * @Date: 2021-12-24 11:00:11\r\n * @Description: \r\n-->\r\n<template>\r\n\t<div :style=\"styles\" @mousedown.stop class=\"my-editor-panel\">\r\n\t\t<div class=\"my-editor-menu-group\" v-for=\"group in menuList\">\r\n\t\t\t<div\r\n\t\t\t\t:class=\"{checked: checkable && item.checked, disabled: item.disabled}\"\r\n\t\t\t\t@mousedown=\"onClick(item, group)\"\r\n\t\t\t\tclass=\"my-editor-menu-item\"\r\n\t\t\t\tv-for=\"item in group\"\r\n\t\t\t>\r\n\t\t\t\t<div class=\"my-editor-menu-content\">{{item.name}}</div>\r\n\t\t\t\t<div class=\"my-editor-menu-shortcut\" v-if=\"item.shortcut\">{{item.shortcut}}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'Panel',\r\n    props: {\r\n        menuList: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        styles: {\r\n            type: Object\r\n        },\r\n        checkable: {\r\n            type: Boolean,\r\n            default: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    created() {\r\n    },\r\n    methods: {\r\n        onClick(item, group) {\r\n            if (item.disabled) {\r\n                return;\r\n            }\r\n            group.map((item) => {\r\n                item.checked = false;\r\n            });\r\n            item.checked = true;\r\n            this.$emit('change', item);\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Panel.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Panel.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Panel.vue?vue&type=template&id=eefcc5a0&\"\nimport script from \"./Panel.vue?vue&type=script&lang=js&\"\nexport * from \"./Panel.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<!--\r\n * @Author: lisong\r\n * @Date: 2021-12-09 21:38:38\r\n * @Description: \r\n-->\r\n<template>\r\n\t<div :style=\"{height:height+'px'}\" @contextmenu.stop.prevent class=\"my-editor-status-bar\">\r\n\t\t<div class=\"my-editor-status-left\">\r\n\t\t\t<div class=\"my-editor-status-item\">\r\n\t\t\t\t<span>Line {{line}}, Column {{column}}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"my-editor-status-right\">\r\n\t\t\t<div @mousedown.stop=\"showTabsize\" class=\"my-editor-status-item clickable\">\r\n\t\t\t\t<span>Tab Size:{{_tabSize}}</span>\r\n\t\t\t\t<panel :menuList=\"tabSizeList\" :styles=\"{right: 0, bottom: height+'px'}\" @change=\"onTabsizeChange\" v-show=\"tabsizeVisible\"></panel>\r\n\t\t\t</div>\r\n\t\t\t<div @mousedown.stop=\"showLanguage\" class=\"my-editor-status-item clickable\">\r\n\t\t\t\t<span>{{_language}}</span>\r\n\t\t\t\t<panel :menuList=\"languageList\" :styles=\"{right: 0, bottom: height+'px'}\" @change=\"onLnaguageChange\" v-show=\"languageVisible\"></panel>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nimport Panel from './Panel';\r\nexport default {\r\n    name: 'StatusBar',\r\n    props: {\r\n        height: {\r\n            type: Number,\r\n            default: 25\r\n        },\r\n        line: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        column: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        language: {\r\n            type: String,\r\n            default: 'JavaScript'\r\n        },\r\n        tabSize: {\r\n            type: Number,\r\n            default: 4\r\n        }\r\n    },\r\n    components: {\r\n        Panel\r\n    },\r\n    data() {\r\n        return {\r\n            _tabSize: 0,\r\n            _language: '',\r\n            tabsizeVisible: false,\r\n            languageVisible: false,\r\n            tabSizeList: [[]],\r\n            languageList: [[{ name: 'JavaScript' }, { name: 'HTML' }, { name: 'CSS' }]]\r\n        }\r\n    },\r\n    created() {\r\n        for (let i = 1; i <= 8; i++) {\r\n            this.tabSizeList[0].push({\r\n                name: `Tab Width：${i}`,\r\n                size: i\r\n            });\r\n        }\r\n        this._tabSize = this.tabSize;\r\n        this._language = this.language;\r\n        this.setDefault();\r\n    },\r\n    methods: {\r\n        setDefault() {\r\n            this.tabSizeList[0].map((item) => {\r\n                item.checked = item.size == this._tabSize;\r\n            });\r\n            this.languageList[0].map((item) => {\r\n                item.checked = item.name == this._language;\r\n            });\r\n        },\r\n        showTabsize() {\r\n            let visible = this.tabsizeVisible;\r\n            this.closeAllPanel();\r\n            this.tabsizeVisible = !visible;\r\n        },\r\n        showLanguage() {\r\n            let visible = this.languageVisible;\r\n            this.closeAllPanel();\r\n            this.languageVisible = !visible;\r\n        },\r\n        closeAllPanel() {\r\n            this.languageVisible = false;\r\n            this.tabsizeVisible = false;\r\n        },\r\n        onTabsizeChange(item) {\r\n            if (this._tabSize != item.size) {\r\n                this._tabSize = item.size;\r\n                this.$emit('update:tabSize', item.size);\r\n            }\r\n            this.tabsizeVisible = false;\r\n        },\r\n        onLnaguageChange(item) {\r\n            if (this._language != item.name) {\r\n                this._language = item.name;\r\n                this.$emit('update:language', item.name);\r\n            }\r\n            this.languageVisible = false;\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StatusBar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StatusBar.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./StatusBar.vue?vue&type=template&id=bc078c04&\"\nimport script from \"./StatusBar.vue?vue&type=script&lang=js&\"\nexport * from \"./StatusBar.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"my-editor-tip\",style:(_vm.styles),on:{\"mousedown\":function($event){$event.stopPropagation();}}},[_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.content)}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\r\n * @Author: lisong\r\n * @Date: 2021-12-24 11:00:11\r\n * @Description: \r\n-->\r\n<template>\r\n\t<div :style=\"styles\" @mousedown.stop class=\"my-editor-tip\">\r\n\t\t<div v-html=\"content\"></div>\r\n\t</div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'Tip',\r\n    props: {\r\n        content: String,\r\n        styles: {\r\n            type: Object\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n        }\r\n    },\r\n    created() {\r\n    },\r\n    methods: {\r\n    }\r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tip.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tip.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tip.vue?vue&type=template&id=187bba82&\"\nimport script from \"./Tip.vue?vue&type=script&lang=js&\"\nexport * from \"./Tip.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n\t<div\r\n\t\t:style=\"{'padding-bottom': _statusHeight}\"\r\n\t\t@contextmenu.prevent=\"onContextmenu\"\r\n\t\t@mousedown=\"onClickEditor\"\r\n\t\t@selectstart.prevent\r\n\t\t@wheel.prevent=\"onWheel\"\r\n\t\tclass=\"my-editor-wrap\"\r\n\t\tref=\"editor\"\r\n\t>\r\n\t\t<!-- 行号 -->\r\n\t\t<div :style=\"{top: _numTop}\" class=\"my-editor-nums\">\r\n\t\t\t<!-- 占位行号，避免行号宽度滚动时变化 -->\r\n\t\t\t<div class=\"my-editor-num\" style=\"visibility:hidden\">{{maxLine}}</div>\r\n\t\t\t<div\r\n\t\t\t\t:class=\"{'my-editor-num-active': _activeLine(line.num)}\"\r\n\t\t\t\t:key=\"line.num\"\r\n\t\t\t\t:style=\"{height:_lineHeight, 'line-height':_lineHeight}\"\r\n\t\t\t\tclass=\"my-editor-num\"\r\n\t\t\t\tv-for=\"line in renderHtmls\"\r\n\t\t\t>\r\n\t\t\t\t<span\r\n\t\t\t\t\t:class=\"[errorMap[line.num]?'my-editor-icon-error':'']\"\r\n\t\t\t\t\t@mouseleave=\"onIconMouseLeave\"\r\n\t\t\t\t\t@mouseover=\"onIconMouseOver(line.num, $event)\"\r\n\t\t\t\t\tclass=\"my-editor-icon my-editor-center\"\r\n\t\t\t\t></span>\r\n\t\t\t\t<span>{{line.num}}</span>\r\n\t\t\t\t<!-- 折叠图标 -->\r\n\t\t\t\t<span\r\n\t\t\t\t\t:class=\"[line.fold=='open'?'my-editor-fold-open':'my-editor-fold-close']\"\r\n\t\t\t\t\t@click=\"onToggleFold(line.num)\"\r\n\t\t\t\t\tclass=\"my-editor-fold my-editor-center\"\r\n\t\t\t\t\tv-if=\"line.fold\"\r\n\t\t\t\t></span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div :style=\"{'box-shadow': _leftShadow}\" class=\"my-editor-content-wrap\">\r\n\t\t\t<!-- 可滚动区域 -->\r\n\t\t\t<div @mousedown=\"onScrollerMdown\" class=\"my-editor-content-scroller\" ref=\"scroller\">\r\n\t\t\t\t<!-- 内如区域 -->\r\n\t\t\t\t<div :style=\"{top: _top, minWidth: _contentMinWidth}\" @selectend.prevent=\"onSelectend\" class=\"my-editor-content\" ref=\"content\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\t:class=\"{active: _activeLine(line.num)}\"\r\n\t\t\t\t\t\t:data-line=\"line.num\"\r\n\t\t\t\t\t\t:id=\"'line_'+line.num\"\r\n\t\t\t\t\t\t:key=\"line.num\"\r\n\t\t\t\t\t\t:style=\"{height:_lineHeight, 'line-height':_lineHeight}\"\r\n\t\t\t\t\t\tclass=\"my-editor-line\"\r\n\t\t\t\t\t\tv-for=\"line in renderHtmls\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<!-- my-editor-select-bg为选中状态 -->\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t:class=\"[line.selected ? 'my-editor-select-bg my-editor-select-active' : '', line.fold == 'close' ? 'fold-close' : '']\"\r\n\t\t\t\t\t\t\t:data-line=\"line.num\"\r\n\t\t\t\t\t\t\tclass=\"my-editor-code\"\r\n\t\t\t\t\t\t\tv-html=\"line.html\"\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t<!-- 选中时的首行背景 -->\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t:class=\"{'my-editor-select-active': range.active}\"\r\n\t\t\t\t\t\t\t:style=\"{left: range.left + 'px', width: range.width + 'px'}\"\r\n\t\t\t\t\t\t\tclass=\"my-editor-line-bg my-editor-select-bg\"\r\n\t\t\t\t\t\t\tv-for=\"range in line.selectStarts\"\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t<!-- 选中时的末行背景 -->\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t:style=\"{left: range.left + 'px', width: range.width + 'px'}\"\r\n\t\t\t\t\t\t\tclass=\"my-editor-line-bg my-editor-select-bg my-editor-select-active\"\r\n\t\t\t\t\t\t\tv-for=\"range in line.selectEnds\"\r\n\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t<span :style=\"{left: _tabLineLeft(tab)}\" class=\"my-editor-tab-line\" v-for=\"tab in line.tabNum\"></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- 模拟光标 -->\r\n\t\t\t\t\t<div :style=\"{height: _lineHeight, top: item.top, left: item.left, visibility: _cursorVisible}\" class=\"my-editor-cursor\" v-for=\"item in multiCursorPos\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!-- 水平滚动条 -->\r\n\t\t\t<div @mousedown.stop @mouseup.stop @scroll=\"onHscroll\" class=\"my-editor-h-scroller-wrap\" ref=\"hScroller\">\r\n\t\t\t\t<div :style=\"{width: _hScrollWidth}\" class=\"my-editor-h-scroller\"></div>\r\n\t\t\t</div>\r\n\t\t\t<!-- 垂直滚动条 -->\r\n\t\t\t<div @mousedown.stop @mouseup.stop @scroll=\"onVscroll\" class=\"my-editor-v-scroller-wrap\" ref=\"vScroller\">\r\n\t\t\t\t<div :style=\"{height: scrollerHeight}\" class=\"my-editor-v-scroller\"></div>\r\n\t\t\t</div>\r\n\t\t\t<!-- 输入框 -->\r\n\t\t\t<textarea\r\n\t\t\t\t:style=\"{top: _textAreaPos.top, left: _textAreaPos.left}\"\r\n\t\t\t\t@blur=\"onBlur\"\r\n\t\t\t\t@compositionend=\"onCompositionend\"\r\n\t\t\t\t@compositionstart=\"onCompositionstart\"\r\n\t\t\t\t@copy.prevent=\"onCopy\"\r\n\t\t\t\t@cut.prevent=\"onCut\"\r\n\t\t\t\t@focus=\"onFocus\"\r\n\t\t\t\t@input=\"onInput\"\r\n\t\t\t\t@keydown=\"onKeyDown\"\r\n\t\t\t\t@paste.prevent=\"onPaste\"\r\n\t\t\t\tclass=\"my-editor-textarea\"\r\n\t\t\t\tref=\"textarea\"\r\n\t\t\t></textarea>\r\n\t\t</div>\r\n\t\t<!-- 状态栏 -->\r\n\t\t<status-bar\r\n\t\t\t:column=\"nowCursorPos.column+1\"\r\n\t\t\t:height=\"statusHeight\"\r\n\t\t\t:language.sync=\"language\"\r\n\t\t\t:line=\"nowCursorPos.line\"\r\n\t\t\t:tabSize.sync=\"tabSize\"\r\n\t\t\tref=\"statusBar\"\r\n\t\t></status-bar>\r\n\t\t<!-- 右键菜单 -->\r\n\t\t<panel :checkable=\"false\" :menuList=\"menuList\" :styles=\"menuStyle\" @change=\"onClickMenu\" ref=\"menu\" v-show=\"menuVisble\"></panel>\r\n\t\t<tip :content=\"tipContent\" :styles=\"tipStyle\" v-show=\"tipContent\"></tip>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport Tokenizer from '@/module/tokenizer/core/index';\r\nimport Lint from '@/module/lint/core/index';\r\nimport Fold from '@/module/fold/index';\r\nimport Search from '@/module/search/index';\r\nimport Select from '@/module/select/index';\r\nimport Cursor from '@/module/cursor/index';\r\nimport History from '@/module/history/index';\r\nimport StatusBar from './StatusBar';\r\nimport Panel from './Panel';\r\nimport Tip from './Tip';\r\nimport Util from '@/common/Util';\r\nimport $ from 'jquery';\r\nconst context = {\r\n    htmls: [],\r\n    folds: [],\r\n    history: [], // 操作历史\r\n    lineIdMap: new Map(), //htmls的唯一标识对象\r\n    renderedIdMap: new Map(), //renderHtmls的唯一标识对象\r\n    renderedLineMap: new Map(), //renderHtmls的唯一标识对象\r\n    foldMap: new Map(), //folds的唯一标识对象\r\n}\r\nconst regs = {\r\n    word: /[a-zA-Z0-9_]/,\r\n    dWord: Util.fullAngleReg,\r\n    space: /\\s/\r\n}\r\nexport default {\r\n    name: 'Home',\r\n    components: {\r\n        StatusBar,\r\n        Panel,\r\n        Tip\r\n    },\r\n    data() {\r\n        return {\r\n            charObj: {\r\n                charWidth: 7.15,\r\n                fullAngleCharWidth: 15,\r\n                charHight: 19,\r\n            },\r\n            nowCursorPos: {\r\n                line: 1,\r\n                column: 0,\r\n                top: 0,\r\n                left: 0,\r\n            },\r\n            multiCursorPos: [],\r\n            cursorVisible: true,\r\n            cursorFocus: true,\r\n            language: 'HTML',\r\n            // language: 'JavaScript',\r\n            // language: 'CSS',\r\n            statusHeight: 23,\r\n            tabSize: 4,\r\n            renderHtmls: [],\r\n            startLine: 1,\r\n            startToEndToken: null,\r\n            top: 0,\r\n            scrollLeft: 0,\r\n            scrollTop: 0,\r\n            maxVisibleLines: 1,\r\n            maxLine: 1,\r\n            scrollerHeight: 'auto',\r\n            scrollerArea: {},\r\n            selectedRanges: [],\r\n            maxWidthObj: {\r\n                lineId: null,\r\n                text: '',\r\n                width: 0\r\n            },\r\n            menuList: [[{\r\n                name: 'Cut',\r\n                op: 'cut',\r\n                shortcut: 'Ctrl+X'\r\n            }, {\r\n                name: 'Copy',\r\n                op: 'copy',\r\n                shortcut: 'Ctrl+C'\r\n            }, {\r\n                name: 'Paste',\r\n                op: 'paste',\r\n                shortcut: 'Ctrl+V'\r\n            }]],\r\n            menuStyle: {\r\n                top: '0px',\r\n                left: '0px',\r\n                'min-width': '200px'\r\n            },\r\n            tipStyle: {\r\n                top: '0px',\r\n                left: '0px'\r\n            },\r\n            errorMap: {},\r\n            menuVisble: false,\r\n            tipContent: false,\r\n            tipContent: '',\r\n        }\r\n    },\r\n    computed: {\r\n        _numTop() {\r\n            return this.top - this.charObj.charHight + 'px';\r\n        },\r\n        _leftShadow() {\r\n            return this.scrollLeft ? '17px 0 16px -16px rgba(0, 0, 0, 0.8) inset' : 'none';\r\n        },\r\n        _top() {\r\n            return this.top + 'px';\r\n        },\r\n        _lineHeight() {\r\n            return this.charObj.charHight + 'px';\r\n        },\r\n        _statusHeight() {\r\n            return this.statusHeight + 4 + 'px';\r\n        },\r\n        _cursorVisible() {\r\n            return this.cursorVisible && this.cursorFocus ? 'visible' : 'hidden';\r\n        },\r\n        _hScrollWidth() {\r\n            return this._contentMinWidth;\r\n        },\r\n        _contentMinWidth() {\r\n            let width = 0;\r\n            if (this.$content) {\r\n                width = Util.getStrExactWidth(this.maxWidthObj.text, this.tabSize, this.$content);\r\n                width += this.charObj.fullAngleCharWidth;\r\n            }\r\n            width = this.scrollerArea.width > width ? this.scrollerArea.width : width;\r\n            return width + 'px';\r\n        },\r\n        _textAreaPos() {\r\n            let left = 0;\r\n            let top = this.top;\r\n            if (this.multiCursorPos.length) {\r\n                let cursorRealPos = this.multiCursorPos.slice().sort((a, b) => {\r\n                    return a.top - b.top;\r\n                })[0];\r\n                left = Util.getNum(cursorRealPos.left);\r\n                top = Util.getNum(cursorRealPos.top) + this.top;\r\n                left -= this.scrollLeft;\r\n                left = left < this.charObj.charWidth ? this.charObj.charWidth : left;\r\n                left = left > this.scrollerArea.width - this.charObj.charWidth ? this.scrollerArea.width - this.charObj.charWidth : left;\r\n                top += this.charObj.charHight;\r\n                if (top > this.scrollerArea.height - 2 * this.charObj.charHight) {\r\n                    top = this.scrollerArea.height - 2 * this.charObj.charHight;\r\n                }\r\n            }\r\n            return {\r\n                top: top + 'px',\r\n                left: left + 'px'\r\n            }\r\n        },\r\n        _tabLineLeft() {\r\n            return (tab) => {\r\n                return (tab - 1) * this.tabSize * this.charObj.charWidth + 'px';\r\n            }\r\n        },\r\n        _activeLine() {\r\n            return (num) => {\r\n                return this.multiCursorPos.length === 1 && this.nowCursorPos.line == num;\r\n            }\r\n        },\r\n        space() {\r\n            return Util.space(this.tabSize);\r\n        }\r\n    },\r\n    watch: {\r\n        language: function (newVal) {\r\n            context.htmls.map((lineObj) => {\r\n                lineObj.tokens = null;\r\n                lineObj.folds = null;\r\n                lineObj.states = null;\r\n                lineObj.html = '';\r\n            });\r\n            this.render();\r\n            this.tokenizer.initLanguage(newVal);\r\n            this.tokenizer.tokenizeVisibleLins();\r\n            this.tokenizer.tokenizeLines(1);\r\n            this.lint.initLanguage(newVal);\r\n        },\r\n        tabSize: function (newVal) {\r\n            this.render();\r\n            this.maxWidthObj = { lineId: null, text: '', width: 0 };\r\n            this.setLineWidth(context.htmls);\r\n        },\r\n        maxLine: function (newVal) {\r\n            this.setScrollerHeight();\r\n        }\r\n    },\r\n    created() {\r\n        window.editor = this;\r\n        window.context = context;\r\n        this.initData();\r\n        this.initEvent();\r\n    },\r\n    mounted() {\r\n        this.$editor = this.$refs.editor;\r\n        this.$scroller = this.$refs.scroller;\r\n        this.$content = this.$refs.content;\r\n        this.$textarea = this.$refs.textarea;\r\n        this.$vScroller = this.$refs.vScroller;\r\n        this.$hScroller = this.$refs.hScroller;\r\n        this.charObj = Util.getCharWidth(this.$content);\r\n        this.maxVisibleLines = Math.ceil(this.$scroller.clientHeight / this.charObj.charHight) + 1;\r\n        this.render();\r\n        this.focus();\r\n    },\r\n    methods: {\r\n        // 初始化数据\r\n        initData() {\r\n            this.lineId = Number.MIN_SAFE_INTEGER;\r\n            context.htmls.push({\r\n                lineId: this.lineId++,\r\n                text: '',\r\n                html: '',\r\n                width: 0,\r\n                tokens: [],\r\n                folds: [],\r\n                states: []\r\n            });\r\n            context.lineIdMap.set(context.htmls[0].lineId, context.htmls[0]);\r\n            this.maxWidthObj.lineId = context.htmls[0].lineId;\r\n            this.multiCursorPos.push(this.nowCursorPos);\r\n            this.tokenizer = new Tokenizer(this, context);\r\n            this.lint = new Lint(this, context);\r\n            this.folder = new Fold(this, context);\r\n            this.history = new History(this, context);\r\n            this.searcher = new Search(this, context);\r\n            this.selecter = new Select(this, context);\r\n            this.cursor = new Cursor(this, context);\r\n        },\r\n        // 初始化文档事件\r\n        initEvent() {\r\n            $(document).on('mousemove', (e) => {\r\n                this.onScrollerMmove(e);\r\n            });\r\n            $(document).on('mouseup', (e) => {\r\n                this.onScrollerMup(e);\r\n            });\r\n        },\r\n        // 显示光标\r\n        showCursor() {\r\n            this.cursorFocus = true;\r\n            if (!this.multiCursorPos.length) {\r\n                this.showCursor.show = false;\r\n                return;\r\n            }\r\n            if (this.showCursor.show) {\r\n                return;\r\n            }\r\n            this.showCursor.show = true;\r\n            this.cursorVisible = true;\r\n            let _timer = () => {\r\n                clearTimeout(this.curserTimer);\r\n                this.curserTimer = setTimeout(() => {\r\n                    this.cursorVisible = !this.cursorVisible;\r\n                    _timer();\r\n                }, 500);\r\n            }\r\n            _timer();\r\n        },\r\n        // 隐藏光标\r\n        hideCursor() {\r\n            clearTimeout(this.curserTimer);\r\n            this.showCursor.show = false;\r\n            this.cursorFocus = false;\r\n        },\r\n        // 聚焦\r\n        focus() {\r\n            this.$textarea.focus();\r\n            setTimeout(() => {\r\n                setTimeout(() => {\r\n                    this.$textarea.focus();\r\n                }, 100);\r\n            }, 100);\r\n        },\r\n        // 渲染\r\n        render() {\r\n            this.renderLine();\r\n            this.renderSelectedBg();\r\n            this.$nextTick(() => {\r\n                this.scrollerArea = {\r\n                    height: this.$scroller.clientHeight,\r\n                    width: this.$scroller.clientWidth,\r\n                }\r\n            });\r\n        },\r\n        // 渲染代码\r\n        renderLine(lineId) {\r\n            let that = this;\r\n            // 只更新一行\r\n            if (lineId) {\r\n                if (context.renderedIdMap.has(lineId)) {\r\n                    let item = context.lineIdMap.get(lineId);\r\n                    let obj = context.renderedIdMap.get(lineId);\r\n                    Object.assign(obj, _getObj(item, obj.num));\r\n                }\r\n                return;\r\n            }\r\n            context.renderedIdMap.clear();\r\n            context.renderedLineMap.clear();\r\n            this.renderHtmls = [];\r\n            for (let i = 0, startLine = this.startLine; i < this.maxVisibleLines && startLine <= context.htmls.length; i++) {\r\n                let lineObj = context.htmls[startLine - 1];\r\n                let lineId = lineObj.lineId;\r\n                let obj = _getObj(lineObj, startLine);\r\n                this.renderHtmls.push(obj);\r\n                context.renderedIdMap.set(lineId, obj);\r\n                context.renderedLineMap.set(startLine, obj);\r\n                if (context.foldMap.has(startLine)) {\r\n                    let fold = context.foldMap.get(startLine);\r\n                    startLine = fold.end.line;\r\n                } else {\r\n                    startLine++;\r\n                }\r\n            }\r\n\r\n            function _getObj(item, line) {\r\n                let selected = false;\r\n                let spaceNum = /^\\s+/.exec(item.text);\r\n                let tabNum = 0;\r\n                let fold = '';\r\n                let selectStarts = [];\r\n                let selectEnds = [];\r\n                if (spaceNum) {\r\n                    tabNum = /\\t+/.exec(spaceNum[0]);\r\n                    tabNum = tabNum && tabNum[0].length || 0;\r\n                    tabNum = tabNum + Math.ceil((spaceNum[0].length - tabNum) / that.tabSize);\r\n                }\r\n                if (context.foldMap.has(line)) { //该行已经折叠\r\n                    fold = 'close';\r\n                } else if (that.folder.getRangeFold(line, true)) { //可折叠\r\n                    fold = 'open';\r\n                }\r\n                let html = item.html || Util.htmlTrans(item.text);\r\n                html = html.replace(/\\t/g, that.space);\r\n                return {\r\n                    html: html,\r\n                    num: line,\r\n                    tabNum: tabNum,\r\n                    selectStarts: selectStarts,\r\n                    selectEnds: selectEnds,\r\n                    selected: selected,\r\n                    fold: fold,\r\n                }\r\n            }\r\n        },\r\n        renderSelectedBg() {\r\n            if (!this.selectedRanges.length) {\r\n                return;\r\n            }\r\n            let multiCursorPosLineMap = new Map();\r\n            this.multiCursorPos.map((item) => {\r\n                if (!multiCursorPosLineMap.has(item.line)) {\r\n                    multiCursorPosLineMap.set(item.line, []);\r\n                }\r\n                multiCursorPosLineMap.get(item.line).push(item);\r\n            });\r\n            this.renderHtmls.map((item) => {\r\n                item.selected = false;\r\n                item.selectStarts = [];\r\n                item.selectEnds = [];\r\n            });\r\n            this.selectedRanges.map((selectedRange) => {\r\n                this._renderSelectedBg(selectedRange, multiCursorPosLineMap);\r\n            });\r\n        },\r\n        // 渲染选中背景\r\n        _renderSelectedBg(selectedRange, multiCursorPosLineMap) {\r\n            let firstLine = this.renderHtmls[0].num;\r\n            let lastLine = this.renderHtmls.peek().num;\r\n            let start = selectedRange.start;\r\n            let end = selectedRange.end;\r\n            let text = context.htmls[start.line - 1].text;\r\n            let active = false;\r\n            start.left = this.getStrWidth(text, 0, start.column);\r\n            if (start.line == end.line) {\r\n                start.width = this.getStrWidth(text, start.column, end.column);\r\n            } else {\r\n                start.width = this.getStrWidth(text, start.column);\r\n                end.left = 0;\r\n                text = context.htmls[end.line - 1].text;\r\n                end.width = this.getStrWidth(text, 0, end.column);\r\n            }\r\n            selectedRange.start = start;\r\n            selectedRange.end = end;\r\n            firstLine = firstLine > start.line + 1 ? firstLine : start.line + 1;\r\n            lastLine = lastLine < end.line - 1 ? lastLine : end.line - 1;\r\n            for (let line = firstLine; line <= lastLine; line++) {\r\n                context.renderedLineMap.get(line).selected = true;\r\n            }\r\n            if (context.renderedLineMap.has(start.line)) {\r\n                active = _checkSelectedActive(selectedRange);\r\n                context.renderedLineMap.get(start.line).selectStarts.push({\r\n                    left: start.left,\r\n                    width: start.width,\r\n                    active: active\r\n\r\n                });\r\n            }\r\n            if (end.line > start.line && context.renderedLineMap.has(end.line)) {\r\n                context.renderedLineMap.get(end.line).selectEnds.push({\r\n                    left: end.left,\r\n                    width: end.width,\r\n                    active: active || _checkSelectedActive(selectedRange)\r\n                });\r\n            }\r\n\r\n            function _checkSelectedActive(selectedRange) {\r\n                let cursorPosList = multiCursorPosLineMap.get(selectedRange.start.line) || [];\r\n                if (end.line > start.line) {\r\n                    for (let i = 0; i < cursorPosList.length; i++) {\r\n                        let item = cursorPosList[i];\r\n                        if (Util.comparePos(item, selectedRange.start) === 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    cursorPosList = multiCursorPosLineMap.get(selectedRange.end.line) || [];\r\n                    for (let i = 0; i < cursorPosList.length; i++) {\r\n                        let item = cursorPosList[i];\r\n                        if (Util.comparePos(item, selectedRange.end) === 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < cursorPosList.length; i++) {\r\n                        let item = cursorPosList[i];\r\n                        if (Util.comparePos(item, selectedRange.start) === 0 ||\r\n                            Util.comparePos(item, selectedRange.end) === 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        // 清除选中背景\r\n        clearRange(cursorPos) {\r\n            this.clearSearch();\r\n            if (!this.selectedRanges.length) {\r\n                return;\r\n            }\r\n            if (cursorPos) {\r\n                this.selectedRanges = this.selectedRanges.filter((selectedRange) => {\r\n                    if (Util.comparePos(cursorPos, selectedRange.start) >= 0 &&\r\n                        Util.comparePos(cursorPos, selectedRange.end) <= 0) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n            } else {\r\n                this.selectedRanges = [];\r\n            }\r\n            this.render();\r\n        },\r\n        insertContent(text, cursorPos, commandObj) {\r\n            let historyArr = [];\r\n            // 如果有选中区域，需要先删除选中区域\r\n            if (this.selectedRanges.filter((item) => { return item.active }).length) {\r\n                this.deleteContent();\r\n            }\r\n            if (cursorPos) {\r\n                if (text instanceof Array) {\r\n                    text.map((item, index) => {\r\n                        let _cursorPos = this.cursor.addCursorPos(cursorPos[index]);\r\n                        let historyObj = this._insertContent(text[index], _cursorPos);\r\n                        historyArr.push(historyObj);\r\n                        if (commandObj.keyCode === Util.keyCode.DELETE) {\r\n                            this.cursor.updateCursorPos(_cursorPos, cursorPos[index].line, cursorPos[index].column);\r\n                        }\r\n                    });\r\n                } else {\r\n                    let _cursorPos = this.cursor.addCursorPos(cursorPos);\r\n                    historyArr = this._insertContent(text, _cursorPos);\r\n                    if (commandObj.keyCode === Util.keyCode.DELETE) {\r\n                        this.cursor.updateCursorPos(_cursorPos, cursorPos.line, cursorPos.column);\r\n                    }\r\n                }\r\n            } else if (this.multiCursorPos.length > 1) {\r\n                let texts = text instanceof Array ? text : text.split(/\\r\\n|\\n/);\r\n                // 多点插入时候，逆序插入\r\n                let multiCursorPos = this.multiCursorPos.slice().reverse();\r\n                if (texts.length === this.multiCursorPos.length) {\r\n                    multiCursorPos.map((cursorPos, index) => {\r\n                        let historyObj = this._insertContent(texts[index], cursorPos);\r\n                        historyArr.push(historyObj);\r\n                    });\r\n                } else {\r\n                    multiCursorPos.map((cursorPos) => {\r\n                        let historyObj = this._insertContent(text, cursorPos);\r\n                        historyArr.push(historyObj);\r\n                    });\r\n                }\r\n            } else {\r\n                historyArr = this._insertContent(text, this.multiCursorPos[0]);\r\n            }\r\n            if (!commandObj) { // 新增历史记录\r\n                this.history.pushHistory(historyArr);\r\n            } else { // 撤销或重做操作后，更新历史记录\r\n                this.history.updateHistory(context.history.index, historyArr);\r\n            }\r\n        },\r\n        // 插入内容\r\n        _insertContent(text, cursorPos) {\r\n            let nowLineText = context.htmls[cursorPos.line - 1].text;\r\n            let originPos = { line: cursorPos.line, column: cursorPos.column };\r\n            let nowColume = cursorPos.column;\r\n            let nowLine = cursorPos.line;\r\n            let newLine = nowLine;\r\n            let newColumn = nowColume;\r\n            this.tokenizer.onInsertContentBefore(nowLine);\r\n            this.lint.onInsertContentBefore(nowLine);\r\n            this.folder.onInsertContentBefore(nowLine);\r\n            text = text.split(/\\r\\n|\\n/);\r\n            text = text.map((item) => {\r\n                item = {\r\n                    lineId: this.lineId++,\r\n                    text: item,\r\n                    html: '',\r\n                    width: 0,\r\n                    tokens: null,\r\n                    folds: null,\r\n                    states: null\r\n                };\r\n                context.lineIdMap.set(item.lineId, item);\r\n                return item;\r\n            });\r\n            if (text.length > 1) { // 插入多行\r\n                newColumn = text[text.length - 1].text.length;\r\n                text[0].text = nowLineText.slice(0, nowColume) + text[0].text;\r\n                text[text.length - 1].text = text[text.length - 1].text + nowLineText.slice(nowColume);\r\n                context.htmls = context.htmls.slice(0, cursorPos.line - 1).concat(text).concat(context.htmls.slice(cursorPos.line));\r\n            } else { // 插入一行\r\n                newColumn += text[0].text.length;\r\n                text[0].text = nowLineText.slice(0, nowColume) + text[0].text + nowLineText.slice(cursorPos.column);\r\n                context.htmls.splice(cursorPos.line - 1, 1, text[0]);\r\n            }\r\n            newLine += text.length - 1;\r\n            this.maxLine = context.htmls.length;\r\n            this.render();\r\n            this.tokenizer.onInsertContentAfter(newLine);\r\n            this.lint.onInsertContentAfter(newLine);\r\n            this.folder.onInsertContentAfter(newLine);\r\n            this.setLineWidth(text);\r\n            if (context.foldMap.has(nowLine) && text.length > 1) {\r\n                this.unFold(nowLine);\r\n            }\r\n            this.cursor.updateCursorPos(cursorPos, newLine, newColumn, true);\r\n            let historyObj = {\r\n                type: Util.command.DELETE,\r\n                cursorPos: {\r\n                    line: newLine,\r\n                    column: newColumn\r\n                },\r\n                preCursorPos: {\r\n                    line: nowLine,\r\n                    column: nowColume\r\n                }\r\n            }\r\n            return historyObj;\r\n        },\r\n        deleteContent(keyCode, rangePos, isCommand) {\r\n            let historyArr = [];\r\n            let cursorPos = null;\r\n            if (rangePos) {\r\n                rangePos = rangePos instanceof Array ? rangePos : [rangePos];\r\n                rangePos.map((item) => {\r\n                    this.selecter.addSelectedRange(item.start, item.end);\r\n                    cursorPos = this.cursor.addCursorPos(item.end);\r\n                    let historyObj = this._deleteContent(cursorPos, keyCode);\r\n                    historyObj.text && historyArr.push(historyObj);\r\n                });\r\n            } else {\r\n                this.multiCursorPos.map((cursorPos) => {\r\n                    let historyObj = this._deleteContent(cursorPos, keyCode);\r\n                    historyObj.text && historyArr.push(historyObj);\r\n                });\r\n            }\r\n            this.setNowCursorPos(this.multiCursorPos[0]);\r\n            this.clearRange();\r\n            historyArr = historyArr.length > 1 ? historyArr : historyArr[0];\r\n            if (!isCommand) { // 新增历史记录\r\n                historyArr && this.history.pushHistory(historyArr);\r\n            } else { // 撤销或重做操作后，更新历史记录\r\n                this.history.updateHistory(context.history.index, historyArr);\r\n            }\r\n        },\r\n        // 删除内容\r\n        _deleteContent(cursorPos, keyCode) {\r\n            let start = null;\r\n            let startObj = context.htmls[cursorPos.line - 1];\r\n            let text = startObj.text;\r\n            let originPos = { line: cursorPos.line, column: cursorPos.column };\r\n            let deleteText = '';\r\n            let rangeUuid = [];\r\n            let newLine = cursorPos.line;\r\n            let newColumn = cursorPos.column;\r\n            let selectedRange = this.selecter.checkCursorSelected(cursorPos);\r\n            this.tokenizer.onDeleteContentBefore(cursorPos.line);\r\n            this.lint.onDeleteContentBefore(cursorPos.line);\r\n            this.folder.onDeleteContentBefore(cursorPos.line);\r\n            if (selectedRange) { // 删除选中区域\r\n                let end = selectedRange.end;\r\n                let endObj = context.htmls[end.line - 1];\r\n                start = selectedRange.start;\r\n                startObj = context.htmls[start.line - 1];\r\n                originPos = { line: end.line, column: end.column };\r\n                text = startObj.text;\r\n                deleteText = this.getRangeText(selectedRange.start, selectedRange.end);\r\n                if (start.line == 1 && end.line == this.maxLine) { //全选删除\r\n                    rangeUuid = [this.maxWidthObj.lineId];\r\n                    context.lineIdMap.clear();\r\n                } else {\r\n                    rangeUuid = context.htmls.slice(start.line - 1, end.line).map((item) => {\r\n                        context.lineIdMap.delete(item.lineId);\r\n                        return item.lineId;\r\n                    });\r\n                }\r\n                context.lineIdMap.set(startObj.lineId, startObj);\r\n                if (start.line == end.line) { // 单行选中\r\n                    text = text.slice(0, start.column) + text.slice(end.column);\r\n                    startObj.text = text;\r\n                } else { // 多行选中\r\n                    text = text.slice(0, start.column);\r\n                    startObj.text = text;\r\n                    text = endObj.text;\r\n                    text = text.slice(end.column);\r\n                    startObj.text += text;\r\n                    context.htmls.splice(start.line, end.line - start.line);\r\n                }\r\n                newLine = start.line;\r\n                newColumn = start.column;\r\n                this.clearRange(cursorPos);\r\n            } else if (Util.keyCode.DELETE == keyCode) { // 向后删除一个字符\r\n                if (cursorPos.column == text.length) { // 光标处于行尾\r\n                    if (cursorPos.line < context.htmls.length) {\r\n                        context.lineIdMap.delete(context.htmls[cursorPos.line].lineId);\r\n                        text = startObj.text + context.htmls[cursorPos.line].text;\r\n                        context.htmls.splice(cursorPos.line, 1);\r\n                        deleteText = '\\n';\r\n                        this.multiCursorPos.map((item) => {\r\n                            if (item.line > cursorPos.line) {\r\n                                if (item.line === cursorPos.line + 1) {\r\n                                    if (item.column === 0) {\r\n                                        item.column = cursorPos.column;\r\n                                    } else {\r\n                                        item.column--;\r\n                                    }\r\n                                }\r\n                                item.line--;\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    deleteText = text[cursorPos.column];\r\n                    text = text.slice(0, cursorPos.column) + text.slice(cursorPos.column + 1);\r\n                    this.multiCursorPos.map((item) => {\r\n                        if (item.line === cursorPos.line && item.column > cursorPos.column) {\r\n                            item.column--;\r\n                        }\r\n                    });\r\n                }\r\n                startObj.text = text;\r\n            } else { // 向前删除一个字符\r\n                if (cursorPos.column == 0) { // 光标处于行首\r\n                    if (cursorPos.line > 1) {\r\n                        let column = context.htmls[cursorPos.line - 2].text.length;\r\n                        context.lineIdMap.delete(context.htmls[cursorPos.line - 2].lineId);\r\n                        text = context.htmls[cursorPos.line - 2].text + text;\r\n                        context.htmls.splice(cursorPos.line - 2, 1);\r\n                        deleteText = '\\n';\r\n                        newLine = cursorPos.line - 1;\r\n                        newColumn = column;\r\n                    }\r\n                } else {\r\n                    deleteText = text[cursorPos.column - 1];\r\n                    text = text.slice(0, cursorPos.column - 1) + text.slice(cursorPos.column);\r\n                    newColumn = cursorPos.column - 1;\r\n                }\r\n                startObj.text = text;\r\n            }\r\n            startObj.width = this.getStrWidth(startObj.text);\r\n            startObj.tokens = null;\r\n            startObj.folds = null;\r\n            startObj.states = null;\r\n            this.maxLine = context.htmls.length;\r\n            this.render(); //必须放在tokenizer前面，renderline(lineId)的时候.obj.num将失效\r\n            this.tokenizer.onDeleteContentAfter(newLine);\r\n            this.lint.onDeleteContentAfter(newLine);\r\n            this.folder.onDeleteContentAfter(newLine);\r\n            this.cursor.updateCursorPos(cursorPos, newLine, newColumn, true);\r\n            // 更新最大文本宽度\r\n            if (startObj.width >= this.maxWidthObj.width) {\r\n                this.maxWidthObj = {\r\n                    lineId: startObj.lineId,\r\n                    text: startObj.text,\r\n                    width: startObj.width\r\n                }\r\n            } else if (rangeUuid.indexOf(this.maxWidthObj.lineId) > -1) {\r\n                this.setMaxWidth();\r\n            }\r\n            let historyObj = {\r\n                type: Util.command.INSERT,\r\n                cursorPos: {\r\n                    line: cursorPos.line,\r\n                    column: cursorPos.column\r\n                },\r\n                preCursorPos: {\r\n                    line: originPos.line,\r\n                    column: originPos.column\r\n                },\r\n                keyCode: keyCode,\r\n                text: deleteText\r\n            };\r\n            return historyObj;\r\n        },\r\n        // 向下复制一行\r\n        copyNext() {\r\n            let copyedLineMap = {};\r\n            let cursorPosList = [];\r\n            let texts = [];\r\n            this.multiCursorPos.reverse().slice().map((cursorPos) => {\r\n                if (!copyedLineMap[cursorPos.line]) {\r\n                    cursorPosList.push([cursorPos, cursorPos.column]);\r\n                }\r\n            });\r\n            cursorPosList.map((item) => {\r\n                let cursorPos = item[0];\r\n                let text = context.htmls[cursorPos.line - 1].text;\r\n                texts.push('\\n' + text);\r\n                cursorPos.column = text.length;\r\n            });\r\n            this.insertContent(texts, cursorPosList.map((item) => { return item[0] }));\r\n            cursorPosList.map((item) => {\r\n                item[0].column = item[1];\r\n                this.setCursorRealPos(item[0]);\r\n            });\r\n        },\r\n        // 折叠行\r\n        foldLine(line) {\r\n            let resultFold = this.folder.foldLine(line);\r\n            this.focus();\r\n            if (resultFold) {\r\n                this.multiCursorPos.map((cursorPos) => {\r\n                    if (cursorPos.line > line && cursorPos.line < resultFold.end.line) {\r\n                        let lineObj = context.htmls[line - 1];\r\n                        this.cursor.updateCursorPos(cursorPos, line, lineObj.text.length);\r\n                    }\r\n                });\r\n                this.forceCursorView = false;\r\n                this.setCursorRealPos();\r\n                this.setScrollerHeight();\r\n                this.render();\r\n            }\r\n        },\r\n        // 展开折叠行\r\n        unFold(line) {\r\n            this.focus();\r\n            if (this.folder.unFold(line)) {\r\n                this.forceCursorView = false;\r\n                this.setCursorRealPos();\r\n                this.setScrollerHeight();\r\n                this.render();\r\n            }\r\n        },\r\n        search() {\r\n            let searchObj = this.getToSearchObj();\r\n            let resultObj = null;\r\n            let hasCache = this.searcher.hasCache();\r\n            if (!searchObj.text) {\r\n                return;\r\n            }\r\n            resultObj = this.searcher.search(searchObj.text, searchObj);\r\n            if (resultObj && resultObj.result) {\r\n                if (!this.selectedRanges.length) {\r\n                    this.cursor.setCursorPos(resultObj.result.end);\r\n                } else {\r\n                    this.cursor.addCursorPos(resultObj.result.end);\r\n                }\r\n                if (!hasCache) {\r\n                    resultObj.list.map((rangePos) => {\r\n                        this.selecter.addSelectedRange(rangePos.start, rangePos.end);\r\n                    });\r\n                } else {\r\n                    this.selecter.checkActive(resultObj.result.end, true);\r\n                }\r\n                this.renderSelectedBg();\r\n            }\r\n        },\r\n        clearSearch() {\r\n            this.searcher.clearCache();\r\n            this.getToSearchObj.searchObj = null;\r\n        },\r\n        setNowCursorPos(nowCursorPos) {\r\n            this.nowCursorPos = nowCursorPos;\r\n        },\r\n        // 设置真实光标位置\r\n        setCursorRealPos(cursorPos) {\r\n            let that = this;\r\n            if (!cursorPos) {\r\n                this.multiCursorPos.map((cursorPos) => {\r\n                    _deleySet(cursorPos);\r\n                });\r\n            } else {\r\n                _deleySet(cursorPos);\r\n            }\r\n            this.cursorVisible = true;\r\n\r\n            function _deleySet(cursorPos) {\r\n                that.$nextTick(() => {\r\n                    !cursorPos.del && _setCursorRealPos(cursorPos);\r\n                });\r\n            }\r\n\r\n            function _setCursorRealPos(cursorPos) {\r\n                let left = 0;\r\n                let lineObj = context.htmls[cursorPos.line - 1];\r\n                if ($('#line_' + cursorPos.line).length && lineObj.tokens && lineObj.tokens.length) {\r\n                    left = _getExactLeft(cursorPos);\r\n                } else {\r\n                    left = that.getStrWidthByLine(cursorPos.line, 0, cursorPos.column);\r\n                }\r\n                let top = (that.folder.getRelativeLine(cursorPos.line) - that.folder.getRelativeLine(that.startLine)) * that.charObj.charHight;\r\n                let relTop = that.folder.getRelativeLine(cursorPos.line) * that.charObj.charHight;\r\n                // 强制滚动使光标处于可见区域\r\n                if (that.forceCursorView !== false && cursorPos === that.nowCursorPos) {\r\n                    if (relTop > that.scrollTop + that.scrollerArea.height - that.charObj.charHight) {\r\n                        that.$vScroller.scrollTop = relTop + that.charObj.charHight - that.scrollerArea.height;\r\n                    } else if (top < 0 || top == 0 && that.top < 0) {\r\n                        that.$vScroller.scrollTop = (cursorPos.line - 1) * that.charObj.charHight;\r\n                    }\r\n                    if (left > that.scrollerArea.width + that.scrollLeft - that.charObj.fullAngleCharWidth) {\r\n                        that.$hScroller.scrollLeft = left + that.charObj.fullAngleCharWidth - that.scrollerArea.width;\r\n                    } else if (left < that.scrollLeft) {\r\n                        that.$hScroller.scrollLeft = left - 1;\r\n                    }\r\n                }\r\n                requestAnimationFrame(() => {\r\n                    that.forceCursorView = true;\r\n                });\r\n                cursorPos.top = top + 'px';\r\n                cursorPos.left = left + 'px';\r\n                that.multiCursorPos.splice();\r\n            }\r\n\r\n            function _getExactLeft(cursorPos) {\r\n                let lineObj = context.htmls[cursorPos.line - 1];\r\n                let token = lineObj.tokens[0];\r\n                for (let i = 1; i < lineObj.tokens.length; i++) {\r\n                    if (lineObj.tokens[i].column < cursorPos.column) {\r\n                        token = lineObj.tokens[i];\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                let $token = $('#line_' + cursorPos.line).children('.my-editor-code').children('span[data-column=\"' + token.column + '\"]');\r\n                let text = token.value.slice(0, cursorPos.column - token.column);\r\n                return $token[0].offsetLeft + that.getStrWidth(text);\r\n            }\r\n        },\r\n        // 获取最大宽度\r\n        setMaxWidth() {\r\n            let maxWidthObj = { line: context.htmls[0].lineId, width: 0 };\r\n            context.htmls.map((item) => {\r\n                if (item.width > maxWidthObj.width) {\r\n                    maxWidthObj = {\r\n                        lineId: item.lineId,\r\n                        text: item.text,\r\n                        width: item.width\r\n                    }\r\n                }\r\n            });\r\n            this.maxWidthObj = maxWidthObj;\r\n        },\r\n        /**\r\n         * 设置每行文本的宽度\r\n         * @param {Array} texts\r\n         */\r\n        setLineWidth(texts) {\r\n            let index = 0;\r\n            let that = this;\r\n            let startTime = Date.now();\r\n            clearTimeout(this.setLineWidth.timer);\r\n            _setLineWidth();\r\n\r\n            function _setLineWidth() {\r\n                while (index < texts.length) {\r\n                    let lineObj = texts[index];\r\n                    if (context.lineIdMap.has(lineObj.lineId)) {\r\n                        let width = that.getStrWidth(lineObj.text);\r\n                        lineObj.width = width;\r\n                        if (width > that.maxWidthObj.width) {\r\n                            that.maxWidthObj = {\r\n                                lineId: lineObj.lineId,\r\n                                text: lineObj.text,\r\n                                width: width\r\n                            }\r\n                        }\r\n                    }\r\n                    index++;\r\n                    if (Date.now() - startTime > 20) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (index < texts.length) {\r\n                    that.setLineWidth.timer = setTimeout(() => {\r\n                        _setLineWidth();\r\n                    }, 20);\r\n                }\r\n            }\r\n        },\r\n        // 设置滚动区域真实高度\r\n        setScrollerHeight() {\r\n            let maxLine = context.htmls.length;\r\n            maxLine = this.folder.getRelativeLine(maxLine);\r\n            this.scrollerHeight = maxLine * this.charObj.charHight + 'px';\r\n        },\r\n        /**\r\n         * 设置选中区域\r\n         * @param {Object} start\r\n         * @param {Object} end\r\n         */\r\n        setSelectedRange(start, end) {\r\n            let same = Util.comparePos(start, end);\r\n            if (same > 0) {\r\n                let tmp = start;\r\n                start = end;\r\n                end = tmp;\r\n            } else if (!same) {\r\n                return;\r\n            }\r\n            this.clearRange();\r\n            this.selectedRanges = [{\r\n                start: start,\r\n                end: end,\r\n                active: true\r\n            }];\r\n        },\r\n        setErrorMap(errorMap) {\r\n            this.errorMap = errorMap;\r\n        },\r\n        // 获取文本在浏览器中的宽度\r\n        getStrWidth(str, start, end) {\r\n            return Util.getStrWidth(str, this.charObj.charWidth, this.charObj.fullAngleCharWidth, this.tabSize, start, end);\r\n        },\r\n        // 获取行对应的文本在浏览器中的宽度\r\n        getStrWidthByLine(line, start, end) {\r\n            return this.getStrWidth(context.htmls[line - 1].text, start, end);\r\n        },\r\n        // 根据文本宽度计算当前列号\r\n        getColumnByWidth(text, offsetX) {\r\n            let left = 0, right = text.length;\r\n            let mid, width, w1, w2;\r\n            while (left < right) {\r\n                mid = Math.floor((left + right) / 2);\r\n                width = this.getStrWidth(text, 0, mid);\r\n                w1 = text[mid - 1] && this.getStrWidth(text[mid - 1]) / 2;\r\n                w2 = text[mid] && this.getStrWidth(text[mid]) / 2 || w1;\r\n                if (width >= offsetX && width - offsetX < w1 || offsetX >= width && offsetX - width < w2) {\r\n                    left = mid;\r\n                    break;\r\n                } else if (width > offsetX) {\r\n                    right = mid;\r\n                } else {\r\n                    left = mid + 1;\r\n                }\r\n            }\r\n            return left;\r\n        },\r\n        // 根据鼠标事件对象获取行列坐标\r\n        getPosByEvent(e) {\r\n            let that = this;\r\n            let $target = $(e.target);\r\n            if ($target.attr('data-line') || $target.attr('data-column')) {\r\n                return _getExactPos(e);\r\n            }\r\n            let $scroller = $(this.$scroller);\r\n            let offset = $scroller.offset();\r\n            let column = 0;\r\n            let clientX = e.clientX < 0 ? 0 : e.clientX;\r\n            let clientY = e.clientY < 0 ? 0 : e.clientY;\r\n            let line = Math.ceil((clientY + this.scrollTop - offset.top) / this.charObj.charHight) || 1;\r\n            line = this.folder.getRealLine(line);\r\n            if (line > context.htmls.length) {\r\n                line = context.htmls.length;\r\n                column = context.htmls[line - 1].text.length;\r\n            } else {\r\n                column = this.getColumnByWidth(context.htmls[line - 1].text, clientX + this.scrollLeft - offset.left);\r\n            }\r\n            return {\r\n                line: line,\r\n                column: column\r\n            }\r\n\r\n            function _getExactPos(e) {\r\n                let $target = $(e.target);\r\n                let line = $target.attr('data-line') - 0;\r\n                let column = $target.attr('data-column');\r\n                if (!line) {\r\n                    line = $target.parent().attr('data-line') - 0;\r\n                }\r\n                let lineObj = context.htmls[line - 1];\r\n                if (!column) {\r\n                    column = lineObj.text.length;\r\n                } else {\r\n                    column = column - 0;\r\n                    for (let i = 0; i < lineObj.tokens.length; i++) {\r\n                        if (lineObj.tokens[i].column == column) {\r\n                            column += that.getColumnByWidth(lineObj.tokens[i].value, e.offsetX);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    line: line,\r\n                    column: column\r\n                }\r\n            }\r\n        },\r\n        // 获取选中范围内的文本\r\n        getRangeText(start, end) {\r\n            var text = context.htmls[start.line - 1].text;\r\n            if (start.line != end.line) {\r\n                let arr = [];\r\n                text = text.slice(start.column);\r\n                arr = context.htmls.slice(start.line, end.line - 1);\r\n                arr = arr.map((item) => {\r\n                    return item.text;\r\n                });\r\n                text += arr.length ? '\\n' + arr.join('\\n') : '';\r\n                text += '\\n' + context.htmls[end.line - 1].text.slice(0, end.column);\r\n            } else {\r\n                text = text.slice(start.column, end.column);\r\n            }\r\n            return text;\r\n        },\r\n        // 获取待复制的文本\r\n        getCopyText(cut) {\r\n            let text = '';\r\n            this.multiCursorPos.map((cursorPos) => {\r\n                let str = '';\r\n                let selectedRange = this.selecter.checkCursorSelected(cursorPos);\r\n                if (selectedRange) {\r\n                    str = this.getRangeText(selectedRange.start, selectedRange.end);\r\n                    if (cut) {\r\n                        this.deleteContent();\r\n                    }\r\n                } else {\r\n                    str = context.htmls[cursorPos.line - 1].text;\r\n                    if (cut) {\r\n                        str && this.selecter.addSelectedRange({ line: cursorPos.line, column: 0 }, { line: cursorPos.line, column: str.length });\r\n                        str && this.deleteContent();\r\n                    }\r\n                }\r\n                text += '\\n' + str;\r\n            });\r\n            return text.slice(1);\r\n        },\r\n        // 获取待搜索的文本\r\n        getToSearchObj() {\r\n            if (this.getToSearchObj.searchObj) {\r\n                return this.getToSearchObj.searchObj;\r\n            }\r\n            let selectedRange = this.selecter.checkCursorSelected(this.nowCursorPos);\r\n            let wholeWord = false;\r\n            let searchText = '';\r\n            if (selectedRange) {\r\n                searchText = this.getRangeText(selectedRange.start, selectedRange.end);\r\n            } else {\r\n                let text = context.htmls[this.nowCursorPos.line - 1].text;\r\n                let str = '';\r\n                let index = this.nowCursorPos.column;\r\n                let sReg = regs.word;\r\n                if (index && text[index - 1].match(regs.dWord)) {\r\n                    sReg = regs.dWord;\r\n                }\r\n                while (index > 0 && text[index - 1].match(sReg)) {\r\n                    str = text[index - 1] + str;\r\n                    index--;\r\n                }\r\n                index = this.nowCursorPos.column;\r\n                while (index < text.length && text[index].match(sReg)) {\r\n                    str += text[index];\r\n                    index++;\r\n                }\r\n                wholeWord = true;\r\n                searchText = str;\r\n            }\r\n            this.getToSearchObj.searchObj = {\r\n                text: searchText,\r\n                wholeWord: wholeWord\r\n            }\r\n            return this.getToSearchObj.searchObj;\r\n        },\r\n        // 右键菜单事件\r\n        onContextmenu(e) {\r\n            let panelWidth = 0;\r\n            let panelHeight = 0;\r\n            let $editor = $(this.$editor);\r\n            let offset = $editor.offset();\r\n            this.menuVisble = true;\r\n            this.$nextTick(() => {\r\n                panelWidth = this.$refs.menu.$el.clientWidth;\r\n                panelHeight = this.$refs.menu.$el.clientHeight;\r\n                if (panelHeight + e.clientY > offset.top + this.scrollerArea.height) {\r\n                    this.menuStyle.top = e.clientY - offset.top - panelHeight + 'px';\r\n                } else {\r\n                    this.menuStyle.top = e.clientY - offset.top + 'px';\r\n                }\r\n                if (panelWidth + e.clientX > offset.left + $editor[0].clientWidth) {\r\n                    this.menuStyle.left = e.clientX - offset.left - panelWidth + 'px';\r\n                } else {\r\n                    this.menuStyle.left = e.clientX - offset.left + 'px';\r\n                }\r\n            });\r\n        },\r\n        // 选中菜单\r\n        onClickMenu(menu) {\r\n            switch (menu.op) {\r\n                case 'cut':\r\n                case 'copy':\r\n                    Util.writeClipboard(this.getCopyText(menu.op === 'cut'));\r\n                    break;\r\n                case 'paste':\r\n                    this.$textarea.focus();\r\n                    Util.readClipboard().then((text) => {\r\n                        this.insertContent(text);\r\n                    });\r\n                    break;\r\n            }\r\n            this.menuVisble = false;\r\n            this.focus();\r\n        },\r\n        // 提示图标hover事件\r\n        onIconMouseOver(line, e) {\r\n            let $editor = $(this.$editor);\r\n            let offset = $editor.offset();\r\n            this.tipStyle = {\r\n                left: e.clientX - offset.left + 10 + 'px',\r\n                top: e.clientY - offset.top + 10 + 'px'\r\n            }\r\n            this.tipContent = this.errorMap[line];\r\n        },\r\n        onIconMouseLeave() {\r\n            this.tipContent = '';\r\n        },\r\n        // 折叠/展开\r\n        onToggleFold(line) {\r\n            if (context.foldMap.has(line)) {\r\n                this.unFold(line);\r\n                return;\r\n            } else {\r\n                this.foldLine(line);\r\n            }\r\n        },\r\n        // 点击编辑器\r\n        onClickEditor() {\r\n            this.$refs.statusBar.closeAllPanel();\r\n            this.menuVisble = false;\r\n        },\r\n        // 滚动区域鼠标按下事件\r\n        onScrollerMdown(e) {\r\n            if (e.which == 3) { //右键\r\n                return;\r\n            }\r\n            let pos = this.getPosByEvent(e);\r\n            this.cursor.setCursorPos(pos);\r\n            this.focus();\r\n            this.mouseStartObj = {\r\n                time: Date.now(),\r\n                start: pos\r\n            }\r\n        },\r\n        // 鼠标移动事件\r\n        onScrollerMmove(e) {\r\n            let that = this;\r\n            if (this.mouseStartObj && Date.now() - this.mouseStartObj.time > 100) {\r\n                var offset = $(this.$scroller).offset();\r\n                let end = this.getPosByEvent(e);\r\n                this.setSelectedRange(Object.assign({}, this.mouseStartObj.start), end);\r\n                this.cursor.setCursorPos(end);\r\n                this.renderSelectedBg();\r\n                cancelAnimationFrame(this.selectMoveTimer);\r\n                if (e.clientY > offset.top + this.scrollerArea.height) { //鼠标超出底部区域\r\n                    _move('down', e.clientY - offset.top - this.scrollerArea.height);\r\n                } else if (e.clientY < offset.top) { //鼠标超出顶部区域\r\n                    _move('up', offset.top - e.clientY);\r\n                } else if (e.clientX < offset.left) { //鼠标超出左边区域\r\n                    _move('left', offset.left - e.clientX);\r\n                } else if (e.clientX > offset.left + this.scrollerArea.width) { //鼠标超出右边区域\r\n                    _move('right', e.clientX - offset.left - this.scrollerArea.width);\r\n                }\r\n            }\r\n            function _move(autoDirect, speed) {\r\n                let originLine = that.nowCursorPos.line;\r\n                let originColumn = that.nowCursorPos.column;\r\n                let count = 0; // 累计滚动距离\r\n                _run(autoDirect, speed);\r\n\r\n                function _run(autoDirect, speed) {\r\n                    let line = originLine;\r\n                    let column = originColumn;\r\n                    switch (autoDirect) {\r\n                        case 'up':\r\n                            count += speed;\r\n                            line = Math.floor(count / that.charObj.charHight);\r\n                            line = originLine - line;\r\n                            break;\r\n                        case 'down':\r\n                            count += speed;\r\n                            line = Math.floor(count / that.charObj.charHight);\r\n                            line = originLine + line;\r\n                            break;\r\n                        case 'left':\r\n                            count += speed;\r\n                            column = Math.floor(count / that.charObj.charWidth);\r\n                            column = originColumn - column;\r\n                            break;\r\n                        case 'right':\r\n                            count += speed;\r\n                            column = Math.floor(count / that.charObj.charWidth);\r\n                            column = originColumn + column;\r\n                            break;\r\n                    }\r\n                    line = line < 1 ? 1 : (line > context.htmls.length ? context.htmls.length : line);\r\n                    column = column < 0 ? 0 : (column > context.htmls[originLine - 1].text.length ? context.htmls[originLine - 1].text.length : column);\r\n                    that.cursor.setCursorPos({ line: line, column: column });\r\n                    that.setSelectedRange(that.mouseStartObj.start, { line: line, column: column });\r\n                    that.renderSelectedBg();\r\n                    that.selectMoveTimer = requestAnimationFrame(() => {\r\n                        _run(autoDirect, speed)\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        // 鼠标抬起事件\r\n        onScrollerMup(e) {\r\n            let end = this.getPosByEvent(e);\r\n            // 按下到抬起的间隔大于100ms，属于选中结束事件\r\n            if (this.mouseStartObj && Date.now() - this.mouseStartObj.time > 100 &&\r\n                Util.comparePos(this.mouseStartObj.start, end) != 0) {\r\n                this.setSelectedRange(this.mouseStartObj.start, end);\r\n                this.cursor.setCursorPos(end);\r\n                this.renderSelectedBg();\r\n            } else if (e.which != 3) {\r\n                this.clearRange();\r\n                if (this.mouseUpTime && Date.now() - this.mouseUpTime < 300) { //双击选中单词\r\n                    this.search();\r\n                }\r\n            }\r\n            // 停止滚动选中\r\n            cancelAnimationFrame(this.selectMoveTimer);\r\n            this.mouseStartObj = null;\r\n            this.mouseUpTime = Date.now();\r\n        },\r\n        // 左右滚动事件\r\n        onHscroll(e) {\r\n            this.scrollLeft = e.target.scrollLeft;\r\n            this.$scroller.scrollLeft = this.scrollLeft;\r\n            this.forceCursorView = false;\r\n        },\r\n        // 上下滚动事件\r\n        onVscroll(e) {\r\n            let startLine = 1;\r\n            this.scrollTop = e.target.scrollTop;\r\n            startLine = Math.floor(this.scrollTop / this.charObj.charHight);\r\n            startLine++;\r\n            this.startLine = this.folder.getRealLine(startLine);\r\n            this.top = -this.scrollTop % this.charObj.charHight;\r\n            this.forceCursorView = false;\r\n            this.tokenizer.onScroll();\r\n            this.render();\r\n            this.setCursorRealPos();\r\n        },\r\n        // 滚动滚轮\r\n        onWheel(e) {\r\n            this.$vScroller.scrollTop = this.scrollTop + e.deltaY;\r\n            this.$hScroller.scrollLeft = this.scrollLeft + e.deltaX;\r\n        },\r\n        // 中文输入开始\r\n        onCompositionstart() {\r\n            clearTimeout(this.compositionendTimer);\r\n            this.compositionstart = true;\r\n        },\r\n        // 中文输入结束\r\n        onCompositionend() {\r\n            if (this.compositionstart) {\r\n                let text = this.$textarea.value || '';\r\n                if (text) {\r\n                    this.insertContent(text);\r\n                    this.$textarea.value = '';\r\n                }\r\n            }\r\n            //避免有些浏览器compositionend在input事件之前触发的bug\r\n            this.compositionendTimer = setTimeout(() => {\r\n                this.compositionstart = false;\r\n            }, 100);\r\n        },\r\n        // 输入事件\r\n        onInput() {\r\n            if (!this.compositionstart) {\r\n                let text = this.$textarea.value || '';\r\n                if (text) {\r\n                    this.insertContent(text);\r\n                    this.$textarea.value = '';\r\n                }\r\n            }\r\n        },\r\n        // 复制事件\r\n        onCopy(e) {\r\n            let mime = window.clipboardData ? \"Text\" : \"text/plain\";\r\n            let clipboardData = e.clipboardData || window.clipboardData;\r\n            clipboardData.setData(mime, this.getCopyText());\r\n        },\r\n        onCut(e) {\r\n            let mime = window.clipboardData ? \"Text\" : \"text/plain\";\r\n            let clipboardData = e.clipboardData || window.clipboardData;\r\n            clipboardData.setData(mime, this.getCopyText(true));\r\n        },\r\n        // 粘贴事件\r\n        onPaste(e) {\r\n            let mime = window.clipboardData ? \"Text\" : \"text/plain\";\r\n            let clipboardData = e.clipboardData || window.clipboardData;\r\n            let copyText = '';\r\n            copyText = clipboardData.getData(mime);\r\n            this.insertContent(copyText);\r\n        },\r\n        // 获得焦点\r\n        onFocus() {\r\n            clearTimeout(this.onBlur.timer);\r\n            this.showCursor();\r\n        },\r\n        // 失去焦点\r\n        onBlur() {\r\n            this.onBlur.timer = setTimeout(() => {\r\n                this.hideCursor();\r\n            }, 300);\r\n        },\r\n        // 键盘按下事件\r\n        onKeyDown(e) {\r\n            let that = this;\r\n            if (e.ctrlKey && e.shiftKey) {\r\n                switch (e.keyCode) {\r\n                    case 37: //ctrl+shift+left\r\n                        this.selecter.select('left', true);\r\n                        break;\r\n                    case 38: //ctrl+shift+up\r\n                        break;\r\n                    case 39: //ctrl+shift+right\r\n                        this.selecter.select('right', true);\r\n                        break;\r\n                    case 40: //ctrl+shift+down\r\n                        break;\r\n                    case 68: //ctrl+shift+d\r\n                        this.copyNext();\r\n                        break;\r\n                }\r\n                return false;\r\n            } else if (e.ctrlKey) {\r\n                switch (e.keyCode) {\r\n                    case 37: //left arrow\r\n                        _moveCursor('left', true);\r\n                        this.clearRange();\r\n                        break;\r\n                    case 39: //right arrow\r\n                        _moveCursor('right', true);\r\n                        this.clearRange();\r\n                        break;\r\n                    case 65://ctrl+a,全选\r\n                        e.preventDefault();\r\n                        let end = { line: context.htmls.length, column: context.htmls.peek().text.length };\r\n                        this.setSelectedRange({ line: 1, column: 0 }, end);\r\n                        this.forceCursorView = false;\r\n                        this.cursor.setCursorPos(end);\r\n                        this.renderSelectedBg();\r\n                        break;\r\n                    case 68: //ctrl+d，搜素\r\n                        e.preventDefault();\r\n                        this.search();\r\n                        break;\r\n                    case 90: //ctrl+z，撤销\r\n                    case 122:\r\n                        e.preventDefault();\r\n                        this.history.undo();\r\n                        break;\r\n                    case 89: //ctrl+y，重做\r\n                    case 121:\r\n                        e.preventDefault();\r\n                        this.history.redo();\r\n                        break;\r\n                }\r\n            } else if (e.shiftKey) {\r\n                switch (e.keyCode) {\r\n                    case 37: //left arrow\r\n                        this.selecter.select('left');\r\n                        break;\r\n                    case 38: //up arrow\r\n                        this.selecter.select('up');\r\n                        break;\r\n                    case 39: //right arrow\r\n                        this.selecter.select('right');\r\n                        break;\r\n                    case 40: //down arrow\r\n                        this.selecter.select('down');\r\n                        break;\r\n                }\r\n            } else {\r\n                switch (e.keyCode) {\r\n                    case 9: //tab键\r\n                        e.preventDefault();\r\n                        this.insertContent('\\t');\r\n                        break;\r\n                    case 37: //left arrow\r\n                        _moveCursor('left');\r\n                        this.clearRange();\r\n                        break;\r\n                    case 38: //up arrow\r\n                        _moveCursor('up');\r\n                        this.clearRange();\r\n                        break;\r\n                    case 39: //right arrow\r\n                        _moveCursor('right');\r\n                        this.clearRange();\r\n                        break;\r\n                    case 40: //down arrow\r\n                        _moveCursor('down');\r\n                        this.clearRange();\r\n                        break;\r\n                    case Util.keyCode.DELETE: //delete\r\n                        this.deleteContent(Util.keyCode.DELETE);\r\n                        break;\r\n                    case Util.keyCode.BACKSPACE: //backspace\r\n                        this.deleteContent(Util.keyCode.BACKSPACE);\r\n                        break;\r\n                }\r\n                this.cursor.filterMultiCursorPos();\r\n            }\r\n\r\n            function _moveCursor(direct, wholeWord) {\r\n                //ctrl+d后，第一次移动光标只是取消选中状态\r\n                if (!that.selecter.checkCursorSelected(that.nowCursorPos)) {\r\n                    that.multiCursorPos.map((cursorPos) => {\r\n                        that.cursor.moveCursor(cursorPos, direct, wholeWord);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=71dc479f&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport Home from './components/Home.vue';\r\n\r\nVue.use(Router)\r\n\r\nvar router = new Router({\r\n    routes: [{\r\n            path: '/home',\r\n            name: 'Home',\r\n            component: Home,\r\n            meta: {\r\n                title: 'my-editor'\r\n            }\r\n        },\r\n        {\r\n            path: '*',\r\n            redirect: '/home'\r\n        }\r\n    ]\r\n})\r\n\r\nexport default router;","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport './scss/editor.scss'\r\nimport './scss/highlight/js.scss';\r\nimport './scss/highlight/html.scss';\r\nimport './scss/highlight/css.scss';\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  router,\r\n  render: h => h(App),\r\n}).$mount('#app')"],"sourceRoot":""}